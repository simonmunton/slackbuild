--- lprof-20120430/src/3rdparty/vigra/src/impex/png.cxx.orig	2008-02-19 21:02:07.000000000 +0000
+++ lprof-20120430/src/3rdparty/vigra/src/impex/png.cxx	2013-06-24 06:26:24.640888750 +0100
@@ -77,7 +77,7 @@
 static void PngError( png_structp png_ptr, png_const_charp error_msg )
 {
     png_error_message = std::string(error_msg);
-    longjmp( png_ptr->jmpbuf, 1 );
+    longjmp( png_jmpbuf(png_ptr), 1 );
 }
 
 // called on non-fatal errors
@@ -209,7 +209,7 @@
         vigra_postcondition( png != 0, "could not create the read struct." );
 
         // create info struct
-        if (setjmp(png->jmpbuf)) {
+        if (setjmp(png_jmpbuf(png))) {
             png_destroy_read_struct( &png, &info, NULL );
             vigra_postcondition( false, png_error_message.insert(0, "error in png_create_info_struct(): ").c_str() );
         }
@@ -217,14 +217,14 @@
         vigra_postcondition( info != 0, "could not create the info struct." );
 
         // init png i/o
-        if (setjmp(png->jmpbuf)) {
+        if (setjmp(png_jmpbuf(png))) {
             png_destroy_read_struct( &png, &info, NULL );
             vigra_postcondition( false, png_error_message.insert(0, "error in png_init_io(): ").c_str() );
         }
         png_init_io( png, file.get() );
 
         // specify that the signature was already read
-        if (setjmp(png->jmpbuf)) {
+        if (setjmp(png_jmpbuf(png))) {
             png_destroy_read_struct( &png, &info, NULL );
             vigra_postcondition( false, png_error_message.insert(0, "error in png_set_sig_bytes(): ").c_str() );
         }
@@ -240,13 +240,13 @@
     void PngDecoderImpl::init()
     {
         // read all chunks up to the image data
-        if (setjmp(png->jmpbuf))
+        if (setjmp(png_jmpbuf(png)))
             vigra_postcondition( false, png_error_message.insert(0, "error in png_read_info(): ").c_str() );
         png_read_info( png, info );
 
         // pull over the header fields
         int interlace_method, compression_method, filter_method;
-        if (setjmp(png->jmpbuf))
+        if (setjmp(png_jmpbuf(png)))
             vigra_postcondition( false, png_error_message.insert(0, "error in png_get_IHDR(): ").c_str() );
         png_get_IHDR( png, info, &width, &height, &bit_depth, &color_type,
                       &interlace_method, &compression_method, &filter_method );
@@ -260,7 +260,7 @@
 
         // transform palette to rgb
         if ( color_type == PNG_COLOR_TYPE_PALETTE) {
-            if (setjmp(png->jmpbuf))
+            if (setjmp(png_jmpbuf(png)))
                 vigra_postcondition( false, png_error_message.insert(0, "error in png_palette_to_rgb(): ").c_str() );
             png_set_palette_to_rgb(png);
             color_type = PNG_COLOR_TYPE_RGB;
@@ -269,9 +269,9 @@
 
         // expand gray values to at least one byte size
         if ( color_type == PNG_COLOR_TYPE_GRAY && bit_depth < 8 ) {
-            if (setjmp(png->jmpbuf))
+            if (setjmp(png_jmpbuf(png)))
                 vigra_postcondition( false,png_error_message.insert(0, "error in png_set_gray_1_2_4_to_8(): ").c_str());
-            png_set_gray_1_2_4_to_8(png);
+            png_set_expand_gray_1_2_4_to_8(png);
             bit_depth = 8;
         }
 
@@ -279,7 +279,7 @@
 #if 0
         // strip alpha channel
         if ( color_type & PNG_COLOR_MASK_ALPHA ) {
-            if (setjmp(png->jmpbuf))
+            if (setjmp(png_jmpbuf(png)))
                 vigra_postcondition( false, png_error_message.insert(0, "error in png_set_strip_alpha(): ").c_str() );
             png_set_strip_alpha(png);
             color_type ^= PNG_COLOR_MASK_ALPHA;
@@ -321,9 +321,9 @@
 #if (PNG_LIBPNG_VER > 10008) && defined(PNG_READ_iCCP_SUPPORTED)
         char * dummyName;
         int dummyCompType;
-        char * profilePtr;
+        unsigned char * profilePtr;
         png_uint_32 profileLen;
-        if (info->valid & PNG_INFO_iCCP) {
+        if (png_get_valid(png, info, PNG_INFO_iCCP)) {
             png_get_iCCP(png, info, &dummyName, &dummyCompType, &profilePtr, &profileLen) ;
             iccProfilePtr = (unsigned char *) profilePtr;
             iccProfileLength = profileLen;
@@ -336,7 +336,7 @@
         // image gamma
         double image_gamma = 0.45455;
         if ( png_get_valid( png, info, PNG_INFO_gAMA ) ) {
-            if (setjmp(png->jmpbuf))
+            if (setjmp(png_jmpbuf(png)))
                 vigra_postcondition( false, png_error_message.insert(0, "error in png_get_gAMA(): ").c_str() );
             png_get_gAMA( png, info, &image_gamma );
         }
@@ -345,26 +345,26 @@
         double screen_gamma = 2.2;
 
         // set gamma correction
-        if (setjmp(png->jmpbuf))
+        if (setjmp(png_jmpbuf(png)))
             vigra_postcondition( false, png_error_message.insert(0, "error in png_set_gamma(): ").c_str() );
         png_set_gamma( png, screen_gamma, image_gamma );
 #endif
 
         // interlace handling, get number of read passes needed
-        if (setjmp(png->jmpbuf))
+        if (setjmp(png_jmpbuf(png)))
             vigra_postcondition( false,png_error_message.insert(0, "error in png_set_interlace_handling(): ").c_str());
         n_interlace_passes = png_set_interlace_handling(png);
 
         // update png library state to reflect any changes that were made
-        if (setjmp(png->jmpbuf))
+        if (setjmp(png_jmpbuf(png)))
             vigra_postcondition( false, png_error_message.insert(0, "error in png_read_update_info(): ").c_str() );
         png_read_update_info( png, info );
 
-        if (setjmp(png->jmpbuf))
+        if (setjmp(png_jmpbuf(png)))
             vigra_postcondition( false,png_error_message.insert(0, "error in png_get_channels(): ").c_str());
         n_channels = png_get_channels(png, info);
 
-        if (setjmp(png->jmpbuf))
+        if (setjmp(png_jmpbuf(png)))
             vigra_postcondition( false,png_error_message.insert(0, "error in png_get_rowbytes(): ").c_str());
         rowsize = png_get_rowbytes(png, info);
 
@@ -375,7 +375,7 @@
     void PngDecoderImpl::nextScanline()
     {
         for (int i=0; i < n_interlace_passes; i++) {
-        if (setjmp(png->jmpbuf))
+        if (setjmp(png_jmpbuf(png)))
                 vigra_postcondition( false,png_error_message.insert(0, "error in png_read_row(): ").c_str());
             png_read_row(png, row_data.begin(), NULL);
         }
@@ -541,7 +541,7 @@
         vigra_postcondition( png != 0, "could not create the write struct." );
 
         // create info struct
-        if (setjmp(png->jmpbuf)) {
+        if (setjmp(png_jmpbuf(png))) {
             png_destroy_write_struct( &png, &info );
             vigra_postcondition( false, png_error_message.insert(0, "error in png_info_struct(): ").c_str() );
         }
@@ -552,7 +552,7 @@
         }
 
         // init png i/o
-        if (setjmp(png->jmpbuf)) {
+        if (setjmp(png_jmpbuf(png))) {
             png_destroy_write_struct( &png, &info );
             vigra_postcondition( false, png_error_message.insert(0, "error in png_init_io(): ").c_str() );
         }
@@ -567,7 +567,7 @@
     void PngEncoderImpl::finalize()
     {
         // write the IHDR
-        if (setjmp(png->jmpbuf))
+        if (setjmp(png_jmpbuf(png)))
             vigra_postcondition( false, png_error_message.insert(0, "error in png_set_IHDR(): ").c_str() );
         png_set_IHDR( png, info, width, height, bit_depth, color_type,
                       PNG_INTERLACE_NONE, PNG_COMPRESSION_TYPE_DEFAULT,
@@ -575,7 +575,7 @@
 
         // set resolution
         if (x_resolution > 0 && y_resolution > 0) {
-            if (setjmp(png->jmpbuf))
+            if (setjmp(png_jmpbuf(png)))
                 vigra_postcondition( false, png_error_message.insert(0, "error in png_set_pHYs(): ").c_str() );
             png_set_pHYs(png, info, (png_uint_32) (x_resolution * 254 + 0.5),
                          (png_uint_32) (y_resolution * 254 + 0.5),
@@ -584,7 +584,7 @@
 
         // set offset
         if (position.x > 0 && position.y > 0) {
-            if (setjmp(png->jmpbuf))
+            if (setjmp(png_jmpbuf(png)))
                 vigra_postcondition( false, png_error_message.insert(0, "error in png_set_oFFs(): ").c_str() );
             png_set_oFFs(png, info, position.x, position.y, PNG_OFFSET_PIXEL);
         }
@@ -593,12 +593,12 @@
         // set icc profile
         if (iccProfile.size() > 0) {
             png_set_iCCP(png, info, "icc", 0,
-                         (char *)iccProfile.begin(), iccProfile.size());
+                         (png_const_bytep)iccProfile.begin(), iccProfile.size());
         }
 #endif
 
         // write the info struct
-        if (setjmp(png->jmpbuf))
+        if (setjmp(png_jmpbuf(png)))
             vigra_postcondition( false, png_error_message.insert(0, "error in png_write_info(): ").c_str() );
         png_write_info( png, info );
 
@@ -630,10 +630,10 @@
         }
 
         // write the whole image
-        if (setjmp(png->jmpbuf))
+        if (setjmp(png_jmpbuf(png)))
             vigra_postcondition( false, png_error_message.insert(0, "error in png_write_image(): ").c_str() );
         png_write_image( png, row_pointers.begin() );
-        if (setjmp(png->jmpbuf))
+        if (setjmp(png_jmpbuf(png)))
             vigra_postcondition( false, png_error_message.insert(0, "error in png_write_end(): ").c_str() );
         png_write_end(png, info);
     }
--- lprof-20120430/src/3rdparty/vigra/include/vigra/multi_array.hxx.orig	2008-02-19 21:01:55.000000000 +0000
+++ lprof-20120430/src/3rdparty/vigra/include/vigra/multi_array.hxx	2013-06-24 20:19:36.825468040 +0100
@@ -39,6 +39,7 @@
 #ifndef VIGRA_MULTI_ARRAY_HXX
 #define VIGRA_MULTI_ARRAY_HXX
 
+#include <cstddef>
 #include <memory>
 #include <algorithm>
 #include "accessor.hxx"
--- lprof-20120430/src/liblprof/CMakeLists.txt.orig	2008-02-19 21:02:38.000000000 +0000
+++ lprof-20120430/src/liblprof/CMakeLists.txt	2013-06-24 20:24:27.903454152 +0100
@@ -22,3 +22,5 @@
     PROPERTIES
     INCLUDE_DIRECTORIES "${CMAKE_SOURCE_DIR}/src/lcms/include;${ARGYLL_INCLUDE_DIRS}"
 )
+
+include_directories("${CMAKE_SOURCE_DIR}/src/lcms/include;${ARGYLL_INCLUDE_DIRS}")
--- lprof-20120430/src/ICCtoIT8/CMakeLists.txt.orig	2008-02-19 21:02:10.000000000 +0000
+++ lprof-20120430/src/ICCtoIT8/CMakeLists.txt	2013-06-24 20:23:41.772456353 +0100
@@ -12,6 +12,8 @@
     INCLUDE_DIRECTORIES "${CMAKE_SOURCE_DIR}/src/lcms/include;${CMAKE_SOURCE_DIR}/src/liblprof;${ARGYLL_INCLUDE_DIRS}"
 )
 
+include_directories("${CMAKE_SOURCE_DIR}/src/lcms/include;${CMAKE_SOURCE_DIR}/src/liblprof;${ARGYLL_INCLUDE_DIRS}")
+
 TARGET_LINK_LIBRARIES(icc2it8 liblprof lcmslocal ${COMMON_PLATFORM_LIBS})
 
 INSTALL(
--- lprof-20120430/src/CMakeLists.txt.orig	2009-05-03 01:47:24.000000000 +0100
+++ lprof-20120430/src/CMakeLists.txt	2013-06-24 20:22:37.340459427 +0100
@@ -148,7 +148,9 @@
     INCLUDE_DIRECTORIES "${lprof_inc_dirs};${lprof_qt_incs};${ARGYLL_INCLUDE_DIRS};${impex_include};${LIBUSB_INCLUDE_DIR};${X11_INCLUDE_DIR};${ZLIB_INCLUDE_DIR};${JPEG_INCLUDE_DIR};${TIFF_INCLUDE_DIR};${CMAKE_CURRENT_BINARY_DIR};${WINDDK_INCLUDE_DIR}"
 )
 
-TARGET_LINK_LIBRARIES(lprof liblprof lcmslocal argyll ${X11_VIDMODE_LIBRARIES} ${X11_LIBRARIES} ${impex_lib} ${LIBUSB_LIBRARIES} ${QT_LIBRARIES} ${JPEG_LIBRARIES} ${TIFF_LIBRARIES} ${ZLIB_LIBRARIES} ${COMMON_PLATFORM_LIBS} ${WINDDK_LIBRARIES})
+include_directories("${lprof_inc_dirs};${lprof_qt_incs};${ARGYLL_INCLUDE_DIRS};${impex_include};${LIBUSB_INCLUDE_DIR};${X11_INCLUDE_DIR};${ZLIB_INCLUDE_DIR};${JPEG_INCLUDE_DIR};${TIFF_INCLUDE_DIR};${CMAKE_CURRENT_BINARY_DIR};${WINDDK_INCLUDE_DIR}")
+
+TARGET_LINK_LIBRARIES(lprof liblprof lcmslocal argyll png pthread ${X11_VIDMODE_LIBRARIES} ${X11_LIBRARIES} ${impex_lib} ${LIBUSB_LIBRARIES} ${QT_LIBRARIES} ${JPEG_LIBRARIES} ${TIFF_LIBRARIES} ${ZLIB_LIBRARIES} ${COMMON_PLATFORM_LIBS} ${WINDDK_LIBRARIES})
 
 SET_TARGET_PROPERTIES(lprof
     PROPERTIES
