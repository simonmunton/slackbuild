--- asymptote-3.03/LspCpp/src/lsp/ParentProcessWatcher.cpp.orig	2025-05-11 22:52:07.000000000 +0100
+++ asymptote-3.03/LspCpp/src/lsp/ParentProcessWatcher.cpp	2025-05-12 10:43:41.572359964 +0100
@@ -1,10 +1,27 @@
 #include "LibLsp/lsp/ParentProcessWatcher.h"
 #include <algorithm>
+#include <boost/version.hpp>
+#if BOOST_VERSION < 108800
 #include <boost/process.hpp>
 
 #ifdef _WIN32
 #include <boost/process/v1/windows.hpp>
 #endif
+#else
+#include <boost/process/v1/async.hpp>
+#include <boost/process/v1/child.hpp>
+#include <boost/process/v1/env.hpp>
+#include <boost/process/v1/environment.hpp>
+#include <boost/process/v1/error.hpp>
+#include <boost/process/v1/group.hpp>
+#include <boost/process/v1/io.hpp>
+#include <boost/process/v1/pipe.hpp>
+#include <boost/process/v1/search_path.hpp>
+#include <boost/process/v1/start_dir.hpp>
+#ifdef BOOST_WINDOWS_API
+#include <boost/process/v1/windows.hpp>
+#endif
+#endif
 
 #include <boost/filesystem.hpp>
 #include <boost/asio.hpp>
@@ -16,18 +33,25 @@
 using namespace boost::asio::ip;
 using namespace std;
 
+#if BOOST_VERSION < 108800
+namespace bp = boost::process;
+#else
+namespace bp = boost::process::v1;
+#endif
+
+
 struct ParentProcessWatcher::ParentProcessWatcherData : std::enable_shared_from_this<ParentProcessWatcherData>
 {
     std::unique_ptr<SimpleTimer<boost::posix_time::seconds>> timer;
     lsp::Log& _log;
     std::function<void()> on_exit;
     lsp::ProcessIoService asio_io;
-    std::shared_ptr<boost::process::opstream> write_to_service;
-    std::shared_ptr<boost::process::ipstream> read_from_service;
+    std::shared_ptr<bp::opstream> write_to_service;
+    std::shared_ptr<bp::ipstream> read_from_service;
     int pid;
     int const _poll_delay_secs /*= 10*/;
     std::string command;
-    std::shared_ptr<boost::process::child> c;
+    std::shared_ptr<bp::child> c;
 
     ParentProcessWatcherData(lsp::Log& log, int _pid, std::function<void()> const&& callback, uint32_t poll_delay_secs)
         : _log(log), on_exit(callback), pid(_pid), _poll_delay_secs(poll_delay_secs)
@@ -42,13 +66,12 @@
 
     void run()
     {
-        write_to_service = std::make_shared<boost::process::opstream>();
-        read_from_service = std::make_shared<boost::process::ipstream>();
+        write_to_service = std::make_shared<bp::opstream>();
+        read_from_service = std::make_shared<bp::ipstream>();
 
         //              const uint32_t POLL_DELAY_SECS = _poll_delay_secs;
         auto self(shared_from_this());
         std::error_code ec;
-        namespace bp = boost::process;
         c = std::make_shared<bp::child>(
             asio_io.getIOService(), command, ec,
 #ifdef _WIN32
