--- webkitgtk-2.42.5/Source/WebKit/WebProcess/InjectedBundle/API/gtk/DOM/WebKitDOMEventTarget.h.orig	2023-09-19 09:27:50.743673800 +0100
+++ webkitgtk-2.42.5/Source/WebKit/WebProcess/InjectedBundle/API/gtk/DOM/WebKitDOMEventTarget.h	2024-09-16 20:43:25.328892031 +0100
@@ -92,7 +92,7 @@
  * webkit_dom_event_target_remove_event_listener:
  * @target: A #WebKitDOMEventTarget
  * @event_name: A #gchar
- * @handler: (scope call): A #GCallback
+ * @handler: (type gpointer): A #GCallback
  * @use_capture: A #gboolean
  *
  * Returns: a #gboolean
--- webkitgtk-2.42.5/Source/WebKit/PlatformGTK.cmake.orig	2023-10-05 15:23:45.923756400 +0100
+++ webkitgtk-2.42.5/Source/WebKit/PlatformGTK.cmake	2024-09-16 20:38:14.122871137 +0100
@@ -366,6 +366,12 @@
     )
 endif ()
 
+if (${GI_VERSION} VERSION_GREATER_EQUAL 1.79.2)
+    set(USE_GI_FINISH_FUNC_ANNOTATION 1)
+else ()
+    set(USE_GI_FINISH_FUNC_ANNOTATION 0)
+endif ()
+
 GENERATE_GLIB_API_HEADERS(WebKit WebKitGTK_HEADER_TEMPLATES
     ${WebKitGTK_DERIVED_SOURCES_DIR}/webkit
     WebKitGTK_INSTALLED_HEADERS
@@ -373,7 +379,9 @@
     "-DWTF_PLATFORM_WPE=0"
     "-DUSE_GTK4=$<BOOL:${USE_GTK4}>"
     "-DENABLE_2022_GLIB_API=$<BOOL:${ENABLE_2022_GLIB_API}>"
+    "-DUSE_GI_FINISH_FUNC_ANNOTATION=${USE_GI_FINISH_FUNC_ANNOTATION}"
 )
+unset(USE_GI_FINISH_FUNC_ANNOTATION)
 
 GENERATE_GLIB_API_HEADERS(WebKit WebKitWebProcessExtension_HEADER_TEMPLATES
     ${WebKitGTK_DERIVED_SOURCES_DIR}/webkit
--- webkitgtk-2.42.5/Source/WebKit/UIProcess/API/glib/WebKitWebView.h.in.orig	2023-09-19 09:27:50.555677700 +0100
+++ webkitgtk-2.42.5/Source/WebKit/UIProcess/API/glib/WebKitWebView.h.in	2024-09-16 20:38:14.123871137 +0100
@@ -891,6 +891,148 @@
 WEBKIT_API const gchar*
 webkit_web_view_get_default_content_security_policy  (WebKitWebView             *web_view);
 
+#if USE(GI_FINISH_FUNC_ANNOTATION)
+/**
+ * webkit_web_view_run_async_javascript_function_in_world: (finish-func webkit_web_view_run_javascript_in_world_finish)
+ * @web_view: a #WebKitWebView
+ * @body: the JavaScript function body
+ * @arguments: a #GVariant with format `{&sv}` storing the function arguments. Function argument values must be one of the following types, or contain only the following GVariant types: number, string, array, and dictionary.
+ * @world_name: (nullable): the name of a #WebKitScriptWorld, if no name (i.e. %NULL) is provided, the default world is used. Any value that is not %NULL is a distinct world.
+ * @cancellable: (allow-none): a #GCancellable or %NULL to ignore
+ * @callback: (scope async): a #GAsyncReadyCallback to call when the script finished
+ * @user_data: the data to pass to callback function
+ *
+ * Asynchronously run @body in the script world with name @world_name of the current page context in
+ * @web_view. If WebKitSettings:enable-javascript is FALSE, this method will do nothing. This API
+ * differs from webkit_web_view_run_javascript_in_world() in that the JavaScript function can return a
+ * Promise and its result will be properly passed to the callback.
+ *
+ * When the operation is finished, @callback will be called. You can then call
+ * webkit_web_view_run_javascript_in_world_finish() to get the result of the operation.
+ *
+ * For instance here is a dummy example that shows how to pass arguments to a JS function that
+ * returns a Promise that resolves with the passed argument:
+ *
+ * ```c
+ * static void
+ * web_view_javascript_finished (GObject      *object,
+ *                               GAsyncResult *result,
+ *                               gpointer      user_data)
+ * {
+ *     WebKitJavascriptResult *js_result;
+ *     JSCValue               *value;
+ *     GError                 *error = NULL;
+ *
+ *     js_result = webkit_web_view_run_javascript_finish (WEBKIT_WEB_VIEW (object), result, &error);
+ *     if (!js_result) {
+ *         g_warning ("Error running javascript: %s", error->message);
+ *         g_error_free (error);
+ *         return;
+ *     }
+ *
+ *     value = webkit_javascript_result_get_js_value (js_result);
+ *     if (jsc_value_is_number (value)) {
+ *         gint32        int_value = jsc_value_to_string (value);
+ *         JSCException *exception = jsc_context_get_exception (jsc_value_get_context (value));
+ *         if (exception)
+ *             g_warning ("Error running javascript: %s", jsc_exception_get_message (exception));
+ *         else
+ *             g_print ("Script result: %d\n", int_value);
+ *         g_free (str_value);
+ *     } else {
+ *         g_warning ("Error running javascript: unexpected return value");
+ *     }
+ *     webkit_javascript_result_unref (js_result);
+ * }
+ *
+ * static void
+ * web_view_evaluate_promise (WebKitWebView *web_view)
+ * {
+ *     GVariantDict dict;
+ *     g_variant_dict_init (&dict, NULL);
+ *     g_variant_dict_insert (&dict, "count", "u", 42);
+ *     GVariant *args = g_variant_dict_end (&dict);
+ *     const gchar *body = "return new Promise((resolve) => { resolve(count); });";
+ *     webkit_web_view_run_async_javascript_function_in_world (web_view, body, arguments, NULL, NULL, web_view_javascript_finished, NULL);
+ * }
+ * ```
+ *
+ * Since: 2.38
+ *
+ * Deprecated: 2.40: Use webkit_web_view_call_async_javascript_function() instead.
+ */
+#else
+/**
+ * webkit_web_view_run_async_javascript_function_in_world:
+ * @web_view: a #WebKitWebView
+ * @body: the JavaScript function body
+ * @arguments: a #GVariant with format `{&sv}` storing the function arguments. Function argument values must be one of the following types, or contain only the following GVariant types: number, string, array, and dictionary.
+ * @world_name: (nullable): the name of a #WebKitScriptWorld, if no name (i.e. %NULL) is provided, the default world is used. Any value that is not %NULL is a distinct world.
+ * @cancellable: (allow-none): a #GCancellable or %NULL to ignore
+ * @callback: (scope async): a #GAsyncReadyCallback to call when the script finished
+ * @user_data: the data to pass to callback function
+ *
+ * Asynchronously run @body in the script world with name @world_name of the current page context in
+ * @web_view. If WebKitSettings:enable-javascript is FALSE, this method will do nothing. This API
+ * differs from webkit_web_view_run_javascript_in_world() in that the JavaScript function can return a
+ * Promise and its result will be properly passed to the callback.
+ *
+ * When the operation is finished, @callback will be called. You can then call
+ * webkit_web_view_run_javascript_in_world_finish() to get the result of the operation.
+ *
+ * For instance here is a dummy example that shows how to pass arguments to a JS function that
+ * returns a Promise that resolves with the passed argument:
+ *
+ * ```c
+ * static void
+ * web_view_javascript_finished (GObject      *object,
+ *                               GAsyncResult *result,
+ *                               gpointer      user_data)
+ * {
+ *     WebKitJavascriptResult *js_result;
+ *     JSCValue               *value;
+ *     GError                 *error = NULL;
+ *
+ *     js_result = webkit_web_view_run_javascript_finish (WEBKIT_WEB_VIEW (object), result, &error);
+ *     if (!js_result) {
+ *         g_warning ("Error running javascript: %s", error->message);
+ *         g_error_free (error);
+ *         return;
+ *     }
+ *
+ *     value = webkit_javascript_result_get_js_value (js_result);
+ *     if (jsc_value_is_number (value)) {
+ *         gint32        int_value = jsc_value_to_string (value);
+ *         JSCException *exception = jsc_context_get_exception (jsc_value_get_context (value));
+ *         if (exception)
+ *             g_warning ("Error running javascript: %s", jsc_exception_get_message (exception));
+ *         else
+ *             g_print ("Script result: %d\n", int_value);
+ *         g_free (str_value);
+ *     } else {
+ *         g_warning ("Error running javascript: unexpected return value");
+ *     }
+ *     webkit_javascript_result_unref (js_result);
+ * }
+ *
+ * static void
+ * web_view_evaluate_promise (WebKitWebView *web_view)
+ * {
+ *     GVariantDict dict;
+ *     g_variant_dict_init (&dict, NULL);
+ *     g_variant_dict_insert (&dict, "count", "u", 42);
+ *     GVariant *args = g_variant_dict_end (&dict);
+ *     const gchar *body = "return new Promise((resolve) => { resolve(count); });";
+ *     webkit_web_view_run_async_javascript_function_in_world (web_view, body, arguments, NULL, NULL, web_view_javascript_finished, NULL);
+ * }
+ * ```
+ *
+ * Since: 2.38
+ *
+ * Deprecated: 2.40: Use webkit_web_view_call_async_javascript_function() instead.
+ */
+#endif
+
 G_END_DECLS
 
 #endif
--- webkitgtk-2.42.5/Source/WebKit/UIProcess/API/glib/WebKitWebView.cpp.orig	2024-02-05 08:47:20.551899000 +0000
+++ webkitgtk-2.42.5/Source/WebKit/UIProcess/API/glib/WebKitWebView.cpp	2024-09-16 20:38:14.123871137 +0100
@@ -4394,75 +4394,6 @@
     webkitWebViewEvaluateJavascriptInternal(webView, script, -1, worldName, nullptr, RunJavascriptReturnType::WebKitJavascriptResult, cancellable, callback, userData);
 }
 
-/**
- * webkit_web_view_run_async_javascript_function_in_world:
- * @web_view: a #WebKitWebView
- * @body: the JavaScript function body
- * @arguments: a #GVariant with format `{&sv}` storing the function arguments. Function argument values must be one of the following types, or contain only the following GVariant types: number, string, array, and dictionary.
- * @world_name (nullable): the name of a #WebKitScriptWorld, if no name (i.e. %NULL) is provided, the default world is used. Any value that is not %NULL is a distinct world.
- * @cancellable: (allow-none): a #GCancellable or %NULL to ignore
- * @callback: (scope async): a #GAsyncReadyCallback to call when the script finished
- * @user_data: the data to pass to callback function
- *
- * Asynchronously run @body in the script world with name @world_name of the current page context in
- * @web_view. If WebKitSettings:enable-javascript is FALSE, this method will do nothing. This API
- * differs from webkit_web_view_run_javascript_in_world() in that the JavaScript function can return a
- * Promise and its result will be properly passed to the callback.
- *
- * When the operation is finished, @callback will be called. You can then call
- * webkit_web_view_run_javascript_in_world_finish() to get the result of the operation.
- *
- * For instance here is a dummy example that shows how to pass arguments to a JS function that
- * returns a Promise that resolves with the passed argument:
- *
- * ```c
- * static void
- * web_view_javascript_finished (GObject      *object,
- *                               GAsyncResult *result,
- *                               gpointer      user_data)
- * {
- *     WebKitJavascriptResult *js_result;
- *     JSCValue               *value;
- *     GError                 *error = NULL;
- *
- *     js_result = webkit_web_view_run_javascript_finish (WEBKIT_WEB_VIEW (object), result, &error);
- *     if (!js_result) {
- *         g_warning ("Error running javascript: %s", error->message);
- *         g_error_free (error);
- *         return;
- *     }
- *
- *     value = webkit_javascript_result_get_js_value (js_result);
- *     if (jsc_value_is_number (value)) {
- *         gint32        int_value = jsc_value_to_string (value);
- *         JSCException *exception = jsc_context_get_exception (jsc_value_get_context (value));
- *         if (exception)
- *             g_warning ("Error running javascript: %s", jsc_exception_get_message (exception));
- *         else
- *             g_print ("Script result: %d\n", int_value);
- *         g_free (str_value);
- *     } else {
- *         g_warning ("Error running javascript: unexpected return value");
- *     }
- *     webkit_javascript_result_unref (js_result);
- * }
- *
- * static void
- * web_view_evaluate_promise (WebKitWebView *web_view)
- * {
- *     GVariantDict dict;
- *     g_variant_dict_init (&dict, NULL);
- *     g_variant_dict_insert (&dict, "count", "u", 42);
- *     GVariant *args = g_variant_dict_end (&dict);
- *     const gchar *body = "return new Promise((resolve) => { resolve(count); });";
- *     webkit_web_view_run_async_javascript_function_in_world (web_view, body, arguments, NULL, NULL, web_view_javascript_finished, NULL);
- * }
- * ```
- *
- * Since: 2.38
- *
- * Deprecated: 2.40: Use webkit_web_view_call_async_javascript_function() instead.
- */
 void webkit_web_view_run_async_javascript_function_in_world(WebKitWebView* webView, const gchar* body, GVariant* arguments, const char* worldName, GCancellable* cancellable, GAsyncReadyCallback callback, gpointer userData)
 {
     webkitWebViewCallAsyncJavascriptFunctionInternal(webView, body, -1, arguments, worldName, nullptr, RunJavascriptReturnType::WebKitJavascriptResult, cancellable, callback, userData);
--- webkitgtk-2.42.5/Source/JavaScriptCore/llint/LLIntThunks.cpp.orig	2023-09-19 09:27:45.395784000 +0100
+++ webkitgtk-2.42.5/Source/JavaScriptCore/llint/LLIntThunks.cpp	2024-11-01 11:25:34.608475114 +0000
@@ -227,7 +227,7 @@
     std::call_once(onceKey, [&] {
         JSInterfaceJIT jit;
         void* ptr = reinterpret_cast<void*>(ipint_entry);
-        void* untagged = CodePtr<CFunctionPtrTag>::fromTaggedPtr(ptr).template untaggedPtr();
+        void* untagged = CodePtr<CFunctionPtrTag>::fromTaggedPtr(ptr).template untaggedPtr<>();
         void* retagged = nullptr;
 #if ENABLE(JIT_CAGE)
         if (Options::useJITCage())
--- webkitgtk-2.42.5/Source/JavaScriptCore/llint/InPlaceInterpreter.cpp.orig	2023-09-19 09:27:45.391784000 +0100
+++ webkitgtk-2.42.5/Source/JavaScriptCore/llint/InPlaceInterpreter.cpp	2024-11-01 11:24:54.940472451 +0000
@@ -43,8 +43,8 @@
 do { \
     void* base = reinterpret_cast<void*>(ipint_unreachable_validate); \
     void* ptr = reinterpret_cast<void*>(ipint_ ## name ## _validate); \
-    void* untaggedBase = CodePtr<CFunctionPtrTag>::fromTaggedPtr(base).template untaggedPtr(); \
-    void* untaggedPtr = CodePtr<CFunctionPtrTag>::fromTaggedPtr(ptr).template untaggedPtr(); \
+    void* untaggedBase = CodePtr<CFunctionPtrTag>::fromTaggedPtr(base).template untaggedPtr<>(); \
+    void* untaggedPtr = CodePtr<CFunctionPtrTag>::fromTaggedPtr(ptr).template untaggedPtr<>(); \
     RELEASE_ASSERT((char*)(untaggedPtr) - (char*)(untaggedBase) == opcode * 256); \
 } while (false);
 
@@ -52,8 +52,8 @@
 do { \
     void* base = reinterpret_cast<void*>(ipint_i32_trunc_sat_f32_s_validate); \
     void* ptr = reinterpret_cast<void*>(ipint_ ## name ## _validate); \
-    void* untaggedBase = CodePtr<CFunctionPtrTag>::fromTaggedPtr(base).template untaggedPtr(); \
-    void* untaggedPtr = CodePtr<CFunctionPtrTag>::fromTaggedPtr(ptr).template untaggedPtr(); \
+    void* untaggedBase = CodePtr<CFunctionPtrTag>::fromTaggedPtr(base).template untaggedPtr<>(); \
+    void* untaggedPtr = CodePtr<CFunctionPtrTag>::fromTaggedPtr(ptr).template untaggedPtr<>(); \
     RELEASE_ASSERT((char*)(untaggedPtr) - (char*)(untaggedBase) == opcode * 256); \
 } while (false);
 
--- webkitgtk-2.42.5/Source/JavaScriptCore/llint/LLIntData.h.orig	2023-09-19 09:27:45.391784000 +0100
+++ webkitgtk-2.42.5/Source/JavaScriptCore/llint/LLIntData.h	2024-11-01 11:09:53.072411901 +0000
@@ -217,7 +217,7 @@
 #if COMPILER(MSVC)
     return reinterpret_cast<LLIntCode>(getCodePtr<tag>(opcodeID).taggedPtr());
 #else
-    return reinterpret_cast<LLIntCode>(getCodePtr<tag>(opcodeID).template taggedPtr());
+    return reinterpret_cast<LLIntCode>(getCodePtr<tag>(opcodeID).template taggedPtr<>());
 #endif
 }
 
@@ -227,7 +227,7 @@
 #if COMPILER(MSVC)
     return reinterpret_cast<LLIntCode>(getWide16CodePtr<tag>(opcodeID).taggedPtr());
 #else
-    return reinterpret_cast<LLIntCode>(getWide16CodePtr<tag>(opcodeID).template taggedPtr());
+    return reinterpret_cast<LLIntCode>(getWide16CodePtr<tag>(opcodeID).template taggedPtr<>());
 #endif
 }
 
@@ -237,7 +237,7 @@
 #if COMPILER(MSVC)
     return reinterpret_cast<LLIntCode>(getWide32CodePtr<tag>(opcodeID).taggedPtr());
 #else
-    return reinterpret_cast<LLIntCode>(getWide32CodePtr<tag>(opcodeID).template taggedPtr());
+    return reinterpret_cast<LLIntCode>(getWide32CodePtr<tag>(opcodeID).template taggedPtr<>());
 #endif
 }
 
@@ -346,7 +346,7 @@
 #if COMPILER(MSVC)
     return reinterpret_cast<LLIntCode>(getCodePtr<tag>(opcodeID).taggedPtr());
 #else
-    return reinterpret_cast<LLIntCode>(getCodePtr<tag>(opcodeID).template taggedPtr());
+    return reinterpret_cast<LLIntCode>(getCodePtr<tag>(opcodeID).template taggedPtr<>());
 #endif
 }
 
@@ -356,7 +356,7 @@
 #if COMPILER(MSVC)
     return reinterpret_cast<LLIntCode>(getWide16CodePtr<tag>(opcodeID).taggedPtr());
 #else
-    return reinterpret_cast<LLIntCode>(getWide16CodePtr<tag>(opcodeID).template taggedPtr());
+    return reinterpret_cast<LLIntCode>(getWide16CodePtr<tag>(opcodeID).template taggedPtr<>());
 #endif
 }
 
@@ -366,7 +366,7 @@
 #if COMPILER(MSVC)
     return reinterpret_cast<LLIntCode>(getWide32CodePtr<tag>(opcodeID).taggedPtr());
 #else
-    return reinterpret_cast<LLIntCode>(getWide32CodePtr<tag>(opcodeID).template taggedPtr());
+    return reinterpret_cast<LLIntCode>(getWide32CodePtr<tag>(opcodeID).template taggedPtr<>());
 #endif
 }
 
--- webkitgtk-2.42.5/Source/JavaScriptCore/runtime/JSCast.h.orig	2023-09-19 09:27:45.455782700 +0100
+++ webkitgtk-2.42.5/Source/JavaScriptCore/runtime/JSCast.h	2024-11-01 11:05:14.875393223 +0000
@@ -236,7 +236,7 @@
 bool inherits(From* from)
 {
     using Dispatcher = InheritsTraits<Target>;
-    return Dispatcher::template inherits(from);
+    return Dispatcher::template inherits<>(from);
 }
 
 } // namespace JSCastingHelpers
@@ -245,7 +245,7 @@
 To jsDynamicCast(From* from)
 {
     using Dispatcher = JSCastingHelpers::InheritsTraits<typename std::remove_cv<typename std::remove_pointer<To>::type>::type>;
-    if (LIKELY(Dispatcher::template inherits(from)))
+    if (LIKELY(Dispatcher::template inherits<>(from)))
         return static_cast<To>(from);
     return nullptr;
 }
--- webkitgtk-2.42.5/Source/WTF/wtf/Platform.h.orig	2023-09-19 09:27:49.043708800 +0100
+++ webkitgtk-2.42.5/Source/WTF/wtf/Platform.h	2024-11-01 11:18:58.685448532 +0000
@@ -114,7 +114,7 @@
 /* FIXME: This does not belong in Platform.h and should instead be included in another mechanism (compiler option, prefix header, config.h, etc) */
 /* ICU configuration. Some of these match ICU defaults on some platforms, but we would like them consistently set everywhere we build WebKit. */
 #define U_HIDE_DEPRECATED_API 1
-#define U_SHOW_CPLUSPLUS_API 0
+#define U_SHOW_CPLUSPLUS_API 1
 #ifdef __cplusplus
 #define UCHAR_TYPE char16_t
 #endif
