# build utility functions
#
CWD=`pwd`



pre_unpack ()
{
USERNAME=`id -un`
GROUP=`id -gn`

: ${PKGNAME:=$TARNAME}
: ${PKGVERSION:=${VERSION//-/_}}
: ${BUILD_SUFFIX:=sm}

: ${ARCH:=i486}


# if TAR_EXT not set, try and guess it
#
if [ "x${TAR_EXT}" == "x" ]
then
  if [ -f ${FULL_TARNAME}.tar.gz ]
  then
    TAR_EXT=.tar.gz
    FULL_TARNAME=${FULL_TARNAME}${TAR_EXT}
  elif [ -f ${FULL_TARNAME}.tgz ]
  then
    TAR_EXT=.tgz
    FULL_TARNAME=${FULL_TARNAME}${TAR_EXT}
  elif [ -f ${FULL_TARNAME}.tar.bz2 ]
  then
    TAR_EXT=.tar.bz2
    FULL_TARNAME=${FULL_TARNAME}${TAR_EXT}
  elif [ -f ${FULL_TARNAME}.tbz ]
  then
    TAR_EXT=.tbz
    FULL_TARNAME=${FULL_TARNAME}${TAR_EXT}
  elif [ -f ${FULL_TARNAME}.zip ]
  then
    TAR_EXT=.zip
    FULL_TARNAME=${FULL_TARNAME}${TAR_EXT}
  elif [ -f ${FULL_TARNAME}.7z ]
  then
    TAR_EXT=.7z
    FULL_TARNAME=${FULL_TARNAME}${TAR_EXT}
  fi
fi

# guess tar program and tar opts

case ${TAR_EXT} in
  .tar.gz|.tgz)
    : ${TAR_PROG:=tar}
    : ${TAR_OPTS:=xzvf}
    ;;

  .tar.bz2|.tbz)
    : ${TAR_PROG:=tar}
    : ${TAR_OPTS:=xjvf}
    ;;

  .zip)
    : ${TAR_PROG:=unzip}
    : ${TAR_OPTS:=}
    ;;

  .7z)
    : ${TAR_PROG:=7z}
    : ${TAR_OPTS:=x}
    ;;

esac


}


pre_configure ()
{
rm -rf ${PKG}
mkdir -p ${PKG}
mkdir -p ${PKG}/usr/doc/$TARNAME-$VERSION
mkdir -p ${PKG}/install

CPUOPT="-mcpu"
GCCVER=`gcc -v 2>&1 > /dev/null | grep "gcc version" | sed -e "s/.*gcc version *//"`
case ${GCCVER} in
  3.4*|4.*) CPUOPT="-mtune" ;;
esac
}


fix_perms ()
{
chmod -R o+w,go-w,a+r *

find . -perm 666 -exec chmod 644 {} \;
find . -perm 664 -exec chmod 644 {} \;
find . -perm 660 -exec chmod 644 {} \;
find . -perm 646 -exec chmod 644 {} \;
find . -perm 640 -exec chmod 644 {} \;
find . -perm 600 -exec chmod 644 {} \;
find . -perm 444 -exec chmod 644 {} \;
find . -perm 400 -exec chmod 644 {} \;
find . -perm 440 -exec chmod 644 {} \;
find . -perm 777 -exec chmod 755 {} \;
find . -perm 775 -exec chmod 755 {} \;
find . -perm 511 -exec chmod 755 {} \;
find . -perm 711 -exec chmod 755 {} \;
find . -perm 555 -exec chmod 755 {} \;
}

strip_binaries ()
{
( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
)
}

fix_links ()
{
# fix links
for f in `find ${PKG} -type l`
do
  if [[ `readlink ${f}` =~ "${PKG}.*" ]]
  then
    (cd `dirname ${f}`
     linkname=`basename ${f}`
     ln -snf `readlink ${linkname} | sed -e "s@${PKG}@@"` ${linkname}
    )
  fi
done
}

perllocalpod ()
{
(cd ${PKG}
 PERLLOCALPOD=`find . -name perllocal.pod`
 if [ -n "${PERLLOCALPOD}" ]; then
   mv ${PERLLOCALPOD} install/slack-perllocal.pod
   cat >> install/doinst.sh <<EOF
#
cat >> ${PERLLOCALPOD/.\//} < install/slack-perllocal.pod
EOF
 fi
)
}

compress_manpages ()
{
if [ -d ${PKG}/usr/share/man ]
then
  echo moving usr/share/man
  mv ${PKG}/usr/share/man ${PKG}/usr
fi

if [ -d ${PKG}/usr/man ]
then
  # compress man pages
  find ${PKG}/usr/man -exec gzip {} \;

  # make links point to right places
  for f in `find ${PKG}/usr/man -type l`
  do
    mv ${f} ${f}.gz
    ln -sf `readlink ${f}.gz`.gz ${f}.gz
  done
fi

if [ -d ${PKG}/usr/X11R6/man ]
then
  # compress man pages
  find ${PKG}/usr/X11R6/man -exec gzip {} \;

  # make links point to right places
  for f in `find ${PKG}/usr/X11R6/man -type l`
  do
    mv ${f} ${f}.gz
    ln -sf `readlink ${f}.gz`.gz ${f}.gz
  done
fi
}

compress_info ()
{
if [ -d ${PKG}/usr/share/info ]
then
  echo moving usr/share/info
  mv ${PKG}/usr/share/info ${PKG}/usr
fi

if [ -d ${PKG}/usr/info ]
then
  rm ${PKG}/usr/info/dir

  # compress info pages
  find ${PKG}/usr/info -exec gzip {} \;
fi
}


fix_docs ()
{
if [ -d ${PKG}/usr/share/doc/${TARNAME}-${VERSION} ]
then
  mv -f ${PKG}/usr/share/doc/${TARNAME}-${VERSION}/* ${PKG}/usr/doc/${TARNAME}-${VERSION}
  rm -rf ${PKG}/usr/share/doc
fi

if [ -d ${PKG}/usr/share/doc/${TARNAME} ]
then
  mv -f ${PKG}/usr/share/doc/${TARNAME}/* ${PKG}/usr/doc/${TARNAME}-${VERSION}
  rm -rf ${PKG}/usr/share/doc
fi

if [ -d ${PKG}/usr/share/doc/${PKGNAME} ]
then
  mv -f ${PKG}/usr/share/doc/${PKGNAME}/* ${PKG}/usr/doc/${TARNAME}-${VERSION}
  rm -rf ${PKG}/usr/share/doc
fi

if [ -d ${PKG}/usr/doc/${TARNAME} ]
then
  mv -f ${PKG}/usr/doc/${TARNAME}/* ${PKG}/usr/doc/${TARNAME}-${VERSION}
  rm -rf ${PKG}/usr/doc/${TARNAME}
fi

}


post_install ()
{
##############################################################
# if info dir exists, do install-info
#
if [ -d ${PKG}/usr/info ]
then
  infos=`ls ${PKG}/usr/info | grep \.info\.gz | tr '\012' ' '`
  if [ -n "${infos}" ]
  then
    cat <<EOF >> ${PKG}/install/doinst.sh
#
for n in ${infos}
do
  install-info --info-dir=/usr/info /usr/info/\${n}
done
EOF
  fi
fi

##############################################################
# if gconf schemas exist, run gconftool
#
if [ -d ${PKG}/etc/gconf/schemas ]
then
  schemas=`ls ${PKG}/etc/gconf/schemas | tr '\012' ' '`
  if [ -n "${schemas}" ]
  then
    cat <<EOF >> ${PKG}/install/doinst.sh
#
for n in ${schemas}
do
  GCONF_CONFIG_SOURCE=xml:merged:/etc/gconf/gconf.xml.defaults /usr/bin/gconftool-2 --makefile-install-rule /etc/gconf/schemas/\${n}
done
EOF
  fi
fi

##############################################################
# if usr/share/applications exists, run update-desktop-database
#
if [ -d ${PKG}/usr/share/applications ]
then
  cat <<EOF >> ${PKG}/install/doinst.sh
#
/usr/bin/update-desktop-database
EOF
fi

##############################################################
# if usr/share/mime exists, run update-mime-database
#
if [ -d ${PKG}/usr/share/mime ]
then
  cat <<EOF >> ${PKG}/install/doinst.sh
#
/usr/bin/update-mime-database /usr/share/mime
EOF
fi

##############################################################
# if usr/share/icons exists, run gtk-update-icon-cache
#
if [ -d ${PKG}/usr/share/icons ]
then
  icons=`find ${PKG}/usr/share/icons -type d -maxdepth 1 | grep -v "^${PKG}/usr/share/icons$" | sed -e 's@/.*/usr/share/icons/@@' | tr '\012' ' '`
  if [ -n "${icons}" ]
  then
    cat <<EOF >> ${PKG}/install/doinst.sh
#
for n in ${icons}
do
  gtk-update-icon-cache -f -t /usr/share/icons/\${n}
done
EOF
  fi
fi

##############################################################
# if var/lib/scrollkeeper or usr/share/omf exist, run
# scrollkeeper-update
#
if [ -d ${PKG}/var/lib/scrollkeeper -o -d ${PKG}/usr/share/omf ]
then
  if [ -d ${PKG}/var/lib/scrollkeeper ]
  then
    ( cd ${PKG}/var/lib/scrollkeeper && rm -r * )
  fi

  cat <<EOF >> ${PKG}/install/doinst.sh
#
if [ -x /usr/bin/scrollkeeper-update ]; then
  /usr/bin/scrollkeeper-update -p /var/lib/scrollkeeper 1> /dev/null 2> /dev/null
fi
EOF
fi

##############################################################
# if usr/lib/gtk-2.0/*/loaders exists, run
# gdk-pixbuf-query-loaders
#
if [ -d ${PKG}/usr/lib/gtk-2.0/*/loaders ]
then
  cat <<EOF >> ${PKG}/install/doinst.sh
#
if [ -x /usr/bin/gdk-pixbuf-query-loaders ]; then
  gdk-pixbuf-query-loaders > /etc/gtk-2.0/gdk-pixbuf.loaders
fi
EOF
fi

##############################################################
# if usr/lib/gtk-2.0/*/immodule exists, run
# gtk-query-immodules-2.0
#
if [ -d ${PKG}/usr/lib/gtk-2.0/*/immodule ]
then
  cat <<EOF >> ${PKG}/install/doinst.sh
#
if [ -x /usr/bin/gtk-query-immodules-2.0 ]; then
  gtk-query-immodules-2.0 > /etc/gtk-2.0/gtk.immodules
fi
EOF
fi

##############################################################
# warn if usr/local exists
#
if [ -d ${PKG}/usr/local ]
then
  echo WARNING --- usr/local directory exists
fi

if [ -d ${PKG}/usr/share/doc ]
then
  echo WARNING --- usr/share/doc directory exists
fi

if [ -d ${PKG}/tmp ]
then
  echo WARNING --- tmp directory exists
fi

(cd ${PKG}
 PERLLOCALPOD=`find . -name perllocal.pod`
 if [ -n "${PERLLOCALPOD}" ]; then
  echo WARNING --- perllocal.pod exists
 fi
)

}


doinst_config()
{
if [ ${WRITTEN_CONFIG:-no} == "no" ]
then
  cat << EOF >> ${PKG}/install/doinst.sh
#
config() {
  NEW="\$1"
  OLD="\`dirname \$NEW\`/\`basename \$NEW .new\`"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\`cat \$OLD | md5sum\`" = "\`cat \$NEW | md5sum\`" ]; then # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

EOF
  WRITTEN_CONFIG=yes
fi

for n in $*
do
  echo config ${n} >> ${PKG}/install/doinst.sh
done
}


doinst_addusergrp()
{
if [ "x$2" == "x" ]
then
  echo "*** doinst_addusergrp() requires user and group argument"
  return
fi

cat << EOF >> ${PKG}/install/doinst.sh
###
# Create $1 user in $2 group if they don't exist.
###
group_exists=`grep ^$2 etc/group`
if [[ "${group_exists}" == "" ]]; then
        groupadd $2
fi
user_exists=`grep ^$1 etc/passwd`
if [[ "${user_exists}" == "" ]]; then
        useradd $1 -g $2
fi

EOF
}

