# build utility functions
#
CWD=`pwd`

DO_CONFIGURE=yes
DO_MAKE=yes
DO_INSTALL=yes
NUM_JOBS="-j 1"


# Note that we use `"$@"' to let each command-line parameter expand to a
# separate word. The quotes around `$@' are essential!
# We need OPTS as the `eval set --' would nuke the return value of getopt.

OPTS=`getopt -o cmij: --long disable-configure,disable-make,disable-install,num-jobs: \
     -n "$0" -- "$@"`

# Note the quotes around `$OPTS': they are essential!
eval set -- "${OPTS}"

while true ; do
  case "$1" in
    -c|--disable-configure)  DO_CONFIGURE=no; shift ;;
    -m|--disable-make)       DO_MAKE=no; shift ;;
    -i|--disable-install)    DO_INSTALL=no; shift ;;
    -j|--num-jobs)	     NUM_JOBS="-j $2"; shift 2 ;;
    --) shift ; break ;;
  esac
done




guess_tar_prog ()
{
# guess tar program and tar opts

case $1 in
  *.tar)
    : ${TAR_PROG:=tar}
    : ${TAR_OPTS:=xvf}
    ;;

  *.tar.gz|*.tgz)
    : ${TAR_PROG:=tar}
    : ${TAR_OPTS:=xzvf}
    ;;

  *.tar.bz2|*.tbz)
    : ${TAR_PROG:=tar}
    : ${TAR_OPTS:=xjvf}
    ;;

  *.tar.xz)
    : ${TAR_PROG:=tar}
    : ${TAR_OPTS:=xJvf}
    ;;

  *.zip|*.jar)
    : ${TAR_PROG:=unzip}
    : ${TAR_OPTS:=}
    ;;

  *.7z)
    : ${TAR_PROG:=7z}
    : ${TAR_OPTS:=x}
    ;;
esac
}

unpack ()
{
guess_tar_prog $1

${TAR_PROG} ${TAR_OPTS} $1
}

pre_unpack ()
{
USERNAME=`id -un`
GROUP=`id -gn`

: ${PKGNAME:=$TARNAME}
: ${PKGVERSION:=${VERSION//-/_}}
: ${PKGDIR:=/tmp/packages/}
: ${BUILD_SUFFIX:=sm}
: ${LIBDIRSUFFIX:=""}

if [ "${ARCH}" == "" ]
then
  case `uname -m` in
    x86_64)
      ARCH=x86_64
      LIBDIRSUFFIX="64"
      SLKCFLAGS="-O2 -fPIC"
      ;;
    *)
      ARCH=i486
      LIBDIRSUFFIX=""
      SLKCFLAGS="-O2 -march=i486 -mtune=i686"
      ;;
  esac
fi

# if TAR_EXT not set, try and guess it
#
if [ "x${TAR_EXT}" == "x" ]
then
  if [ -f ${FULL_TARNAME}.tar ]
  then
    TAR_EXT=.tar
    FULL_TARNAME=${FULL_TARNAME}${TAR_EXT}
  elif [ -f ${FULL_TARNAME}.tar.gz ]
  then
    TAR_EXT=.tar.gz
    FULL_TARNAME=${FULL_TARNAME}${TAR_EXT}
  elif [ -f ${FULL_TARNAME}.tgz ]
  then
    TAR_EXT=.tgz
    FULL_TARNAME=${FULL_TARNAME}${TAR_EXT}
  elif [ -f ${FULL_TARNAME}.tar.bz2 ]
  then
    TAR_EXT=.tar.bz2
    FULL_TARNAME=${FULL_TARNAME}${TAR_EXT}
  elif [ -f ${FULL_TARNAME}.tbz ]
  then
    TAR_EXT=.tbz
    FULL_TARNAME=${FULL_TARNAME}${TAR_EXT}
  elif [ -f ${FULL_TARNAME}.tar.xz ]
  then
    TAR_EXT=.tar.xz
    FULL_TARNAME=${FULL_TARNAME}${TAR_EXT}
  elif [ -f ${FULL_TARNAME}.zip ]
  then
    TAR_EXT=.zip
    FULL_TARNAME=${FULL_TARNAME}${TAR_EXT}
  elif [ -f ${FULL_TARNAME}.jar ]
  then
    TAR_EXT=.jar
    FULL_TARNAME=${FULL_TARNAME}${TAR_EXT}
  elif [ -f ${FULL_TARNAME}.7z ]
  then
    TAR_EXT=.7z
    FULL_TARNAME=${FULL_TARNAME}${TAR_EXT}
  fi
fi

guess_tar_prog ${TAR_EXT}
}


pre_configure ()
{
rm -rf ${PKG}
mkdir -p ${PKG}
mkdir -p ${PKG}/usr/doc/$TARNAME-$VERSION
mkdir -p ${PKG}/install
mkdir -p ${PKGDIR}

CPUOPT="-mcpu"
GCCVER=`gcc -v 2>&1 > /dev/null | grep "gcc version" | sed -e "s/.*gcc version *//"`
case ${GCCVER} in
  3.4*|4.*) CPUOPT="-mtune" ;;
esac
}


fix_perms ()
{
chmod -R +X,o+w,go-w,a+r *

find . -perm 666 -exec chmod 644 {} \;
find . -perm 664 -exec chmod 644 {} \;
find . -perm 660 -exec chmod 644 {} \;
find . -perm 646 -exec chmod 644 {} \;
find . -perm 640 -exec chmod 644 {} \;
find . -perm 600 -exec chmod 644 {} \;
find . -perm 444 -exec chmod 644 {} \;
find . -perm 400 -exec chmod 644 {} \;
find . -perm 440 -exec chmod 644 {} \;
find . -perm 777 -exec chmod 755 {} \;
find . -perm 775 -exec chmod 755 {} \;
find . -perm 511 -exec chmod 755 {} \;
find . -perm 711 -exec chmod 755 {} \;
find . -perm 555 -exec chmod 755 {} \;
}


create_debug_file ()
{
sdir=`dirname $1`
sfile=`basename $1`
( cd ${sdir}
  objcopy --only-keep-debug "${sfile}" "${sfile}.debug"
  strip --strip-debug --strip-unneeded "${sfile}"
  objcopy --add-gnu-debuglink="${sfile}.debug" "${sfile}"
  chmod -x "${sfile}.debug"
)
}


make_debug_files ()
{
( cd ${PKG}
  find . -print0 | xargs -0 file | grep -E "(executable|shared object|current ar archive)" | grep ELF | cut -f 1 -d : | while read name
  do
    create_debug_file "$name"
  done
)
}


strip_binaries ()
{
( cd ${PKG}
  find . -name "lib*so*" -exec strip --strip-unneeded "{}" \; 2> /dev/null
  find . -name "lib*a" -exec strip -g "{}" \; 2> /dev/null
  if [ -d usr/bin ]
  then
    strip --strip-unneeded usr/bin/* 2> /dev/null
  fi

  find . -print0 | xargs -0 file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . -print0 | xargs -0 file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . -print0 | xargs -0 file | grep "current ar archive" | grep ELF | cut -f 1 -d : | xargs strip -g 2> /dev/null
)
}

make_slack_desc()
{
if [ "$1" == "" ]
then
  SHORT_DESC="${PKGNAME} ${VERSION}"
else
  SHORT_DESC="$1"
fi

cat > ${PKG}/install/slack-desc << EOF
# HOW TO EDIT THIS FILE:
# The "handy ruler" below makes it easier to edit a package description.  Line
# up the first '|' above the ':' following the base package name, and the '|'
# on the right side marks the last column you can put a character in.  You must
# make exactly 11 lines for the formatting to be correct.  It's also
# customary to leave one space after the ':'.

${PKGNAME//?/ }|-----handy-ruler------------------------------------------------------|
${PKGNAME}: ${PKGNAME} (${SHORT_DESC})
${PKGNAME}:
EOF

sed -e "s/^/${PKGNAME}: /" -e 's/ $//' >> ${PKG}/install/slack-desc
}

fix_links ()
{
# fix links
FL_REXP="${PKG}.*"
for f in `find ${PKG} -type l`
do
  if [[ `readlink ${f}` =~ ${FL_REXP} ]]
  then
    (cd `dirname ${f}`
     linkname=`basename ${f}`
     ln -snf `readlink ${linkname} | sed -e "s@${PKG}@@"` ${linkname}
    )
  fi
done
}

perllocalpod ()
{
(cd ${PKG}
 PERLLOCALPOD=`find . -name perllocal.pod`
 if [ -n "${PERLLOCALPOD}" ]; then
  echo WARNING --- perllocal.pod exists - renaming ...
  for f in ${PERLLOCALPOD}
  do
    (cd `dirname $f`
     mv perllocal.pod ${PKGNAME}.pod
    )
  done
 fi
)
}

compress_manpages ()
{
if [ -d ${PKG}/usr/share/man ]
then
  echo moving usr/share/man
  mkdir -p ${PKG}/usr/man
  for d in ${PKG}/usr/share/man/*
  do
    if [ -d ${PKG}/usr/man/${d##*/} ]
    then
      mv ${d}/* ${PKG}/usr/man/${d##*/}
      rmdir ${d}
    else
      mv ${d} ${PKG}/usr/man
    fi
  done
  rmdir ${PKG}/usr/share/man
fi

if [ -d ${PKG}/usr/man -o -d ${PKG}/usr/X11R6/man ]
then
  # compress man pages
  MANDIR=
  if [ -d ${PKG}/usr/man ]
  then
    MANDIR=${PKG}/usr/man
  fi
  if [ -d ${PKG}/usr/X11R6/man ]
  then
    MANDIR="${PKG}/usr/X11R6/man ${MANDIR}"
  fi

  find ${MANDIR} -type f -exec gzip {} \;

  # make links point to right places
  for f in `find ${MANDIR} -type l`
  do
    if [ "${f: -3}" != ".gz" ]
    then
      mv ${f} ${f}.gz
      ln -sf `readlink ${f}.gz`.gz ${f}.gz
    fi
  done
fi
}

compress_info ()
{
if [ -d ${PKG}/usr/share/info ]
then
  echo moving usr/share/info
  mv ${PKG}/usr/share/info ${PKG}/usr
fi

if [ -d ${PKG}/usr/info ]
then
  rm ${PKG}/usr/info/dir

  # compress info pages
  find ${PKG}/usr/info -exec gzip {} \;
fi
}


fix_docs ()
{
if [ -d ${PKG}/usr/share/doc/${TARNAME}-${VERSION} ]
then
  mv -f ${PKG}/usr/share/doc/${TARNAME}-${VERSION}/* ${PKG}/usr/doc/${TARNAME}-${VERSION}
  rm -rf ${PKG}/usr/share/doc
fi

if [ -d ${PKG}/usr/share/doc/${TARNAME} ]
then
  mv -f ${PKG}/usr/share/doc/${TARNAME}/* ${PKG}/usr/doc/${TARNAME}-${VERSION}
  rm -rf ${PKG}/usr/share/doc
fi

if [ -d ${PKG}/usr/share/doc/${PKGNAME} ]
then
  mv -f ${PKG}/usr/share/doc/${PKGNAME}/* ${PKG}/usr/doc/${TARNAME}-${VERSION}
  rm -rf ${PKG}/usr/share/doc
fi

if [ -d ${PKG}/usr/doc/${TARNAME} ]
then
  mv -f ${PKG}/usr/doc/${TARNAME}/* ${PKG}/usr/doc/${TARNAME}-${VERSION}
  rm -rf ${PKG}/usr/doc/${TARNAME}
fi

if [ -d ${PKG}/usr/man ]
then
  chmod -R -x,+X ${PKG}/usr/man
fi

if [ -d ${PKG}/usr/info ]
then
  chmod -R -x,+X ${PKG}/usr/info
fi
}

get_real_path ()
{
if [ -L $1 ]
then
  l=`readlink $1`
  if [ "/" == "${l:0:1}" ]
  then
    echo ${PKG}${l}
  else
    echo $1
  fi
else
  echo $1
fi
}

post_install ()
{
##############################################################
# if info dir exists, do install-info
#
if [ -d ${PKG}/usr/info ]
then
  infos=`ls ${PKG}/usr/info | grep \.info\.gz | tr '\012' ' '`
  if [ -n "${infos}" ]
  then
    cat <<EOF >> ${PKG}/install/doinst.sh
#
for n in ${infos}
do
  install-info --info-dir=/usr/info /usr/info/\${n}
done
EOF
  fi
fi

##############################################################
# if gconf schemas exist, run gconftool
#
if [ -d ${PKG}/etc/gconf/schemas ]
then
  schemas=`ls ${PKG}/etc/gconf/schemas | grep "schemas$" | tr '\012' ' '`
  if [ -n "${schemas}" ]
  then
    cat <<EOF >> ${PKG}/install/doinst.sh
#
for n in ${schemas}
do
  GCONF_CONFIG_SOURCE=xml:merged:/etc/gconf/gconf.xml.defaults /usr/bin/gconftool-2 --makefile-install-rule /etc/gconf/schemas/\${n}
done
EOF
  fi
fi

##############################################################
# if usr/share/applications exists, run update-desktop-database
#
if [ -d ${PKG}/usr/share/applications ]
then
  cat <<EOF >> ${PKG}/install/doinst.sh
#
/usr/bin/update-desktop-database
EOF
fi

##############################################################
# if usr/share/mime exists, run update-mime-database
#
if [ -d ${PKG}/usr/share/mime ]
then
  cat <<EOF >> ${PKG}/install/doinst.sh
#
/usr/bin/update-mime-database /usr/share/mime
EOF
fi

##############################################################
# if usr/share/icons exists, run gtk-update-icon-cache
#
if [ -d ${PKG}/usr/share/icons ]
then
  icons=`find ${PKG}/usr/share/icons -type d -maxdepth 1 | grep -v "^${PKG}/usr/share/icons$" | sed -e 's@/.*/usr/share/icons/@@' | tr '\012' ' '`
  if [ -n "${icons}" ]
  then
    cat <<EOF >> ${PKG}/install/doinst.sh
#
for n in ${icons}
do
  gtk-update-icon-cache -f -t /usr/share/icons/\${n}
done
EOF
  fi
fi

##############################################################
# if var/lib/scrollkeeper or usr/share/omf exist, run
# scrollkeeper-update
#
if [ -d ${PKG}/var/lib/scrollkeeper -o -d ${PKG}/usr/share/omf ]
then
  if [ -d ${PKG}/var/lib/scrollkeeper ]
  then
    ( cd ${PKG}/var/lib/scrollkeeper && rm -r * )
  fi

  cat <<EOF >> ${PKG}/install/doinst.sh
#
if [ -x /usr/bin/scrollkeeper-update ]; then
  /usr/bin/scrollkeeper-update -p /var/lib/scrollkeeper 1> /dev/null 2> /dev/null
fi
EOF
fi

##############################################################
# if usr/lib/gtk-2.0/*/loaders exists, run
# gdk-pixbuf-query-loaders
#
if [ -d ${PKG}/usr/lib${LIBDIRSUFFIX}/gtk-2.0/*/loaders ]
then
  cat <<EOF >> ${PKG}/install/doinst.sh
#
if [ -x /usr/bin/gdk-pixbuf-query-loaders ]; then
  gdk-pixbuf-query-loaders > /etc/gtk-2.0/gdk-pixbuf.loaders
fi
EOF
fi

##############################################################
# if usr/lib/gtk-2.0/*/immodules exists, run
# gtk-query-immodules-2.0
#
if [ -d ${PKG}/usr/lib${LIBDIRSUFFIX}/gtk-2.0/*/immodules -o -d ${PKG}/usr/lib${LIBDIRSUFFIX}/gtk-2.0/immodules ]
then
  cat <<EOF >> ${PKG}/install/doinst.sh
#
if [ -x /usr/bin/gtk-query-immodules-2.0 ]; then
  gtk-query-immodules-2.0 > /etc/gtk-2.0/gtk.immodules
fi
EOF
fi

##############################################################
# if usr/lib/gtk-3.0/*/immodules exists, run
# gtk-query-immodules-3.0
#
if [ -d ${PKG}/usr/lib${LIBDIRSUFFIX}/gtk-3.0/*/immodules -o -d ${PKG}/usr/lib${LIBDIRSUFFIX}/gtk-3.0/immodules ]
then
  cat <<EOF >> ${PKG}/install/doinst.sh
#
if [ -x /usr/bin/gtk-query-immodules-3.0 ]; then
  gtk-query-immodules-3.0 > /etc/gtk-3.0/gtk.immodules
fi
EOF
fi

##############################################################
# if usr/share/glib-2.0/schemas exists, run
# glib-compile-schemas
#
if [ -d ${PKG}/usr/share/glib-2.0/schemas ]
then
  cat <<EOF >> ${PKG}/install/doinst.sh
#
if [ -x /usr/bin/glib-compile-schemas ]; then
  /usr/bin/glib-compile-schemas usr/share/glib-2.0/schemas
fi
EOF
fi

##############################################################
# if usr/lib/pango/*/modules exists, run
# gtk-query-immodules-2.0
#
if [ -d ${PKG}/usr/lib${LIBDIRSUFFIX}/pango/*/modules ]
then
  cat <<EOF >> ${PKG}/install/doinst.sh
#
if [ -x /usr/bin/pango-querymodules ]; then
  /usr/bin/pango-querymodules > /etc/pango/pango.modules
fi
EOF
fi

##############################################################
# if usr/share/fonts exists, run
# mkfontscale and mkfontdir
#
if [ -d ${PKG}/usr/share/fonts ]
then
  fonts=`find ${PKG}/usr/share/fonts -type d -maxdepth 1 | grep -v "^${PKG}/usr/share/fonts$" | sed -e 's@/.*/usr/share/fonts/@@' | tr '\012' ' '`
  if [ -n "${fonts}" ]
  then
    cat << EOF >> ${PKG}/install/doinst.sh
#
if [ -x /usr/bin/mkfontdir -o -x /usr/X11R6/bin/mkfontdir ]; then
for n in $fonts
do
  ( cd /usr/share/fonts/\${n}
    mkfontscale .
    mkfontdir -e /usr/share/fonts/encodings -e /usr/share/fonts/encodings/large .
  )
done
fi
if [ -x /usr/bin/fc-cache ]; then
  /usr/bin/fc-cache -f
fi

EOF
  fi
fi

##############################################################
# warn if usr/local or other dirs exist
#
for d in usr/local  tmp home var/lib/cache var/lib/lib var/lib/log var/lib/run usr/locale usr/share/pkgconfig
do
  if [ -d ${PKG}/$d ]
  then
    echo WARNING --- $d directory exists
  fi
done

if [ -d ${PKG}/usr/share/doc ]
then
  if [ "`ls ${PKG}/usr/share/doc`" != "HTML" ]
  then
    echo WARNING --- usr/share/doc directory exists
  fi
fi

##############################################################
# warn if pkgconfig files contain references to old X11 dir or build dir
#
if [ -d ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig ]
then
  if grep /usr/X11 ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig/*pc 2>&1 > /dev/null
  then
    echo WARNING --- pkgconfig files contain reference to /usr/X11
  fi
  if grep ${CWD} ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig/*pc 2>&1 > /dev/null
  then
    echo WARNING --- pkgconfig files contain reference to build directory
  fi
fi

##############################################################
# warn if .la files contain references to build dir
#
for f in `find ${PKG} -name "*.la"`
do
  if grep ${CWD} ${f} 2>&1 > /dev/null
  then
    echo WARNING --- .la files contain reference to build directory
    break
  fi
done

perllocalpod

##############################################################
# warn if links to build dir exist exists
#
find ${PKG} -type l | while read f
do
if readlink ${f} | grep ${CWD} >& /dev/null
then
  echo WARNING --- symbolic link ${f} points to build directory
fi
done

##############################################################
# warn if site_perl directory exists
#
if find ${PKG} | grep site_perl 1> /dev/null ; then
  echo "WARNING --- site_perl directory detected (this is fine for a local package build)"
fi

##############################################################
# warn if vendor_perl modules exist as core modules on this sytem
#
if [ -d ${PKG}/usr/lib${LIBDIRSUFFIX}/perl5 ]
then
  for f in `(cd ${PKG}/usr/lib${LIBDIRSUFFIX}/perl5; find . | grep -E "/(site|vendor)_perl/" | sed -e 's@/\(site\|vendor\)_perl/@/@')`
  do
    if [ -f /usr/lib${LIBDIRSUFFIX}/perl5/$f ]
    then
      echo "WARNING --- files in site_perl/vendor_perl also in core on this system"
      break
    fi
  done
fi

}


sanitise_la_files()
{
for f in `find $1 -name "*.la"`
do
  sed -i -e "s@-L${CWD}[^ ]*@@g" ${f}
done
}


doinst_config()
{
if ! grep -q "^config() {$" ${PKG}/install/doinst.sh
then
  cat << EOF >> ${PKG}/install/doinst.sh
#
config() {
  NEW="\$1"
  OLD="\`dirname \$NEW\`/\`basename \$NEW .new\`"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\`cat \$OLD | md5sum\`" = "\`cat \$NEW | md5sum\`" ]; then # toss the redundant copy
    rm \$NEW
  else
    # Otherwise, we leave the .new copy for the admin to consider...
    echo "New file \$NEW needs admin consideration"
  fi
}

EOF
  WRITTEN_CONFIG=yes
fi

for n in $*
do
  echo config ${n} >> ${PKG}/install/doinst.sh
done
}


doinst_addgrp()
{
if [ "x$1" == "x" ]
then
  echo "*** doinst_addgrp() requires group argument"
  return
fi

cat << EOF >> ${PKG}/install/doinst.sh
###
# Create $1 group if doesn't exist.
###
group_exists=\`grep ^$1 etc/group\`
if [[ "\${group_exists}" == "" ]]; then
        groupadd $1
fi

EOF
}

doinst_addusergrp()
{
if [ "x$2" == "x" ]
then
  echo "*** doinst_addusergrp() requires user and group argument"
  return
fi

if [ "x$3" != "x" ]
then
  no_shell='-s /bin/false'
  rm_home="usermod -d \"\" $1"
fi

cat << EOF >> ${PKG}/install/doinst.sh
###
# Create $1 user in $2 group if they don't exist.
###
group_exists=\`grep ^$2 etc/group\`
if [[ "\${group_exists}" == "" ]]; then
        groupadd $2
fi
user_exists=\`grep ^$1 etc/passwd\`
if [[ "\${user_exists}" == "" ]]; then
        useradd $1 -g $2 ${no_shell}
	${rm_home}
fi

EOF
}

doinst_same_perm()
{
orig=$1
if [ "x$2" == "x" ]
then
  new=$1.new
else
  return
fi

cat << EOF >> ${PKG}/install/doinst.sh
# Keep same perms on ${new}:
if [ -e ${orig} ]; then
  chmod --reference=${orig} ${new}
fi

EOF
}


create_desktop_entry()
{
# $1: filename	$2: name	$3: generic name	$4: comment
# $5: executable	$6: icon	$7: categories
if [ "x$7" == "x" ]
then
  echo "Not enough arguments to create_desktop_entry()"
  return
fi

mkdir -p ${PKG}/usr/share/applications

cat << EOF > ${PKG}/usr/share/applications/$1.desktop
[Desktop Entry]
Encoding=UTF-8
Name=$2
GenericName=$3
Comment=$4
Exec=$5
Icon=$6
Terminal=false
Type=Application
Categories=$7
EOF
}
