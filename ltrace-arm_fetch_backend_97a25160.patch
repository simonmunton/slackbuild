From 97a25160b0fe646d9c567e12c5abefe8e59873c2 Mon Sep 17 00:00:00 2001
From: Petr Machata <pmachata@redhat.com>
Date: Tue, 5 Feb 2013 03:30:11 +0100
Subject: Add ARM fetch backend

This only properly decodes float and double return values.  More to come.
---
 sysdeps/linux-gnu/arm/fetch.c |  104 ++++++++++++++++++++++++++++++++++++++++++
 sysdeps/linux-gnu/arm/trace.c |   43 -----------------
 2 files changed, 104 insertions(+), 43 deletions(-)

Index: b/sysdeps/linux-gnu/arm/fetch.c
===================================================================
--- a/sysdeps/linux-gnu/arm/fetch.c
+++ b/sysdeps/linux-gnu/arm/fetch.c
@@ -222,3 +222,107 @@ arch_library_clone(struct library *retp,
 {
 	retp->arch = lib->arch;
 }
+
+struct fetch_context {
+	struct pt_regs regs;
+	struct {
+		union {
+			double d[32];
+			float s[64];
+		};
+		uint32_t fpscr;
+	} fpregs;
+	bool hardfp:1;
+};
+
+static int
+fetch_register_banks(struct Process *proc, struct fetch_context *context)
+{
+	if (context->hardfp
+	    && ptrace(PTRACE_GETVFPREGS, proc->pid,
+		      NULL, &context->fpregs) == -1)
+		return -1;
+
+	return 0;
+}
+
+struct fetch_context *
+arch_fetch_arg_init(enum tof type, struct Process *proc,
+		    struct arg_type_info *ret_info)
+{
+	struct fetch_context *context = malloc(sizeof(*context));
+	context->hardfp = proc->libraries->arch.hardfp;
+	if (context == NULL
+	    || fetch_register_banks(proc, context) < 0) {
+		free(context);
+		return NULL;
+	}
+
+	return context;
+}
+
+struct fetch_context *
+arch_fetch_arg_clone(struct Process *proc,
+		     struct fetch_context *context)
+{
+	struct fetch_context *clone = malloc(sizeof(*context));
+	if (clone == NULL)
+		return NULL;
+	*clone = *context;
+	return clone;
+}
+
+int
+arch_fetch_arg_next(struct fetch_context *ctx, enum tof type,
+		    struct Process *proc,
+		    struct arg_type_info *info, struct value *valuep)
+{
+	return 0;
+}
+
+int
+arch_fetch_retval(struct fetch_context *ctx, enum tof type,
+		  struct Process *proc, struct arg_type_info *info,
+		  struct value *valuep)
+{
+	if (fetch_register_banks(proc, ctx) < 0)
+		return -1;
+
+	switch (info->type) {
+	case ARGTYPE_VOID:
+		return 0;
+
+	case ARGTYPE_FLOAT:
+	case ARGTYPE_DOUBLE:
+		if (ctx->hardfp) {
+			size_t sz = type_sizeof(proc, info);
+			assert(sz != (size_t)-1);
+			unsigned char *data = value_reserve(valuep, sz);
+			if (data == NULL)
+				return -1;
+			memmove(data, &ctx->fpregs, sz);
+			return 0;
+		}
+		/* Fall through.  */
+
+	case ARGTYPE_CHAR:
+	case ARGTYPE_SHORT:
+	case ARGTYPE_USHORT:
+	case ARGTYPE_INT:
+	case ARGTYPE_UINT:
+	case ARGTYPE_LONG:
+	case ARGTYPE_ULONG:
+	case ARGTYPE_POINTER:
+	case ARGTYPE_ARRAY:
+	case ARGTYPE_STRUCT:
+		return -1;
+	}
+	assert(info->type != info->type);
+	abort();
+}
+
+void
+arch_fetch_arg_done(struct fetch_context *context)
+{
+	free(context);
+}
Index: b/sysdeps/linux-gnu/arm/trace.c
===================================================================
--- a/sysdeps/linux-gnu/arm/trace.c
+++ b/sysdeps/linux-gnu/arm/trace.c
@@ -103,46 +103,3 @@ syscall_p(Process *proc, int status, int
 	return 0;
 }
 
-long
-gimme_arg(enum tof type, Process *proc, int arg_num, struct arg_type_info *info)
-{
-	proc_archdep *a = (proc_archdep *) proc->arch_ptr;
-
-	if (arg_num == -1) {	/* return value */
-		return ptrace(PTRACE_PEEKUSER, proc->pid, off_r0, 0);
-	}
-
-	/* deal with the ARM calling conventions */
-	if (type == LT_TOF_FUNCTION || type == LT_TOF_FUNCTIONR) {
-		if (arg_num < 4) {
-			if (a->valid && type == LT_TOF_FUNCTION)
-				return a->regs.uregs[arg_num];
-			if (a->valid && type == LT_TOF_FUNCTIONR)
-				return a->func_arg[arg_num];
-			return ptrace(PTRACE_PEEKUSER, proc->pid,
-				      (void *)(4 * arg_num), 0);
-		} else {
-			return ptrace(PTRACE_PEEKDATA, proc->pid,
-				      proc->stack_pointer + 4 * (arg_num - 4),
-				      0);
-		}
-	} else if (type == LT_TOF_SYSCALL || type == LT_TOF_SYSCALLR) {
-		if (arg_num < 5) {
-			if (a->valid && type == LT_TOF_SYSCALL)
-				return a->regs.uregs[arg_num];
-			if (a->valid && type == LT_TOF_SYSCALLR)
-				return a->sysc_arg[arg_num];
-			return ptrace(PTRACE_PEEKUSER, proc->pid,
-				      (void *)(4 * arg_num), 0);
-		} else {
-			return ptrace(PTRACE_PEEKDATA, proc->pid,
-				      proc->stack_pointer + 4 * (arg_num - 5),
-				      0);
-		}
-	} else {
-		fprintf(stderr, "gimme_arg called with wrong arguments\n");
-		exit(1);
-	}
-
-	return 0;
-}
