#!/bin/bash
#
. build_funcs

TARNAME=coreutils
TARNAMEEXTRA=
TARSEP="-"
TARDIR=~/tmp/gnu/coreutils
#TAR_EXT=.tar.gz
VERSION=8.23
VERSIONEXTRA=
BUILD=1

WEBPAGE=""

#TAR_PROG=
#TAR_OPTS=
#PKGNAME=
#PKGVERSION=
#BUILD_SUFFIX=
#ARCH=noarch


FULL_TARNAME=${TARDIR}/${TARNAME}${TARNAMEEXTRA}${TARSEP}${VERSION}${VERSIONEXTRA}${TAR_EXT}

pre_unpack

PKG=/tmp/package-${PKGNAME}

if [ ! -f ${FULL_TARNAME} ]
then
  echo Can\'t find ${FULL_TARNAME}
  exit
fi

if [ ! -d ${TARNAME}-${VERSION} ]
then 
${TAR_PROG} ${TAR_OPTS} ${FULL_TARNAME}
#mv ${TARNAME}-${VERSION} ${TARNAME}-${VERSION}

if [ ! -d ${TARNAME}-${VERSION} ]
then 
  echo "${TARNAME}-${VERSION} directory not found"
  exit
fi

(cd ${TARNAME}-${VERSION}
 patch -p1 < ${CWD}/coreutils.uname.diff
)
fi

pre_configure

cd ${TARNAME}-${VERSION}

fix_perms

PKGCFLAGS="-O2 -march=i686 ${CPUOPT}=i686"

if [ ${DO_CONFIGURE} == "yes" ]
then
# Compilation with glibc version later than 2.3.2 needs the environment
# variable DEFAULT_POSIX2_VERSION set to 199209.
# Without the next line, the coreutils will start complaining about 'obsolete'
# command switches, like "tail -20" will be considered obsolete.
# This behaviour breaks many other packages... the 'obsolete' parameters are
# too commonly used to disregard them.  Better to stick with the older more
# widely accepted standards until things begin to demand the new way.

DEFAULT_POSIX2_VERSION=199209 \
CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
./configure --prefix=/usr \
            --bindir=/bin \
            --sysconfdir=/etc \
            --libdir=/usr/lib${LIBDIRSUFFIX} \
            --localstatedir=/var/lib \
	    --mandir=/usr/man \
	    --infodir=/usr/info \
	    --without-gmp

#cmake -DCMAKE_C_FLAGS:STRING="${SLKCFLAGS}" \
#      -DCMAKE_CXX_FLAGS:STRING="${SLKCFLAGS}" \
#      -DCMAKE_BUILD_TYPE=Release \
#      -DCMAKE_INSTALL_PREFIX=/usr \
#      -DMAN_INSTALL_DIR=/usr/man \
#      -DLIB_SUFFIX=${LIBDIRSUFFIX} \
#      -DSYSCONF_INSTALL_DIR=/etc \
#      .

fi

if [ ${DO_MAKE} == "yes" ]
then
make ${NUM_JOBS} || exit
fi

if [ ${DO_INSTALL} != "yes" ]
then
  exit
fi

make install DESTDIR=${PKG}

strip_binaries

# We have had the mktemp from debianutils included with Slackware for quite a
# long time, and certain options are changed here, like changing -u to mean a
# dry-run rather than to unlink the tempfile when finished.  Since this could
# break existing scripts, unless someone can tell me a good reason why we
# should start using a new version of mktemp, we will continue to use the
# one we've been using.  If the new one starts to become expected, let me know.
# We'll figure out what the best options are and go from there.
mv ${PKG}/bin/mktemp ${PKG}/bin/mktemp-gnu
mv ${PKG}/usr/man/man1/mktemp.1 ${PKG}/usr/man/man1/mktemp-gnu.1

# This seems wrong, and it stomps on files in the ksh93 package, though I'm
# not sure the placement of those is correct, either...  The ksh93 package
# installs them as flat text files, while coreutils installs empty directories
# Oh well, this is what we've done for years, and nobody's complained...
rm -rf ${PKG}/usr/share/locale/*/LC_TIME

# These are important enough that they should probably all go into /bin at this
# point...   Having some of them unavailable when /usr isn't mounted is just a
# source of unending bug reports for various third party applications.
# Time to end those reports.  :-)
mkdir -p ${PKG}/bin ${PKG}/usr/bin
( cd ${PKG}/usr/bin
  for file in ../../bin/* ; do
    ln --verbose -sf ${file} .
  done
)

# Add some defaults, although a very slack-like set of default options are built
# into /bin/ls now anyway:
mkdir -p ${PKG}/etc
cat ${CWD}/coreutils-DIR_COLORS > ${PKG}/etc/DIR_COLORS.new

doinst_config etc/DIR_COLORS.new

# Since dircolors no longer provides any default aliases these scripts
# will be needed for ls to act as expected:
mkdir -p ${PKG}/etc/profile.d
cat ${CWD}/coreutils-dircolors.csh > ${PKG}/etc/profile.d/coreutils-dircolors.csh
cat ${CWD}/coreutils-dircolors.sh > ${PKG}/etc/profile.d/coreutils-dircolors.sh
chmod 755 ${PKG}/etc/profile.d/*

# Remove things that are provided by other Slackware packages:
for dupe in hostname kill su uptime ; do
  rm -f ${PKG}/bin/${dupe} ${PKG}/usr/bin/${dupe} \
    ${PKG}/usr/sbin/${dupe} ${PKG}/usr/man/man?/${dupe}.* ;
done

# Add ginstall links (there's still a lot of stuff that needs this to compile):
( cd ${PKG}/bin ; ln -sf install ginstall )
( cd ${PKG}/usr/bin ; ln -sf ../../bin/ginstall ginstall )
( cd ${PKG}/usr/man/man1 ; ln -sf install.1 ginstall.1 )


fix_links

compress_manpages

compress_info

cp -a \
  AUTHORS COPYING* INSTALL NEWS PLANS README* TODO \
  THANKS THANKS-to-translators \
  ${PKG}/usr/doc/${TARNAME}-${VERSION}

# If there's a ChangeLog, installing at least part of the recent history
# is useful, but don't let it get totally out of control:
if [ -r ChangeLog ]; then
  DOCSDIR=$(echo ${PKG}/usr/doc/${TARNAME}-$VERSION)
  cat ChangeLog | head -n 1000 > ${DOCSDIR}/ChangeLog
  touch -r ChangeLog ${DOCSDIR}/ChangeLog
fi

fix_docs

#-----handy-ruler-for-slack-desc-width-------------------------------|
make_slack_desc << EOF "core GNU utilities"
These are the GNU core utilities, the basic command line programs
such as 'mkdir', 'ls', and 'rm' that are needed for the system to
run.  This package is the union of the GNU fileutils, sh-utils, and
textutils packages.  Most of these programs have significant
advantages over their Unix counterparts, such as greater speed,
additional options, and fewer arbitrary limits.

EOF

post_install

cd ${PKG}
su -c "chown -R root.root ${PKG}; \
find . -type d -exec chmod 755 {} \; ; \
makepkg -l y -c n ${PKGDIR}${PKGNAME}-${PKGVERSION}-${ARCH}-${BUILD}${BUILD_SUFFIX}.tgz; \
chown -R ${USERNAME}.${GROUP} ${PKG}"
