--- flann-1.9.2/doc/CMakeLists.txt.orig	2021-04-12 08:15:28.000000000 +0100
+++ flann-1.9.2/doc/CMakeLists.txt	2025-08-26 17:08:11.815792469 +0100
@@ -7,7 +7,7 @@
 if (EXISTS ${PDFLATEX_COMPILER} AND EXISTS ${BIBTEX_COMPILER})
     include(${PROJECT_SOURCE_DIR}/cmake/UseLATEX.cmake)
 
-    add_latex_document(manual.tex BIBFILES references.bib IMAGE_DIRS images DEFAULT_PDF)
+    add_latex_document(manual.tex BIBFILES references.bib IMAGE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/images DEFAULT_PDF)
 
     add_custom_command(OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/manual.pdf
         COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/manual.pdf ${CMAKE_CURRENT_SOURCE_DIR}/manual.pdf
--- flann-1.9.2/CMakeLists.txt.orig	2021-04-12 08:15:28.000000000 +0100
+++ flann-1.9.2/CMakeLists.txt	2025-08-26 16:15:16.023801722 +0100
@@ -1,4 +1,4 @@
-cmake_minimum_required(VERSION 2.6)
+cmake_minimum_required(VERSION 3.10)
 
 if(COMMAND cmake_policy)
     cmake_policy(SET CMP0003 NEW)
@@ -49,6 +49,8 @@
 # set output path for tests
 set(TEST_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/test)
 
+option(BUILD_SHARED_LIBS "Build shared version of libs" ON)
+option(WITH_HDF5 "Build hdf5 library" OFF)
 option(BUILD_C_BINDINGS "Build C bindings" ON)
 option(BUILD_PYTHON_BINDINGS "Build Python bindings" ON)
 option(BUILD_MATLAB_BINDINGS "Build Matlab bindings" ON)
@@ -75,11 +77,19 @@
 endif()
 endif()
 
-find_hdf5()
+if (WITH_HDF5)
+find_package(HDF5 CONFIG REQUIRED)
 if (NOT HDF5_FOUND)
-	message(WARNING "hdf5 library not found, some tests will not be run")
+    message(ERROR "hdf5 library not found")
 else()
-    include_directories(${HDF5_INCLUDE_DIR})
+    if (TARGET hdf5::hdf5-shared)
+        link_libraries(hdf5::hdf5-shared)
+    elseif (TARGET hdf5::hdf5-static)
+        link_libraries(hdf5::hdf5-static)
+    endif()
+    set(PKG_EXTERNAL_DEPS "${PKG_EXTERNAL_DEPS} hdf5")
+    set(CMAKE_EXTERNAL_DEPS "find_dependency(HDF5)")
+endif()
 endif()
 
 if (USE_MPI OR HDF5_IS_PARALLEL)
@@ -146,9 +156,9 @@
     endif(CUDA_FOUND)
 endif(BUILD_CUDA_LIB)
 
-find_package(PkgConfig REQUIRED)
-pkg_check_modules(LZ4 REQUIRED liblz4)
-include_directories(${LZ4_INCLUDE_DIRS})
+find_package(PkgConfig)
+find_package(lz4 REQUIRED)
+set(PKG_EXTERNAL_DEPS "${PKG_EXTERNAL_DEPS} liblz4")
 
 #set the C/C++ include path to the "include" directory
 include_directories(BEFORE ${PROJECT_SOURCE_DIR}/src/cpp)
@@ -164,7 +174,7 @@
 endif()
 
 # install and export variables
-set(config_install_dir "lib/cmake/${PROJECT_NAME}")
+set(config_install_dir "lib${LIB_SUFFIX}/cmake/${PROJECT_NAME}")
 set(generated_dir "${CMAKE_CURRENT_BINARY_DIR}/generated")
 set(version_config "${generated_dir}/flann-config-version.cmake")
 set(project_config "${generated_dir}/flann-config.cmake")
--- flann-1.9.2/cmake/Findlz4.cmake.orig	2025-08-26 16:14:42.041098562 +0100
+++ flann-1.9.2/cmake/Findlz4.cmake	2025-08-26 16:26:40.361983320 +0100
@@ -0,0 +1,132 @@
+# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
+# file Copyright.txt or https://cmake.org/licensing for details.
+
+#[=======================================================================[.rst:
+Findlz4
+-------
+
+Find the lz4 include directory and library.
+
+Use this module by invoking find_package with the form::
+
+.. code-block:: cmake
+
+  find_package(lz4
+    [version]              # Minimum version e.g. 1.8.0
+    [REQUIRED]             # Fail with error if lz4 is not found
+  )
+
+Imported targets
+^^^^^^^^^^^^^^^^
+
+This module defines the following :prop_tgt:`IMPORTED` targets:
+
+.. variable:: lz4::lz4
+
+  Imported target for using the lz4 library, if found.
+
+Result variables
+^^^^^^^^^^^^^^^^
+
+.. variable:: lz4_FOUND
+
+  Set to true if lz4 library found, otherwise false or undefined.
+
+.. variable:: lz4_INCLUDE_DIRS
+
+  Paths to include directories listed in one variable for use by lz4 client.
+
+.. variable:: lz4_LIBRARIES
+
+  Paths to libraries to linked against to use lz4.
+
+.. variable:: lz4_VERSION
+
+  The version string of lz4 found.
+
+Cache variables
+^^^^^^^^^^^^^^^
+
+For users who wish to edit and control the module behavior, this module
+reads hints about search locations from the following variables::
+
+.. variable:: lz4_INCLUDE_DIR
+
+  Path to lz4 include directory with ``lz4.h`` header.
+
+.. variable:: lz4_LIBRARY
+
+  Path to lz4 library to be linked.
+
+NOTE: The variables above should not usually be used in CMakeLists.txt files!
+
+#]=======================================================================]
+
+### Find library ##############################################################
+
+if(NOT lz4_LIBRARY)
+    find_library(lz4_LIBRARY_RELEASE NAMES lz4)
+    find_library(lz4_LIBRARY_DEBUG NAMES lz4d)
+
+    include(SelectLibraryConfigurations)
+    select_library_configurations(lz4)
+else()
+    file(TO_CMAKE_PATH "${lz4_LIBRARY}" lz4_LIBRARY)
+endif()
+
+### Find include directory ####################################################
+find_path(lz4_INCLUDE_DIR NAMES lz4.h)
+
+if(lz4_INCLUDE_DIR AND EXISTS "${lz4_INCLUDE_DIR}/lz4.h")
+    file(STRINGS "${lz4_INCLUDE_DIR}/lz4.h" _lz4_h_contents
+            REGEX "#define lz4_VERSION_[A-Z]+[ ]+[0-9]+")
+    string(REGEX REPLACE "#define lz4_VERSION_MAJOR[ ]+([0-9]+).+" "\\1"
+            lz4_VERSION_MAJOR "${_lz4_h_contents}")
+    string(REGEX REPLACE ".+#define lz4_VERSION_MINOR[ ]+([0-9]+).+" "\\1"
+            lz4_VERSION_MINOR "${_lz4_h_contents}")
+    string(REGEX REPLACE ".+#define lz4_VERSION_RELEASE[ ]+([0-9]+).*" "\\1"
+            lz4_VERSION_RELEASE "${_lz4_h_contents}")
+    set(lz4_VERSION "${lz4_VERSION_MAJOR}.${lz4_VERSION_MINOR}.${lz4_VERSION_RELEASE}")
+    unset(_lz4_h_contents)
+endif()
+
+### Set result variables ######################################################
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(lz4 DEFAULT_MSG
+        lz4_LIBRARY lz4_INCLUDE_DIR lz4_VERSION)
+
+set(lz4_INCLUDE_DIR ${lz4_INCLUDE_DIR} CACHE PATH "lz4 include dir hint")
+set(lz4_LIBRARY ${lz4_LIBRARY} CACHE FILEPATH "lz4 library path hint")
+mark_as_advanced(lz4_INCLUDE_DIR lz4_LIBRARY)
+
+set(lz4_LIBRARIES ${lz4_LIBRARY})
+set(lz4_INCLUDE_DIRS ${lz4_INCLUDE_DIR})
+
+### Import targets ############################################################
+if(lz4_FOUND)
+    if(NOT TARGET lz4::lz4)
+        add_library(lz4::lz4 UNKNOWN IMPORTED)
+        set_target_properties(lz4::lz4 PROPERTIES
+                IMPORTED_LINK_INTERFACE_LANGUAGES "C"
+                INTERFACE_INCLUDE_DIRECTORIES "${lz4_INCLUDE_DIR}")
+
+        if(lz4_LIBRARY_RELEASE)
+            set_property(TARGET lz4::lz4 APPEND PROPERTY
+                    IMPORTED_CONFIGURATIONS RELEASE)
+            set_target_properties(lz4::lz4 PROPERTIES
+                    IMPORTED_LOCATION_RELEASE "${lz4_LIBRARY_RELEASE}")
+        endif()
+
+        if(lz4_LIBRARY_DEBUG)
+            set_property(TARGET lz4::lz4 APPEND PROPERTY
+                    IMPORTED_CONFIGURATIONS DEBUG)
+            set_target_properties(lz4::lz4 PROPERTIES
+                    IMPORTED_LOCATION_DEBUG "${lz4_LIBRARY_DEBUG}")
+        endif()
+
+        if(NOT lz4_LIBRARY_RELEASE AND NOT lz4_LIBRARY_DEBUG)
+            set_property(TARGET lz4::lz4 APPEND PROPERTY
+                    IMPORTED_LOCATION "${lz4_LIBRARY}")
+        endif()
+    endif()
+endif()
--- flann-1.9.2/cmake/Config.cmake.in.orig	2021-04-12 08:15:28.000000000 +0100
+++ flann-1.9.2/cmake/Config.cmake.in	2025-08-26 16:02:59.487187050 +0100
@@ -1,5 +1,11 @@
 @PACKAGE_INIT@
 
+# Get definition of 'find_dependency' macro
+include(CMakeFindDependencyMacro)
+# Find lz4. This will create 'lz4::lz4' target
+find_dependency(lz4)
+@CMAKE_EXTERNAL_DEPS@
+
 include("${CMAKE_CURRENT_LIST_DIR}/@targets_export_name@.cmake")
 check_required_components("flann")
 
--- flann-1.9.2/cmake/flann_utils.cmake.orig	2021-04-12 08:15:28.000000000 +0100
+++ flann-1.9.2/cmake/flann_utils.cmake	2025-08-26 16:04:16.900807410 +0100
@@ -22,21 +22,8 @@
 
 # workaround a FindHDF5 bug
 macro(find_hdf5)
-    find_package(HDF5)
-
-    set( HDF5_IS_PARALLEL FALSE )
-    foreach( _dir ${HDF5_INCLUDE_DIRS} )
-        if( EXISTS "${_dir}/H5pubconf.h" )
-            file( STRINGS "${_dir}/H5pubconf.h" 
-                HDF5_HAVE_PARALLEL_DEFINE
-                REGEX "HAVE_PARALLEL 1" )
-            if( HDF5_HAVE_PARALLEL_DEFINE )
-                set( HDF5_IS_PARALLEL TRUE )
-            endif()
-        endif()
-    endforeach()
-    set( HDF5_IS_PARALLEL ${HDF5_IS_PARALLEL} CACHE BOOL
-        "HDF5 library compiled with parallel IO support" )
+    find_package(hdf5 CONFIG)
+    set(HDF5_IS_PARALLEL ${HDF5_ENABLE_PARALLEL})
     mark_as_advanced( HDF5_IS_PARALLEL )
 endmacro(find_hdf5)
 
--- flann-1.9.2/cmake/UseLATEX.cmake.orig	2025-08-26 17:09:13.789440933 +0100
+++ flann-1.9.2/cmake/UseLATEX.cmake	2025-08-27 09:55:26.533888332 +0100
@@ -751,9 +751,9 @@
     ADD_CUSTOM_TARGET(${html_target}
       ${CMAKE_COMMAND} -E chdir ${output_dir}
       ${LATEX2HTML_CONVERTER} ${LATEX2HTML_CONVERTER_FLAGS} ${LATEX_MAIN_INPUT}
+      DEPENDS ${LATEX_MAIN_INPUT} ${LATEX_INPUTS}
       )
-message("SM: ${html_target} ${LATEX_MAIN_INPUT} ${LATEX_INPUTS}")
-    ADD_DEPENDENCIES(${html_target} ${LATEX_MAIN_INPUT} ${LATEX_INPUTS})
+#    ADD_DEPENDENCIES(${html_target} ${LATEX_MAIN_INPUT} ${LATEX_INPUTS})
   ENDIF (LATEX2HTML_CONVERTER)
 
   ADD_CUSTOM_TARGET(${auxclean_target}
--- flann-1.9.2/src/cpp/CMakeLists.txt.orig	2021-04-12 08:15:28.000000000 +0100
+++ flann-1.9.2/src/cpp/CMakeLists.txt	2025-08-26 16:14:15.347140724 +0100
@@ -8,13 +8,7 @@
 file(GLOB_RECURSE CPP_SOURCES flann_cpp.cpp)
 file(GLOB_RECURSE CU_SOURCES *.cu)
 
-add_library(flann_cpp_s STATIC ${CPP_SOURCES})
-target_link_libraries(flann_cpp_s ${LZ4_LINK_LIBRARIES})
-if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_CLANG)
-    set_target_properties(flann_cpp_s PROPERTIES COMPILE_FLAGS -fPIC)
-endif()
-set_property(TARGET flann_cpp_s PROPERTY COMPILE_DEFINITIONS FLANN_STATIC FLANN_USE_CUDA)
-
+#Set flags if we build CUDA versions
 if (BUILD_CUDA_LIB)
     SET(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS};-DFLANN_USE_CUDA")
     if(CMAKE_COMPILER_IS_GNUCC)
@@ -25,74 +19,95 @@
     else()
 	    set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS};" )
     endif()
-    cuda_add_library(flann_cuda_s STATIC ${CU_SOURCES})
-    set_property(TARGET flann_cuda_s PROPERTY COMPILE_DEFINITIONS FLANN_STATIC)
 endif()
 
-if(CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_COMPILER_IS_GNUCC)
-    add_library(flann_cpp SHARED dummy.c)
-    set_target_properties(flann_cpp PROPERTIES LINKER_LANGUAGE CXX)
-    target_link_libraries(flann_cpp -Wl,-whole-archive flann_cpp_s -Wl,-no-whole-archive)
-
-    if (BUILD_CUDA_LIB)
-	cuda_add_library(flann_cuda SHARED dummy.c)
+if(NOT BUILD_SHARED_LIBS)
+  add_library(flann_cpp_s STATIC ${CPP_SOURCES})
+  target_link_libraries(flann_cpp_s PUBLIC lz4::lz4)
+  set_property(TARGET flann_cpp_s PROPERTY OUTPUT_NAME flann_cpp)
+  if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_CLANG)
+      set_target_properties(flann_cpp_s PROPERTIES COMPILE_FLAGS -fPIC)
+  endif()
+
+  if (BUILD_CUDA_LIB)
+      cuda_add_library(flann_cuda_s STATIC ${CU_SOURCES})
+      target_link_libraries(flann_cuda_s lz4::lz4)
+      set_property(TARGET flann_cuda_s PROPERTY OUTPUT_NAME flann_cuda)
+      set_property(TARGET flann_cpp_s PROPERTY COMPILE_DEFINITIONS FLANN_STATIC FLANN_USE_CUDA)
+  endif()
+endif()
+
+if(BUILD_SHARED_LIBS)
+  if(CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_COMPILER_IS_GNUCC)
+      add_library(flann_cpp SHARED ${CPP_SOURCES})
+      set_target_properties(flann_cpp PROPERTIES LINKER_LANGUAGE CXX)
+      target_link_libraries(flann_cpp PUBLIC lz4::lz4)
+      if (BUILD_CUDA_LIB)
+        cuda_add_library(flann_cuda SHARED ${CU_SOURCES})
         set_target_properties(flann_cuda PROPERTIES LINKER_LANGUAGE CXX)
-        target_link_libraries(flann_cuda -Wl,-whole-archive flann_cuda_s -Wl,-no-whole-archive)
-        set_property(TARGET flann_cpp_s PROPERTY COMPILE_DEFINITIONS FLANN_USE_CUDA)
-    endif()
-else()
-    add_library(flann_cpp SHARED ${CPP_SOURCES})
-    target_link_libraries(flann_cpp ${LZ4_LINK_LIBRARIES})
-    # export lz4 headers, so that MSVC to creates flann_cpp.lib
-    set_target_properties(flann_cpp PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS YES)
-    if (BUILD_CUDA_LIB)
-	cuda_add_library(flann_cuda SHARED ${CU_SOURCES})
         set_property(TARGET flann_cpp PROPERTY COMPILE_DEFINITIONS FLANN_USE_CUDA)
-    endif()
-endif()
-
-set_target_properties(flann_cpp PROPERTIES
-   VERSION ${FLANN_VERSION}
-   SOVERSION ${FLANN_SOVERSION}
-   DEFINE_SYMBOL FLANN_EXPORTS
-)
+       endif()
+  else()
+      add_library(flann_cpp SHARED ${CPP_SOURCES})
+      target_link_libraries(flann_cpp PUBLIC lz4::lz4)
+      # export lz4 headers, so that MSVC to creates flann_cpp.lib
+      set_target_properties(flann_cpp PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS YES)
+      if (BUILD_CUDA_LIB)
+        cuda_add_library(flann_cuda SHARED ${CU_SOURCES})
+        target_link_libraries(flann_cuda lz4::lz4)
+        set_property(TARGET flann_cpp PROPERTY COMPILE_DEFINITIONS FLANN_USE_CUDA)
+      endif()
+  endif()
 
-if (BUILD_CUDA_LIB)
-    set_target_properties(flann_cuda PROPERTIES
-       VERSION ${FLANN_VERSION}
-       SOVERSION ${FLANN_SOVERSION}
-       DEFINE_SYMBOL FLANN_EXPORTS
-    )
+  set_target_properties(flann_cpp PROPERTIES
+     VERSION ${FLANN_VERSION}
+     SOVERSION ${FLANN_SOVERSION}
+     DEFINE_SYMBOL FLANN_EXPORTS
+  )
+
+  if (BUILD_CUDA_LIB)
+      set_target_properties(flann_cuda PROPERTIES
+         VERSION ${FLANN_VERSION}
+         SOVERSION ${FLANN_SOVERSION}
+         DEFINE_SYMBOL FLANN_EXPORTS
+      )
+  endif()
 endif()
 
 
 if (USE_MPI AND HDF5_IS_PARALLEL)
-    add_executable(flann_mpi_server flann/mpi/flann_mpi_server.cpp)
-    target_link_libraries(flann_mpi_server flann_cpp ${HDF5_LIBRARIES} ${MPI_LIBRARIES} ${Boost_LIBRARIES})
-
-    add_executable(flann_mpi_client flann/mpi/flann_mpi_client.cpp)
-    target_link_libraries(flann_mpi_client flann_cpp ${HDF5_LIBRARIES} ${MPI_LIBRARIES} ${Boost_LIBRARIES})
-
-    install (TARGETS flann_mpi_client flann_mpi_server
-        DESTINATION bin)
+  if(BUILD_SHARED_LIBS)
+      add_executable(flann_mpi_server flann/mpi/flann_mpi_server.cpp)
+      target_link_libraries(flann_mpi_server flann_cpp ${HDF5_LIBRARIES} ${MPI_LIBRARIES} ${Boost_LIBRARIES})
+
+      add_executable(flann_mpi_client flann/mpi/flann_mpi_client.cpp)
+      target_link_libraries(flann_mpi_client flann_cpp ${HDF5_LIBRARIES} ${MPI_LIBRARIES} ${Boost_LIBRARIES})
+
+      install (TARGETS flann_mpi_client flann_mpi_server
+          DESTINATION bin)
+  endif()
 endif()
 
 
 if (BUILD_C_BINDINGS)
+  if(NOT BUILD_SHARED_LIBS)
     add_library(flann_s STATIC ${C_SOURCES})
-    target_link_libraries(flann_s ${LZ4_LINK_LIBRARIES})
+    target_link_libraries(flann_s PUBLIC lz4::lz4)
+    set_property(TARGET flann_s PROPERTY OUTPUT_NAME flann)
     if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_CLANG)
         set_target_properties(flann_s PROPERTIES COMPILE_FLAGS -fPIC)
     endif()
     set_property(TARGET flann_s PROPERTY COMPILE_DEFINITIONS FLANN_STATIC)
+  endif()
 
+  if(BUILD_SHARED_LIBS)
     if(CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_COMPILER_IS_GNUCC)
-        add_library(flann SHARED dummy.c)
+        add_library(flann SHARED ${C_SOURCES})
+        target_link_libraries(flann PUBLIC lz4::lz4)
         set_target_properties(flann PROPERTIES LINKER_LANGUAGE CXX)
-        target_link_libraries(flann -Wl,-whole-archive flann_s -Wl,-no-whole-archive)
     else()
         add_library(flann SHARED ${C_SOURCES})
-        target_link_libraries(flann ${LZ4_LINK_LIBRARIES})
+        target_link_libraries(flann PUBLIC lz4::lz4)
 
         if(MINGW AND OPENMP_FOUND)
           target_link_libraries(flann gomp)
@@ -104,20 +119,31 @@
        SOVERSION ${FLANN_SOVERSION}
        DEFINE_SYMBOL FLANN_EXPORTS
     )
+  endif()
 endif()
 
 if(WIN32)
-if (BUILD_C_BINDINGS AND BUILD_MATLAB_BINDINGS)
-    install (
-        TARGETS flann
-        RUNTIME DESTINATION share/flann/matlab
-    )
-endif()
+  if (BUILD_C_BINDINGS AND BUILD_MATLAB_BINDINGS)
+      install (
+          TARGETS flann
+          RUNTIME DESTINATION share/flann/matlab
+      )
+  endif()
 endif(WIN32)
 
+if(NOT BUILD_SHARED_LIBS)
+  list(APPEND FLANN_TARGETS_CPP "flann_cpp_s")
+  list(APPEND FLANN_TARGETS_C "flann_s")
+  list(APPEND FLANN_TARGETS_CUDA "flann_cuda_s")
+endif()
+if(BUILD_SHARED_LIBS)
+  list(APPEND FLANN_TARGETS_CPP "flann_cpp")
+  list(APPEND FLANN_TARGETS_C "flann")
+  list(APPEND FLANN_TARGETS_CUDA "flann_cuda")
+endif()
 
 install (
-    TARGETS flann_cpp flann_cpp_s
+    TARGETS ${FLANN_TARGETS_CPP}
     EXPORT ${targets_export_name}
     INCLUDES DESTINATION include
     RUNTIME DESTINATION bin
@@ -127,7 +153,7 @@
 
 if (BUILD_CUDA_LIB)
     install (
-        TARGETS flann_cuda flann_cuda_s
+        TARGETS ${FLANN_TARGETS_CUDA}
         EXPORT ${targets_export_name}
         INCLUDES DESTINATION include
         RUNTIME DESTINATION bin
@@ -138,7 +164,7 @@
 
 if (BUILD_C_BINDINGS)
     install (
-        TARGETS flann flann_s
+        TARGETS ${FLANN_TARGETS_C}
         EXPORT ${targets_export_name}
         INCLUDES DESTINATION include
         RUNTIME DESTINATION bin
--- flann-1.9.2/src/matlab/CMakeLists.txt.orig	2021-04-12 08:15:28.000000000 +0100
+++ flann-1.9.2/src/matlab/CMakeLists.txt	2025-08-28 12:02:11.854792557 +0100
@@ -16,8 +16,15 @@
 
 find_program(OCT_CMD mkoctfile)
 
-get_property(FLANN_LIB_LOCATION TARGET flann_s PROPERTY LOCATION)
-get_filename_component(FLANN_LIB_PATH ${FLANN_LIB_LOCATION} PATH)
+if(NOT BUILD_SHARED_LIBS)
+get_filename_component(FLANN_LIB_PATH flann_s PATH)
+else()
+get_filename_component(FLANN_LIB_PATH flann PATH)
+endif()
+
+include(print_target_properties.cmake)
+
+print_target_properties(flann)
 
 if(MEX_CMD AND MEXEXT_CMD)
 
@@ -33,7 +40,7 @@
         EXECUTE_PROCESS(COMMAND ${MEXEXT_REAL_CMD} OUTPUT_VARIABLE MEX_EXTENSION OUTPUT_STRIP_TRAILING_WHITESPACE)
         SET(MEX_FILE ${CMAKE_CURRENT_BINARY_DIR}/${MEX_NAME}.${MEX_EXTENSION})
 
-		
+
         if (WIN32)
 			if (MSVC_IDE)
 				set(MEX_BUILD_FLAGS "COMPFLAGS=\"$COMPFLAGS ${OpenMP_CXX_FLAGS}\" LINKFLAGS=\"$LINKFLAGS ${OpenMP_CXX_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}\"")
@@ -43,15 +50,25 @@
         else()
             set(MEX_BUILD_FLAGS "CFLAGS='$$CFLAGS ${OpenMP_CXX_FLAGS}' LDFLAGS='$$LDFLAGS ${OpenMP_CXX_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}'")
         endif()
-        separate_arguments(MEX_BUILD_FLAGS)   
+        separate_arguments(MEX_BUILD_FLAGS)
 
-        ADD_CUSTOM_COMMAND(
-            OUTPUT ${MEX_FILE}
-            COMMAND ${MEX_REAL_CMD}
-            ARGS ${CMAKE_CURRENT_SOURCE_DIR}/${MEX_NAME}.cpp -I${PROJECT_SOURCE_DIR}/src/cpp -L${FLANN_LIB_PATH} -lflann_s ${MEX_BUILD_FLAGS}
-            DEPENDS flann_s ${CMAKE_CURRENT_SOURCE_DIR}/${MEX_NAME}.cpp
-            COMMENT "Building MEX extension ${MEX_FILE}"
-        )
+        if(NOT BUILD_SHARED_LIBS)
+            ADD_CUSTOM_COMMAND(
+                OUTPUT ${MEX_FILE}
+                COMMAND ${MEX_REAL_CMD}
+                ARGS ${CMAKE_CURRENT_SOURCE_DIR}/${MEX_NAME}.cpp -I${PROJECT_SOURCE_DIR}/src/cpp -L${FLANN_LIB_PATH} -lflann_s ${MEX_BUILD_FLAGS}
+                DEPENDS flann_s ${CMAKE_CURRENT_SOURCE_DIR}/${MEX_NAME}.cpp
+                COMMENT "Building MEX extension ${MEX_FILE}"
+            )
+        else()
+            ADD_CUSTOM_COMMAND(
+                OUTPUT ${MEX_FILE}
+                COMMAND ${MEX_REAL_CMD}
+                ARGS ${CMAKE_CURRENT_SOURCE_DIR}/${MEX_NAME}.cpp -I${PROJECT_SOURCE_DIR}/src/cpp -L${FLANN_LIB_PATH} -lflann ${MEX_BUILD_FLAGS}
+                DEPENDS flann ${CMAKE_CURRENT_SOURCE_DIR}/${MEX_NAME}.cpp
+                COMMENT "Building MEX extension ${MEX_FILE}"
+            )
+        endif()
 
         ADD_CUSTOM_TARGET(mex_${MEX_NAME} ALL DEPENDS ${MEX_FILE})
 
@@ -63,10 +80,11 @@
         )
     else()
         message(WARNING "The 'mex' and 'mexext' programs have been found in different locations. It's likely that one of them is not part of the MATLAB instalation. Make sure that the 'bin' directory from the MATLAB instalation is in PATH")
-        set(BUILD_MATLAB_BINDINGS OFF) 
+        set(BUILD_MATLAB_BINDINGS OFF)
     endif()
 elseif(OCT_CMD)
   SET(MEX_FILE ${CMAKE_CURRENT_BINARY_DIR}/${MEX_NAME}.mex)
+  if(NOT BUILD_SHARED_LIBS)
   ADD_CUSTOM_COMMAND(
     OUTPUT ${MEX_FILE}
     COMMAND ${OCT_CMD}
@@ -74,6 +92,15 @@
     DEPENDS flann_s ${CMAKE_CURRENT_SOURCE_DIR}/${MEX_NAME}.cpp
     COMMENT "Building MEX extension ${MEX_FILE}"
     )
+  else()
+  ADD_CUSTOM_COMMAND(
+    OUTPUT ${MEX_FILE}
+    COMMAND ${OCT_CMD}
+    ARGS ${CMAKE_CURRENT_SOURCE_DIR}/${MEX_NAME}.cpp -I${PROJECT_SOURCE_DIR}/src/cpp -L$<TARGET_FILE_DIR:flann> -lflann -lgomp --mex -v
+    DEPENDS flann ${CMAKE_CURRENT_SOURCE_DIR}/${MEX_NAME}.cpp
+    COMMENT "Building MEX extension ${MEX_FILE}"
+    )
+  endif()
 
   ADD_CUSTOM_TARGET(mex_${MEX_NAME} ALL DEPENDS ${MEX_FILE})
 
@@ -85,6 +112,6 @@
     )
 else()
     message(WARNING "Cannot find MATLAB or Octave instalation. Make sure that the 'bin' directory from the MATLAB instalation or that mkoctfile is in PATH")
-    set(BUILD_MATLAB_BINDINGS OFF) 
+    set(BUILD_MATLAB_BINDINGS OFF)
 endif()
 
