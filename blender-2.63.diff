--- blender-2.63/intern/audaspace/ffmpeg/AUD_FFMPEGReader.cpp.orig	2012-04-26 21:42:33.000000000 +0100
+++ blender-2.63/intern/audaspace/ffmpeg/AUD_FFMPEGReader.cpp	2012-04-28 07:49:26.000000000 +0100
@@ -143,23 +143,23 @@
 
 	switch(m_codecCtx->sample_fmt)
 	{
-	case SAMPLE_FMT_U8:
+	case AV_SAMPLE_FMT_U8:
 		m_convert = AUD_convert_u8_float;
 		m_specs.format = AUD_FORMAT_U8;
 		break;
-	case SAMPLE_FMT_S16:
+	case AV_SAMPLE_FMT_S16:
 		m_convert = AUD_convert_s16_float;
 		m_specs.format = AUD_FORMAT_S16;
 		break;
-	case SAMPLE_FMT_S32:
+	case AV_SAMPLE_FMT_S32:
 		m_convert = AUD_convert_s32_float;
 		m_specs.format = AUD_FORMAT_S32;
 		break;
-	case SAMPLE_FMT_FLT:
+	case AV_SAMPLE_FMT_FLT:
 		m_convert = AUD_convert_copy<float>;
 		m_specs.format = AUD_FORMAT_FLOAT32;
 		break;
-	case SAMPLE_FMT_DBL:
+	case AV_SAMPLE_FMT_DBL:
 		m_convert = AUD_convert_double_float;
 		m_specs.format = AUD_FORMAT_FLOAT64;
 		break;
@@ -227,7 +227,7 @@
 	}
 	catch(AUD_Exception&)
 	{
-		av_close_input_stream(m_formatCtx);
+		av_close_input_file(m_formatCtx);
 		av_free(m_aviocontext);
 		throw;
 	}
@@ -239,7 +239,7 @@
 
 	if(m_aviocontext)
 	{
-		av_close_input_stream(m_formatCtx);
+		av_close_input_file(m_formatCtx);
 		av_free(m_aviocontext);
 	}
 	else
--- blender-2.63/intern/audaspace/ffmpeg/AUD_FFMPEGWriter.cpp.orig	2012-04-26 21:42:33.000000000 +0100
+++ blender-2.63/intern/audaspace/ffmpeg/AUD_FFMPEGWriter.cpp	2012-04-28 07:50:54.000000000 +0100
@@ -133,23 +133,23 @@
 		{
 		case AUD_FORMAT_U8:
 			m_convert = AUD_convert_float_u8;
-			m_codecCtx->sample_fmt = SAMPLE_FMT_U8;
+			m_codecCtx->sample_fmt = AV_SAMPLE_FMT_U8;
 			break;
 		case AUD_FORMAT_S16:
 			m_convert = AUD_convert_float_s16;
-			m_codecCtx->sample_fmt = SAMPLE_FMT_S16;
+			m_codecCtx->sample_fmt = AV_SAMPLE_FMT_S16;
 			break;
 		case AUD_FORMAT_S32:
 			m_convert = AUD_convert_float_s32;
-			m_codecCtx->sample_fmt = SAMPLE_FMT_S32;
+			m_codecCtx->sample_fmt = AV_SAMPLE_FMT_S32;
 			break;
 		case AUD_FORMAT_FLOAT32:
 			m_convert = AUD_convert_copy<float>;
-			m_codecCtx->sample_fmt = SAMPLE_FMT_FLT;
+			m_codecCtx->sample_fmt = AV_SAMPLE_FMT_FLT;
 			break;
 		case AUD_FORMAT_FLOAT64:
 			m_convert = AUD_convert_float_double;
-			m_codecCtx->sample_fmt = SAMPLE_FMT_DBL;
+			m_codecCtx->sample_fmt = AV_SAMPLE_FMT_DBL;
 			break;
 		default:
 			AUD_THROW(AUD_ERROR_FFMPEG, format_error);
--- blender-2.63/source/blender/blenkernel/intern/writeffmpeg.c.orig	2012-04-26 21:49:26.000000000 +0100
+++ blender-2.63/source/blender/blenkernel/intern/writeffmpeg.c	2012-04-27 22:57:51.000000000 +0100
@@ -612,7 +612,7 @@
 
 	c->sample_rate = rd->ffcodecdata.audio_mixrate;
 	c->bit_rate = ffmpeg_audio_bitrate*1000;
-	c->sample_fmt = SAMPLE_FMT_S16;
+	c->sample_fmt = AV_SAMPLE_FMT_S16;
 	c->channels = rd->ffcodecdata.audio_channels;
 	codec = avcodec_find_encoder(c->codec_id);
 	if (!codec) {
@@ -704,13 +704,13 @@
 	of->oformat = fmt;
 	of->packet_size= rd->ffcodecdata.mux_packet_size;
 	if (ffmpeg_audio_codec != CODEC_ID_NONE) {
-		of->mux_rate = rd->ffcodecdata.mux_rate;
+//		of->mux_rate = rd->ffcodecdata.mux_rate;
 	}
 	else {
-		of->mux_rate = 0;
+//		of->mux_rate = 0;
 	}
 
-	of->preload = (int)(0.5*AV_TIME_BASE);
+//	of->preload = (int)(0.5*AV_TIME_BASE);
 	of->max_delay = (int)(0.7*AV_TIME_BASE);
 
 	fmt->audio_codec = ffmpeg_audio_codec;
@@ -793,10 +793,10 @@
 			return 0;
 		}
 	}
-	if (av_set_parameters(of, NULL) < 0) {
-		BKE_report(reports, RPT_ERROR, "Error setting output parameters.");
-		return 0;
-	}
+//	if (av_set_parameters(of, NULL) < 0) {
+//		BKE_report(reports, RPT_ERROR, "Error setting output parameters.");
+//		return 0;
+//	}
 	if (!(fmt->flags & AVFMT_NOFILE)) {
 		if (avio_open(&of->pb, name, AVIO_FLAG_WRITE) < 0) {
 			BKE_report(reports, RPT_ERROR, "Could not open file for writing.");
@@ -804,7 +804,7 @@
 		}
 	}
 
-	if (av_write_header(of) < 0) {
+	if (avformat_write_header(of, NULL) < 0) {
 		BKE_report(reports, RPT_ERROR, "Could not initialize streams. Probably unsupported codec combination.");
 		return 0;
 	}
--- blender-2.63/source/blender/imbuf/intern/anim_movie.c.orig	2012-04-26 21:51:04.000000000 +0100
+++ blender-2.63/source/blender/imbuf/intern/anim_movie.c	2012-04-28 07:14:50.000000000 +0100
@@ -455,7 +455,7 @@
 
 	do_init_ffmpeg();
 
-	if (av_open_input_file(&pFormatCtx, anim->name, NULL, 0, NULL)!=0) {
+	if (avformat_open_input(&pFormatCtx, anim->name, NULL, NULL)!=0) {
 		return -1;
 	}
 
@@ -990,7 +990,7 @@
 				ret = av_seek_frame(anim->pFormatCtx, 
 						    -1,
 						    pos, AVSEEK_FLAG_BYTE);
-				av_update_cur_dts(anim->pFormatCtx, v_st, dts);
+				//av_update_cur_dts(anim->pFormatCtx, v_st, dts);
 			}
 			else {
 				av_log(anim->pFormatCtx, AV_LOG_DEBUG, 
--- blender-2.63/source/blender/imbuf/intern/indexer.c.orig	2012-04-26 21:51:04.000000000 +0100
+++ blender-2.63/source/blender/imbuf/intern/indexer.c	2012-04-28 07:20:40.000000000 +0100
@@ -533,12 +533,12 @@
 		rv->c->flags |= CODEC_FLAG_GLOBAL_HEADER;
 	}
 
-	if (av_set_parameters(rv->of, NULL) < 0) {
-		fprintf(stderr, "Couldn't set output parameters? "
-			"Proxy not built!\n");
-		av_free(rv->of);
-		return 0;
-	}
+//	if (av_set_parameters(rv->of, NULL) < 0) {
+//		fprintf(stderr, "Couldn't set output parameters? "
+//			"Proxy not built!\n");
+//		av_free(rv->of);
+//		return 0;
+//	}
 
 	if (avio_open(&rv->of->pb, fname, AVIO_FLAG_WRITE) < 0) {
 		fprintf(stderr, "Couldn't open outputfile! "
@@ -576,7 +576,7 @@
 			NULL, NULL, NULL);
 	}
 
-	av_write_header(rv->of);
+	avformat_write_header(rv->of, NULL);
 
 	return rv;
 }
@@ -739,7 +739,7 @@
 	memset(context->proxy_ctx, 0, sizeof(context->proxy_ctx));
 	memset(context->indexer, 0, sizeof(context->indexer));
 
-	if (av_open_input_file(&context->iFormatCtx, anim->name, NULL, 0, NULL) != 0) {
+	if (avformat_open_input(&context->iFormatCtx, anim->name, NULL, NULL) != 0) {
 		MEM_freeN(context);
 		return NULL;
 	}
--- blender-2.63/source/blender/imbuf/intern/util.c.orig	2012-04-26 21:51:04.000000000 +0100
+++ blender-2.63/source/blender/imbuf/intern/util.c	2012-04-28 07:21:33.000000000 +0100
@@ -260,7 +260,7 @@
 		BLI_testextensie(filename, ".cin") ||
 		BLI_testextensie(filename, ".wav")) return 0;
 
-	if (av_open_input_file(&pFormatCtx, filename, NULL, 0, NULL)!=0) {
+	if (avformat_open_input(&pFormatCtx, filename, NULL, NULL)!=0) {
 		if (UTIL_DEBUG) fprintf(stderr, "isffmpeg: av_open_input_file failed\n");
 		return 0;
 	}
--- blender-2.63/source/gameengine/VideoTexture/VideoFFmpeg.cpp.orig	2012-04-26 21:47:06.000000000 +0100
+++ blender-2.63/source/gameengine/VideoTexture/VideoFFmpeg.cpp	2012-04-28 07:39:06.000000000 +0100
@@ -162,14 +162,14 @@
 }
 
 
-int VideoFFmpeg::openStream(const char *filename, AVInputFormat *inputFormat, AVFormatParameters *formatParams)
+int VideoFFmpeg::openStream(const char *filename, AVInputFormat *inputFormat, void /*AVFormatParameters*/ *formatParams)
 {
 	AVFormatContext *formatCtx;
 	int				i, videoStream;
 	AVCodec			*codec;
 	AVCodecContext	*codecCtx;
 
-	if (av_open_input_file(&formatCtx, filename, inputFormat, 0, formatParams)!=0)
+	if (avformat_open_input(&formatCtx, filename, inputFormat, NULL /*formatParams*/)!=0)
 		return -1;
 
 	if (av_find_stream_info(formatCtx)<0) 
@@ -546,7 +546,7 @@
 		// It would be good to find this information from the context but there are no simple indication
 		!strncmp(filename, "http://", 7) ||
 #ifdef FFMPEG_PB_IS_POINTER
-		(m_formatCtx->pb && m_formatCtx->pb->is_streamed)
+		(m_formatCtx->pb && !m_formatCtx->pb->seekable)
 #else
 		m_formatCtx->pb.is_streamed
 #endif
@@ -586,13 +586,13 @@
 {
 	// open camera source
 	AVInputFormat		*inputFormat;
-	AVFormatParameters	formatParams;
+//	AVFormatParameters	formatParams;
 	AVRational			frameRate;
 	char				*p, filename[28], rateStr[20];
 
 	do_init_ffmpeg();
 
-	memset(&formatParams, 0, sizeof(formatParams));
+//	memset(&formatParams, 0, sizeof(formatParams));
 #ifdef WIN32
 	// video capture on windows only through Video For Windows driver
 	inputFormat = av_find_input_format("vfwcap");
@@ -636,8 +636,8 @@
 		if ((p = strchr(filename, ':')) != 0)
 			*p = 0;
 	}
-	if (file && (p = strchr(file, ':')) != NULL)
-		formatParams.standard = p+1;
+//	if (file && (p = strchr(file, ':')) != NULL)
+//		formatParams.standard = p+1;
 #endif
 	//frame rate
 	if (m_captRate <= 0.f)
@@ -646,12 +646,12 @@
 	av_parse_video_rate(&frameRate, rateStr);
 	// populate format parameters
 	// need to specify the time base = inverse of rate
-	formatParams.time_base.num = frameRate.den;
-	formatParams.time_base.den = frameRate.num;
-	formatParams.width = m_captWidth;
-	formatParams.height = m_captHeight;
+//	formatParams.time_base.num = frameRate.den;
+//	formatParams.time_base.den = frameRate.num;
+//	formatParams.width = m_captWidth;
+//	formatParams.height = m_captHeight;
 
-	if (openStream(filename, inputFormat, &formatParams) != 0)
+	if (openStream(filename, inputFormat, NULL /*&formatParams*/) != 0)
 		return;
 
 	// for video capture it is important to do non blocking read
--- blender-2.63/source/gameengine/VideoTexture/VideoFFmpeg.h.orig	2012-04-26 21:47:06.000000000 +0100
+++ blender-2.63/source/gameengine/VideoTexture/VideoFFmpeg.h	2012-04-28 07:40:56.000000000 +0100
@@ -172,7 +172,7 @@
 	double actFrameRate (void) { return m_frameRate * m_baseFrameRate; }
 
 	/// common function to video file and capture
-	int openStream(const char *filename, AVInputFormat *inputFormat, AVFormatParameters *formatParams);
+	int openStream(const char *filename, AVInputFormat *inputFormat, void /*AVFormatParameters*/ *formatParams);
 
 	/// check if a frame is available and load it in pFrame, return true if a frame could be retrieved
 	AVFrame* grabFrame(long frame);
