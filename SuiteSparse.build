#!/bin/bash
#
. build_funcs

TARNAME=SuiteSparse
TARNAMEEXTRA=
TARDIR=~/tmp/new/s/SuiteSparse
#TAR_EXT=.tar.gz
VERSION=3.6.0
VERSIONEXTRA=
BUILD=1

#TAR_PROG=
#TAR_OPTS=
#PKGNAME=
#PKGVERSION=
#BUILD_SUFFIX=
#ARCH=noarch


FULL_TARNAME=${TARDIR}/${TARNAME}${TARNAMEEXTRA}-${VERSION}${VERSIONEXTRA}${TAR_EXT}

pre_unpack

PKG=/tmp/package-${PKGNAME}

if [ ! -f ${FULL_TARNAME} ]
then
  echo Can\'t find ${FULL_TARNAME}
  exit
fi

if [ ! -d ${TARNAME}-${VERSION} ]
then 
${TAR_PROG} ${TAR_OPTS} ${FULL_TARNAME}
mv ${TARNAME} ${TARNAME}-${VERSION}

if [ ! -d ${TARNAME}-${VERSION} ]
then 
  echo "${TARNAME}-${VERSION} directory not found"
  exit
fi

(cd ${TARNAME}-${VERSION}
 #patch -p1 < ${CWD}/
 tar xf ~/tmp/new/m/metis-4.0.tar.gz

 sed -i 's/^BLAS.*/BLAS = -lsatlas/; s/^LAPACK.*/LAPACK = -lsatlas/' UFconfig/UFconfig.mk
)
fi

pre_configure

cd ${TARNAME}-${VERSION}

fix_perms

if [ ${DO_CONFIGURE} == "yes" ]
then
  true
fi

if [ ${DO_MAKE} == "yes" ]
then
pushd metis-4.0
# make ${NUM_JOBS} CC=gcc OPTFLAGS="-O3" COPTIONS="-fexceptions -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE -fPIC" || exit
popd

#make ${NUM_JOBS} CC=gcc CFLAGS='-O3 -fexceptions -fPIC -I../Include' || exit
# gcc -shared -Wl,-soname,libamd.so.2 -o ../Lib/libamd.so.2.0.3 `ls *.o` -lm

AMD_version=2.2.2
BTF_version=1.1.2
CAMD_version=2.2.2
CCOLAMD_version=2.7.3
CHOLMOD_version=1.7.3
COLAMD_version=2.7.3
CSparse_version=2.2.5
CXSparse_version=2.2.5
KLU_version=1.1.2
LDL_version=2.0.3
UMFPACK_version=5.5.1
RBio_version=2.0.1
SPQR_version=1.2.1

(cd AMD/Lib && pwd &&
 gcc -shared -Wl,-soname,libamd.so.${AMD_version%.*.*} -o libamd.so.${AMD_version} -lm `ls *.o` &&
 ln -sf libamd.so.${AMD_version} libamd.so.${AMD_version%.*.*} &&
 ln -sf libamd.so.${AMD_version} libamd.so)
(cd CAMD/Lib && pwd &&
 gcc -shared -Wl,-soname,libcamd.so.${CAMD_version%.*.*} -o libcamd.so.${CAMD_version} -lm `ls *.o` &&
 ln -sf libcamd.so.${CAMD_version} libcamd.so.${CAMD_version%.*.*} &&
 ln -sf libcamd.so.${CAMD_version} libcamd.so)
(cd CCOLAMD/Lib && pwd &&
 gcc -shared -Wl,-soname,libccolamd.so.${CCOLAMD_version%.*.*} -o libccolamd.so.${CCOLAMD_version} -lm `ls *.o` &&
 ln -sf libccolamd.so.${CCOLAMD_version} libccolamd.so.${CCOLAMD_version%.*.*} &&
 ln -sf libccolamd.so.${CCOLAMD_version} libccolamd.so)
(cd COLAMD/Lib && pwd &&
 gcc -shared -Wl,-soname,libcolamd.so.${COLAMD_version%.*.*} -o libcolamd.so.${COLAMD_version} -lm `ls *.o` &&
 ln -sf libcolamd.so.${COLAMD_version} libcolamd.so.${COLAMD_version%.*.*} &&
 ln -sf libcolamd.so.${COLAMD_version} libcolamd.so)
(cd BTF/Lib && pwd &&
 gcc -shared -Wl,-soname,libbtf.so.${BTF_version%.*.*} -o libbtf.so.${BTF_version} `ls *.o` &&
 ln -sf libbtf.so.${BTF_version} libbtf.so.${BTF_version%.*.*} &&
 ln -sf libbtf.so.${BTF_version} libbtf.so)
(cd KLU/Lib && pwd &&
 gcc -shared -Wl,-soname,libklu.so.${KLU_version%.*.*} -o libklu.so.${KLU_version} -L../../BTF/Lib -lbtf -L../../COLAMD/Lib -lcolamd -L../../AMD/Lib -lamd  `ls *.o` &&
 ln -sf libklu.so.${KLU_version} libklu.so.${KLU_version%.*.*} &&
 ln -sf libklu.so.${KLU_version} libklu.so)
(cd LDL/Lib/ && pwd &&
 gcc -shared -Wl,-soname,libldl.so.${LDL_version%.*.*} -o libldl.so.${LDL_version} `ls *.o` &&
 ln -sf libldl.so.${LDL_version} libldl.so.${LDL_version%.*.*} &&
 ln -sf libldl.so.${LDL_version} libldl.so)
(cd CSparse/Lib/ && pwd &&
 gcc -shared -Wl,-soname,libcsparse.so.${CSparse_version%.*.*} -o libcsparse.so.${CSparse_version} -lm `ls *.o` &&
 ln -sf libcsparse.so.${CSparse_version} libcsparse.so.${CSparse_version%.*.*} &&
 ln -sf libcsparse.so.${CSparse_version} libcsparse.so)
(cd CXSparse/Lib/ && pwd &&
 gcc -shared -Wl,-soname,libcxsparse.so.${CXSparse_version%.*.*} -o libcxsparse.so.${CXSparse_version} -lm `ls *.o` &&
 ln -sf libcxsparse.so.${CXSparse_version} libcxsparse.so.${CXSparse_version%.*.*} &&
 ln -sf libcxsparse.so.${CXSparse_version} libcxsparse.so)
(cd CHOLMOD/Lib && pwd &&
 gcc -shared -Wl,-soname,libcholmod.so.${CHOLMOD_version%.*.*} -o libcholmod.so.${CHOLMOD_version} -lm -L../../AMD/Lib -lamd -L../../CAMD/Lib -lcamd -L../../COLAMD/Lib -lcolamd -L../../CCOLAMD/Lib -lccolamd -lmetis -lsatlas `ls *.o` &&
 ln -sf libcholmod.so.${CHOLMOD_version} libcholmod.so.${CHOLMOD_version%.*.*} &&
 ln -sf libcholmod.so.${CHOLMOD_version} libcholmod.so)
(cd UMFPACK/Lib && pwd &&
 gcc -shared -Wl,-soname,libumfpack.so.${UMFPACK_version%.*.*} -o libumfpack.so.${UMFPACK_version} -L../../AMD/Lib -lamd -L../../CHOLMOD/Lib -lcholmod -lsatlas `ls *.o` &&
 ln -sf libumfpack.so.${UMFPACK_version} libumfpack.so.${UMFPACK_version%.*.*} &&
 ln -sf libumfpack.so.${UMFPACK_version} libumfpack.so)
(cd SPQR/Lib && pwd &&
 gcc -shared -Wl,-soname,libspqr.so.${SPQR_version%.*.*} -o libspqr.so.${SPQR_version} -lm -L../../CHOLMOD/Lib -lcholmod -lsatlas `ls *.o` -lstdc++ &&
 ln -sf libspqr.so.${SPQR_version} libspqr.so.${SPQR_version%.*.*} &&
 ln -sf libspqr.so.${SPQR_version} libspqr.so)
(cd RBio/Lib && pwd &&
 gcc -shared -Wl,-soname,librbio.so.${RBio_version%.*.*} -o librbio.so.${RBio_version} -lm `ls *.o` ../../UFconfig/libufconfig.a &&
 ln -sf librbio.so.${RBio_version} librbio.so.${RBio_version%.*.*} &&
 ln -sf librbio.so.${RBio_version} librbio.so)

#(cd CHOLMOD/LibMetis && $(MAKE) CHOLMOD_CONFIG="-I/usr/include/metis -I/usr/include/mpi")
#(cd CHOLMOD/LibMetis && gcc -shared -Wl,-soname,libcholmod.so.${version%.*.*} -o ../LibMetis/libcholmod.so.${version
#(cd CHOLMOD/LibMetis && ln -sf libcholmod.so.${version} libcholmod.so.${version%.*.*})
#(cd CHOLMOD/LibMetis && ln -sf libcholmod.so.${version} libcholmod.so)

( cd CHOLMOD/Doc && cp UserGuide.pdf  CHOLMOD_UserGuide.pdf && cp UserGuide.bib  CHOLMOD_UserGuide.bib )
( cd UMFPACK/Doc && cp UserGuide.pdf  UMFPACK_UserGuide.pdf && cp UserGuide.bib  UMFPACK_UserGuide.bib )
( cd UMFPACK/Doc && cp QuickStart.pdf  UMFPACK_QuickStart.pdf )

fi

if [ ${DO_INSTALL} != "yes" ]
then
  exit
fi

#make install DESTDIR=${PKG}

mkdir -p ${PKG}/usr/{include/suitesparse/CSparse,lib}

cp -d {AMD,CAMD,CCOLAMD,COLAMD,BTF,KLU,LDL,CSparse,CXSparse,UMFPACK,CHOLMOD,SPQR,RBio}/Lib/lib* ${PKG}/usr/lib
rm ${PKG}/usr/lib/{*.a,*.def}

cp {AMD,CAMD,CCOLAMD,COLAMD,BTF,KLU,LDL,CXSparse,UMFPACK,CHOLMOD,SPQR,RBio}/Include/*.h ${PKG}/usr/include/suitesparse
cp CSparse/Include/*.h ${PKG}/usr/include/suitesparse/CSparse
cp UFconfig/*.h ${PKG}/usr/include/suitesparse

#strip_binaries

fix_links

compress_manpages

compress_info

cp -a \
  AUTHORS COPYING* INSTALL NEWS PLANS README* TODO \
  ${PKG}/usr/doc/${TARNAME}-${VERSION}

mkdir -p ${PKG}/usr/doc/${TARNAME}-${VERSION}/{AMD,BTF,CAMD,CCOLAMD,CHOLMOD,COLAMD,CSparse,CXSparse,KLU,LDL,UMFPACK,SPQR,RBio}
cp AMD/Doc/{*pdf,License,lesser.txt} ${PKG}/usr/doc/${TARNAME}-${VERSION}/AMD
cp BTF/Doc/{*pdf,License,lesser.txt} ${PKG}/usr/doc/${TARNAME}-${VERSION}/BTF
cp CAMD/Doc/{*pdf,License,lesser.txt} ${PKG}/usr/doc/${TARNAME}-${VERSION}/CAMD
cp CCOLAMD/Doc/{*pdf,License,lesser.txt} ${PKG}/usr/doc/${TARNAME}-${VERSION}/CCOLAMD
cp CHOLMOD/Doc/{*pdf,License,lesser.txt} ${PKG}/usr/doc/${TARNAME}-${VERSION}/CHOLMOD
cp COLAMD/Doc/{*pdf,License,lesser.txt} ${PKG}/usr/doc/${TARNAME}-${VERSION}/COLAMD
cp CSparse/Doc/{*pdf,License,lesser.txt} ${PKG}/usr/doc/${TARNAME}-${VERSION}/CSparse
cp CXSparse/Doc/{*pdf,License,lesser.txt} ${PKG}/usr/doc/${TARNAME}-${VERSION}/CXSparse
cp KLU/Doc/{*pdf,License,lesser.txt} ${PKG}/usr/doc/${TARNAME}-${VERSION}/KLU
cp LDL/Doc/{*pdf,License,lesser.txt} ${PKG}/usr/doc/${TARNAME}-${VERSION}/LDL
cp UMFPACK/Doc/{*pdf,License,lesser.txt} ${PKG}/usr/doc/${TARNAME}-${VERSION}/UMFPACK
cp SPQR/Doc/{*pdf,License,lesser.txt} ${PKG}/usr/doc/${TARNAME}-${VERSION}/SPQR
cp RBio/Doc/{*pdf,License,lesser.txt} ${PKG}/usr/doc/${TARNAME}-${VERSION}/RBio


fix_docs

#-----handy-ruler-for-slack-desc-width-------------------------------|
make_slack_desc << EOF ""
Suitesparse is a collection of libraries for computations involving
sparse matrices.  The package includes the following libraries:
 AMD       approximate minimum degree ordering
 BTF       permutation to block triangular form (beta)
 COLAMD    column approximate minimum degree ordering
 CCOLAMD   constrained column approximate minimum degree ordering
 CHOLMOD   sparse Cholesky factorization
 CSparse   a concise sparse matrix package
 CXSparse  CSparse extended: complex matrix, int and long int support
 KLU       sparse LU factorization, primarily for circuit simulation
 LDL       a simple LDL' factorization
 UMFPACK   sparse LU factorization
 UFconfig  configuration file for all the above packages.

EOF

post_install

cd ${PKG}
su -c "chown -R root.root ${PKG}; \
find . -type d -exec chmod 755 {} \; ; \
makepkg -l y -c n ${PKGDIR}${PKGNAME}-${PKGVERSION}-${ARCH}-${BUILD}${BUILD_SUFFIX}.tgz; \
chown -R ${USERNAME}.${GROUP} ${PKG}"
