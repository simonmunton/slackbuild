--- QtAV-1.12.0/CMakeLists.txt.orig	2017-06-24 16:56:26.854266773 +0100
+++ QtAV-1.12.0/CMakeLists.txt	2017-06-24 18:09:18.112512466 +0100
@@ -67,10 +67,10 @@
 # Instruct CMake to run moc automatically when needed.
 set(CMAKE_AUTOMOC ON)
 if(NOT CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
-  set(QTAV_INSTALL_HEADERS ${CMAKE_INSTALL_PREFIX}/include)
-  set(QTAV_INSTALL_LIBS ${CMAKE_INSTALL_PREFIX}/lib)
-  set(QTAV_INSTALL_BINS ${CMAKE_INSTALL_PREFIX}/bin)
-  set(QTAV_INSTALL_QML ${CMAKE_INSTALL_PREFIX}/qml)
+  set(QTAV_INSTALL_HEADERS ${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX}/qt5/include)
+  set(QTAV_INSTALL_LIBS ${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX}/qt5/lib)
+  set(QTAV_INSTALL_BINS ${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX}/qt5/bin)
+  set(QTAV_INSTALL_QML ${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX}/qt5/qml)
 else()
   set(CMAKE_INSTALL_PREFIX ${QT_INSTALL_PREFIX} CACHE PATH "default install path" FORCE)
   set(QTAV_INSTALL_HEADERS ${QT_INSTALL_HEADERS})
--- QtAV-1.12.0/src/codec/video/VideoEncoderFFmpeg.cpp.orig	2017-06-21 02:47:15.000000000 +0100
+++ QtAV-1.12.0/src/codec/video/VideoEncoderFFmpeg.cpp	2018-04-25 19:44:56.398700872 +0100
@@ -245,7 +245,7 @@
     applyOptionsForContext();
     AV_ENSURE_OK(avcodec_open2(avctx, codec, &dict), false);
     // from mpv ao_lavc
-    const int buffer_size = qMax<int>(qMax<int>(width*height*6+200, FF_MIN_BUFFER_SIZE), sizeof(AVPicture));//??
+    const int buffer_size = qMax<int>(qMax<int>(width*height*6+200, AV_INPUT_BUFFER_MIN_SIZE), sizeof(AVPicture));//??
     buffer.resize(buffer_size);
     return true;
 }
--- QtAV-1.12.0/src/codec/audio/AudioEncoderFFmpeg.cpp.orig	2017-06-21 02:47:15.000000000 +0100
+++ QtAV-1.12.0/src/codec/audio/AudioEncoderFFmpeg.cpp	2018-04-25 19:33:08.450734650 +0100
@@ -153,8 +153,8 @@
     } else {
         buffer_size = frame_size*format_used.bytesPerSample()*format_used.channels()*2+200;
     }
-    if (buffer_size < FF_MIN_BUFFER_SIZE)
-        buffer_size = FF_MIN_BUFFER_SIZE;
+    if (buffer_size < AV_INPUT_BUFFER_MIN_SIZE)
+        buffer_size = AV_INPUT_BUFFER_MIN_SIZE;
     buffer.resize(buffer_size);
     return true;
 }
--- QtAV-1.12.0/src/AVMuxer.cpp.orig	2017-06-21 02:47:15.000000000 +0100
+++ QtAV-1.12.0/src/AVMuxer.cpp	2018-04-25 19:34:24.595731017 +0100
@@ -122,7 +122,7 @@
     c->time_base = s->time_base;
     /* Some formats want stream headers to be separate. */
     if (ctx->oformat->flags & AVFMT_GLOBALHEADER)
-        c->flags |= CODEC_FLAG_GLOBAL_HEADER;
+        c->flags |= AV_CODEC_FLAG_GLOBAL_HEADER;
     // expose avctx to encoder and set properties in encoder?
     // list codecs for a given format in ui
     return s;
--- QtAV-1.12.0/src/filter/LibAVFilter.cpp.orig	2017-06-21 02:47:15.000000000 +0100
+++ QtAV-1.12.0/src/filter/LibAVFilter.cpp	2018-04-25 19:40:52.345712516 +0100
@@ -120,7 +120,7 @@
         // pixel_aspect==sar, pixel_aspect is more compatible
         QString buffersrc_args = args;
         qDebug("buffersrc_args=%s", buffersrc_args.toUtf8().constData());
-        AVFilter *buffersrc  = avfilter_get_by_name(video ? "buffer" : "abuffer");
+        const AVFilter *buffersrc  = avfilter_get_by_name(video ? "buffer" : "abuffer");
         Q_ASSERT(buffersrc);
         AV_ENSURE_OK(avfilter_graph_create_filter(&in_filter_ctx,
                                                buffersrc,
@@ -128,7 +128,7 @@
                                                filter_graph)
                      , false);
         /* buffer video sink: to terminate the filter chain. */
-        AVFilter *buffersink = avfilter_get_by_name(video ? "buffersink" : "abuffersink");
+        const AVFilter *buffersink = avfilter_get_by_name(video ? "buffersink" : "abuffersink");
         Q_ASSERT(buffersink);
         AV_ENSURE_OK(avfilter_graph_create_filter(&out_filter_ctx, buffersink, "out",
                                            NULL, NULL, filter_graph)
--- QtAV-1.12.0/src/subtitle/SubtitleProcessorFFmpeg.cpp.orig	2017-06-21 02:47:15.000000000 +0100
+++ QtAV-1.12.0/src/subtitle/SubtitleProcessorFFmpeg.cpp	2018-04-24 22:26:01.072020100 +0100
@@ -249,7 +249,7 @@
     codec_ctx->time_base.den = 1000;
     if (!data.isEmpty()) {
         av_free(codec_ctx->extradata);
-        codec_ctx->extradata = (uint8_t*)av_mallocz(data.size() + FF_INPUT_BUFFER_PADDING_SIZE);
+        codec_ctx->extradata = (uint8_t*)av_mallocz(data.size() + AV_INPUT_BUFFER_PADDING_SIZE);
         if (!codec_ctx->extradata)
             return false;
         codec_ctx->extradata_size = data.size();
--- QtAV-1.12.0/examples/CMakeLists.txt.orig	2017-06-21 02:47:15.000000000 +0100
+++ QtAV-1.12.0/examples/CMakeLists.txt	2018-09-23 10:06:16.137143669 +0100
@@ -111,7 +111,8 @@
       ${RC_FILE}
       )
   target_include_directories(QMLPlayer PRIVATE QMLPlayer/qtquick2applicationviewer)
-  target_link_libraries(QMLPlayer Qt5::Quick common)
+  target_include_directories(QMLPlayer PUBLIC ${Qt5Widgets_INCLUDE_DIRS})
+  target_link_libraries(QMLPlayer Qt5::Quick common ${Qt5Widgets_LIBRARIES} )
   install(TARGETS QMLPlayer
     RUNTIME DESTINATION ${QTAV_INSTALL_BINS}
   )
@@ -124,6 +125,7 @@
   endif()
   add_executable(Player ${EXE_TYPE} ${PLAYER_SRC} ${PLAYER_HEADERS} ${PLAYER_RES} ${RC_FILE})
   target_link_libraries(Player QtAVWidgets common)
+  target_include_directories(Player PUBLIC ${Qt5Widgets_INCLUDE_DIRS})
 
   install(TARGETS Player
     RUNTIME DESTINATION ${QTAV_INSTALL_BINS}
--- QtAV-1.12.0/src/QtAV/private/AVCompat.h.orig	2017-06-21 02:47:15.000000000 +0100
+++ QtAV-1.12.0/src/QtAV/private/AVCompat.h	2018-09-23 09:44:55.264090283 +0100
@@ -79,7 +79,7 @@
 #endif //QTAV_HAVE(AVRESAMPLE)
 
 #if QTAV_HAVE(AVFILTER)
-#include <libavfilter/avfiltergraph.h> /*code is here for old version*/
+//#include <libavfilter/avfiltergraph.h> /*code is here for old version*/
 #include <libavfilter/avfilter.h>
 #include <libavfilter/buffersink.h>
 #include <libavfilter/buffersrc.h>
