From b061bae322edd4894f14ea2aea6baec36d32eda8 Mon Sep 17 00:00:00 2001
From: Petr Machata <pmachata@redhat.com>
Date: Fri, 25 Oct 2013 23:50:18 +0200
Subject: Split linux_elf_find_irelative_name out of
 linux_elf_add_plt_entry_irelative

---
 sysdeps/linux-gnu/trace.c |   23 ++++++++++++++---------
 sysdeps/linux-gnu/trace.h |    6 ++++++
 2 files changed, 20 insertions(+), 9 deletions(-)

Index: b/sysdeps/linux-gnu/trace.c
===================================================================
--- a/sysdeps/linux-gnu/trace.c
+++ b/sysdeps/linux-gnu/trace.c
@@ -1243,17 +1243,14 @@ irelative_name_cb(GElf_Sym *symbol, cons
 	return CBS_CONT;
 }
 
-enum plt_status
-linux_elf_add_plt_entry_irelative(struct Process *proc, struct ltelf *lte,
-				  GElf_Rela *rela, size_t ndx,
-				  struct library_symbol **ret)
-
+char *
+linux_elf_find_irelative_name(struct ltelf *lte, GElf_Rela *rela)
 {
 	struct irelative_name_data_t data = { rela->r_addend, NULL };
 	if (rela->r_addend != 0
 	    && elf_each_symbol(lte, 0,
 			       irelative_name_cb, &data).status < 0)
-		return -1;
+		return NULL;
 
 	const char *name;
 	if (data.found_name != NULL) {
@@ -1268,8 +1265,16 @@ linux_elf_add_plt_entry_irelative(struct
 #undef NAME
 	}
 
-	if (default_elf_add_plt_entry(proc, lte, name, rela, ndx, ret) < 0)
-		return PLT_FAIL;
+	return strdup(name);
+}
 
-	return PLT_OK;
+enum plt_status
+linux_elf_add_plt_entry_irelative(struct Process *proc, struct ltelf *lte,
+				  GElf_Rela *rela, size_t ndx,
+				  struct library_symbol **ret)
+{
+	char *name = linux_elf_find_irelative_name(lte, rela);
+	int i = default_elf_add_plt_entry(proc, lte, name, rela, ndx, ret);
+	free(name);
+	return i < 0 ? plt_fail : plt_ok;
 }
Index: b/sysdeps/linux-gnu/trace.h
===================================================================
--- a/sysdeps/linux-gnu/trace.h
+++ b/sysdeps/linux-gnu/trace.h
@@ -136,4 +136,10 @@ enum plt_status linux_elf_add_plt_entry_
 						  GElf_Rela *rela, size_t ndx,
 						  struct library_symbol **ret);
 
+/* Service routine of the above.  Determines a name corresponding to
+ * RELA, or invents a new one.  Returns NULL on failures, otherwise it
+ * returns a malloc'd pointer that the caller is responsible for
+ * freeing.  */
+char *linux_elf_find_irelative_name(struct ltelf *lte, GElf_Rela *rela);
+
 #endif /* _LTRACE_LINUX_TRACE_H_ */
