--- gsmartcontrol-0.8.6/src/hz/sync_policy_glib.h.orig	2011-03-06 09:21:07.000000000 +0000
+++ gsmartcontrol-0.8.6/src/hz/sync_policy_glib.h	2012-05-31 06:22:15.000000000 +0100
@@ -17,32 +17,6 @@
 // Glib-based policy.
 
 
-// Note: g_static_mutex_*lock() functions may give warnings about breaking strict-aliasing rules.
-// The warnings are completely harmless and visible on some versions of glib only.
-// However, due to their number, I decided to implement this workaround.
-
-#ifndef _WIN32
-	// same as stock version, but an additional cast to (void*) is added.
-	#define hz_glib_static_mutex_get_mutex(mutex) \
-		( g_thread_use_default_impl ? ((GMutex*) ((void*)((mutex)->static_mutex.pad))) : \
-		g_static_mutex_get_mutex_impl_shortcut(&((mutex)->runtime_mutex)) )
-
-#else
-	// win32 has different definition of this macro, so default to stock version.
-	#define hz_glib_static_mutex_get_mutex(mutex) g_static_mutex_get_mutex(mutex)
-#endif
-
-
-#define hz_glib_static_mutex_lock(mutex) \
-	g_mutex_lock(hz_glib_static_mutex_get_mutex(mutex))
-
-#define hz_glib_static_mutex_trylock(mutex) \
-	g_mutex_trylock(hz_glib_static_mutex_get_mutex(mutex))
-
-#define hz_glib_static_mutex_unlock(mutex) \
-	g_mutex_unlock(hz_glib_static_mutex_get_mutex(mutex))
-
-
 
 
 namespace hz {
@@ -51,104 +25,104 @@
 
 class MutexGlib : public hz::noncopyable {
 	public:
-		typedef GStaticMutex native_type;
+		typedef GMutex native_type;
 
 		static void native_lock(native_type& mutex)
 		{
-			hz_glib_static_mutex_lock(&mutex);
+			g_mutex_lock(&mutex);
 		}
 
 		static bool native_trylock(native_type& mutex)
 		{
-			return hz_glib_static_mutex_trylock(&mutex);
+			return g_mutex_trylock(&mutex);
 		}
 
 		static void native_unlock(native_type& mutex)
 		{
-			hz_glib_static_mutex_unlock(&mutex);
+			g_mutex_unlock(&mutex);
 		}
 
-		MutexGlib() { g_static_mutex_init(&mutex_); }
-		~MutexGlib() { g_static_mutex_free(&mutex_); }
+		MutexGlib() { g_mutex_init(&mutex_); }
+		~MutexGlib() { g_mutex_free(&mutex_); }
 
 		void lock() { native_lock(mutex_); }
 		bool trylock() { return native_trylock(mutex_); }
 		void unlock() { native_unlock(mutex_); }
 
 	private:
-		GStaticMutex mutex_;  // use StaticMutex, I think it uses less heap memory
+		GMutex mutex_;  // use StaticMutex, I think it uses less heap memory
 };
 
 
 
 class RecMutexGlib : public hz::noncopyable {
 	public:
-		typedef GStaticRecMutex native_type;
+		typedef GRecMutex native_type;
 
 		static void native_lock(native_type& mutex)
 		{
-			g_static_rec_mutex_lock(&mutex);
+			g_rec_mutex_lock(&mutex);
 		}
 
 		static bool native_trylock(native_type& mutex)
 		{
-			return g_static_rec_mutex_trylock(&mutex);
+			return g_rec_mutex_trylock(&mutex);
 		}
 
 		static void native_unlock(native_type& mutex)
 		{
-			g_static_rec_mutex_unlock(&mutex);
+			g_rec_mutex_unlock(&mutex);
 		}
 
-		RecMutexGlib() { g_static_rec_mutex_init(&mutex_); }
-		~RecMutexGlib() { g_static_rec_mutex_free(&mutex_); }
+		RecMutexGlib() { g_rec_mutex_init(&mutex_); }
+		~RecMutexGlib() { g_rec_mutex_clear(&mutex_); }
 
 		void lock() { native_lock(mutex_); }
 		bool trylock() { return native_trylock(mutex_); }
 		void unlock() { native_unlock(mutex_); }
 
 	private:
-		GStaticRecMutex mutex_;
+		GRecMutex mutex_;
 };
 
 
 
 class RWMutexGlib : public hz::noncopyable {
 	public:
-		typedef GStaticRWLock native_type;
+		typedef GRWLock native_type;
 
 		static void native_lock(native_type& mutex, bool for_write = false)
 		{
 			if (for_write) {
-				g_static_rw_lock_writer_lock(&mutex);
+				g_rw_lock_writer_lock(&mutex);
 			} else {
-				g_static_rw_lock_reader_lock(&mutex);
+				g_rw_lock_reader_lock(&mutex);
 			}
 		}
 
 		static bool native_trylock(native_type& mutex, bool for_write = false)
 		{
-			return (for_write ? g_static_rw_lock_writer_trylock(&mutex) : g_static_rw_lock_reader_trylock(&mutex));
+			return (for_write ? g_rw_lock_writer_trylock(&mutex) : g_rw_lock_reader_trylock(&mutex));
 		}
 
 		static void native_unlock(native_type& mutex, bool for_write = false)
 		{
 			if (for_write) {
-				g_static_rw_lock_writer_unlock(&mutex);
+				g_rw_lock_writer_unlock(&mutex);
 			} else {
-				g_static_rw_lock_reader_unlock(&mutex);
+				g_rw_lock_reader_unlock(&mutex);
 			}
 		}
 
-		RWMutexGlib() { g_static_rw_lock_init(&mutex_); }
-		~RWMutexGlib() { g_static_rw_lock_free(&mutex_); }
+		RWMutexGlib() { g_rw_lock_init(&mutex_); }
+		~RWMutexGlib() { g_rw_lock_clear(&mutex_); }
 
 		void lock(bool for_write = false) { native_lock(mutex_, for_write); }
 		bool trylock(bool for_write = false) { return native_trylock(mutex_, for_write); }
 		void unlock(bool for_write = false) { native_unlock(mutex_, for_write); }
 
 	private:
-		GStaticRWLock mutex_;
+		GRWLock mutex_;
 };
 
 
--- gsmartcontrol-0.8.6/src/gsc_text_window.h.orig	2011-03-06 18:01:49.000000000 +0000
+++ gsmartcontrol-0.8.6/src/gsc_text_window.h	2012-05-30 20:40:08.000000000 +0100
@@ -126,7 +126,7 @@
 		// by default, delete_event calls hide().
 		bool on_delete_event_before(GdkEventAny* e)
 		{
-			destroy(this);  // deletes this object and nullifies instance
+			this->destroy(this);  // deletes this object and nullifies instance
 			return true;  // event handled, don't call default virtual handler
 		}
 
@@ -184,7 +184,7 @@
 
 		void on_close_window_button_clicked()
 		{
-			destroy(this);
+			this->destroy(this);
 		}
 
 
