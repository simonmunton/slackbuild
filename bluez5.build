#!/bin/bash
#
. build_funcs

TARNAME=bluez
TARNAMEEXTRA=
TARSEP="-"
TARDIR=${SOURCE}/b
#TAR_EXT=.tar.gz
VERSION=5.50
VERSIONEXTRA=
BUILD=1

WEBPAGE="http://www.bluez.org"

#TAR_PROG=
#TAR_OPTS=
#PKGNAME=
#PKGVERSION=
#BUILD_SUFFIX=
#ARCH=noarch


FULL_TARNAME=${TARDIR}/${TARNAME}${TARNAMEEXTRA}${TARSEP}${VERSION}${VERSIONEXTRA}${TAR_EXT}

pre_unpack

PKG=/tmp/package-${PKGNAME}

if [ ! -f ${FULL_TARNAME} ]
then
  echo Can\'t find ${FULL_TARNAME}
  exit
fi

if [ ! -d ${TARNAME}-${VERSION} ]
then 
${TAR_PROG} ${TAR_OPTS} ${FULL_TARNAME}
#mv ${TARNAME}-${VERSION} ${TARNAME}-${VERSION}

if [ ! -d ${TARNAME}-${VERSION} ]
then 
  echo "${TARNAME}-${VERSION} directory not found"
  exit
fi

(cd ${TARNAME}-${VERSION}
 patch -p1 < ${CWD}/bluez5-0001-Allow-using-obexd-without-systemd-in-the-user-session.diff
 autoreconf -i -f
)
fi

pre_configure

cd ${TARNAME}-${VERSION}

fix_perms

PKGCFLAGS="-O2 -march=i686 ${CPUOPT}=i686"

if [ ${DO_CONFIGURE} == "yes" ]
then
CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
LDFLAGS="-lncurses" \
./configure --prefix=/usr \
            --libdir=/usr/lib${LIBDIRSUFFIX} \
            --sysconfdir=/etc \
            --mandir=/usr/man \
            --localstatedir=/var \
            --enable-datafiles \
            --enable-tools \
            --enable-cups \
            --enable-monitor \
            --enable-obex \
            --enable-udev \
            --enable-test \
            --disable-silent-rules \
            --enable-library \
            --enable-threads \
            --enable-experimental \
            --enable-manpages \
            --enable-sixaxis \
            --disable-systemd



#	    --enable-udevrules \
#	    --enable-configfiles \



#	    --enable-initscripts \

#cmake -DCMAKE_C_FLAGS:STRING="${SLKCFLAGS}" \
# -DCMAKE_CXX_FLAGS:STRING="${SLKCFLAGS}" \
# -DCMAKE_BUILD_TYPE=Release \
# -DCMAKE_INSTALL_PREFIX=/usr \
# -DMAN_INSTALL_DIR=/usr/man \
# -DSYSCONF_INSTALL_DIR=/etc \
# .

fi

if [ ${DO_MAKE} == "yes" ]
then
make ${NUM_JOBS} || exit
fi

if [ ${DO_INSTALL} != "yes" ]
then
 exit
fi

make install DESTDIR=${PKG}

rm -r ${PKG}//usr/lib${LIBDIRSUFFIX}/bluez/test


# Use reset=1 for the btusb module, which supposedly fixes reconnect problems:
mkdir -p ${PKG}/lib/modprobe.d
cp -a ${CWD}/bluez5-btusb.conf ${PKG}/lib/modprobe.d/btusb.conf

# Add bluetoothd to /usr/sbin
mkdir -p $PKG/usr/sbin
ln -s ../libexec/bluetooth/bluetoothd $PKG/usr/sbin

# Install the configuration files
mkdir -p ${PKG}/etc/bluetooth ${PKG}/etc/default
cat src/main.conf > ${PKG}/etc/bluetooth/main.conf.new
cat profiles/input/input.conf > ${PKG}/etc/bluetooth/input.conf.new
cat profiles/network/network.conf > ${PKG}/etc/bluetooth/network.conf.new
cat profiles/proximity/proximity.conf > ${PKG}/etc/bluetooth/proximity.conf.new
cat ${CWD}/bluez5-uart.conf > ${PKG}/etc/bluetooth/uart.conf.new
cat ${CWD}/bluez5-defaultconfig > ${PKG}/etc/default/bluetooth.new

# Add an init script
mkdir -p ${PKG}/etc/rc.d
cat ${CWD}/bluez5-rc.bluetooth > ${PKG}/etc/rc.d/rc.bluetooth.new

# Let's go ahead and let that start by default, unless an existing init
# script is not executable:
chmod 755 ${PKG}/etc/rc.d/rc.bluetooth.new


doinst_same_perm etc/rc.d/rc.bluetooth
doinst_config etc/rc.d/rc.bluetooth.new
doinst_config etc/bluetooth/input.conf.new
doinst_config etc/bluetooth/main.conf.new
doinst_config etc/bluetooth/network.conf.new
doinst_config etc/bluetooth/proximity.conf.new
doinst_config etc/bluetooth/uart.conf.new
doinst_config etc/default/bluetooth.new

strip_binaries

fix_links

compress_manpages

compress_info

cp -a \
 AUTHORS COPYING* INSTALL NEWS PLANS README* TODO \
 ${PKG}/usr/doc/${TARNAME}-${VERSION}

#cp ${CWD}/bluez-utils-README.SLACKWARE ${PKG}/usr/doc/${TARNAME}-${VERSION}/README.SLACKWARE

fix_docs

#-----handy-ruler-for-slack-desc-width-------------------------------|
make_slack_desc << EOF "Bluetooth protocol stack for Linux"
Bluetooth protocol stack for Linux

EOF

post_install

cd ${PKG}
su -c "chown -R root:root ${PKG}; \
find . -type d -exec chmod 755 {} \; ; \
chmod 700 etc/bluetooth/passkeys; \
chown root:root lib/modprobe:d/btusb.conf; \
chmod 644 lib/modprobe.d/btusb.conf; \
makepkg -l y -c n ${PKGDIR}${PKGNAME}-${PKGVERSION}-${ARCH}-${BUILD}${BUILD_SUFFIX}.tgz; \
chown -R ${USERNAME}:${GROUP} ${PKG}"
