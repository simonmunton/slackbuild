--- synfig-1.5.1/src/modules/mod_libavcodec/trgt_av.cpp.orig	2021-10-19 20:47:29.000000000 +0100
+++ synfig-1.5.1/src/modules/mod_libavcodec/trgt_av.cpp	2024-01-31 16:31:13.710164671 +0000
@@ -39,6 +39,7 @@
 {
 #ifdef HAVE_LIBAVFORMAT_AVFORMAT_H
 #	include <libavformat/avformat.h>
+#	include <libavcodec/avcodec.h>
 #elif defined(HAVE_AVFORMAT_H)
 #	include <avformat.h>
 #elif defined(HAVE_FFMPEG_AVFORMAT_H)
@@ -232,12 +233,14 @@
 		close();
 
 		if (!av_registered) {
+#if LIBAVCODEC_VERSION_MAJOR < 59 // FFMPEG < 5.0
 			av_register_all();
+#endif
 			av_registered = true;
 		}
 
 		// guess format
-		AVOutputFormat *format = av_guess_format(NULL, filename.c_str(), NULL);
+		const AVOutputFormat *format = av_guess_format(NULL, filename.c_str(), NULL);
 		if (!format) {
 			synfig::warning("Target_LibAVCodec: unable to guess the output format, defaulting to MPEG");
 			format = av_guess_format("mpeg", NULL, NULL);
@@ -252,6 +255,7 @@
 		context = avformat_alloc_context();
 		assert(context);
 		context->oformat = format;
+#if LIBAVCODEC_VERSION_MAJOR < 58 // FFMPEG < 4.0
 		if (filename.size() + 1 > sizeof(context->filename)) {
 			synfig::error(
 				"Target_LibAVCodec: filename too long, max length is %d, filename is '%s'",
@@ -261,6 +265,14 @@
 			return false;
 		}
 		memcpy(context->filename, filename.c_str(), filename.size() + 1);
+#else
+		context->url = av_strndup(filename.c_str(), filename.size());
+		if (!context->url) {
+			synfig::error("Target_LibAVCodec: cannot allocate space for filename");
+			close();
+			return false;
+	    	}
+#endif
 
 		packet = av_packet_alloc();
 		assert(packet);
