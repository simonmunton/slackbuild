#!/bin/bash
#
. build_funcs

TARNAME=deprecation
TARNAMEEXTRA=
TARSEP="-"
TARDIR=${SOURCE}/d
#TAR_EXT=.tar.gz
VERSION=2.1.0
VERSIONEXTRA=
BUILD=3

WEBPAGE="https://pypi.org/project/deprecation/"

#TAR_PROG=
#TAR_OPTS=
PKGNAME=python-deprecation
#PKGVERSION=
#BUILD_SUFFIX=
#ARCH=noarch


FULL_TARNAME=${TARDIR}/${TARNAME}${TARNAMEEXTRA}${TARSEP}${VERSION}${VERSIONEXTRA}${TAR_EXT}

pre_unpack

PKG=/tmp/package-${PKGNAME}

if [ ! -f ${FULL_TARNAME} ]
then
  echo Can\'t find ${FULL_TARNAME}
  exit
fi

if [ ! -d ${TARNAME}-${VERSION} ]
then 
${TAR_PROG} ${TAR_OPTS} ${FULL_TARNAME}
#mv ${TARNAME}-${VERSION} ${TARNAME}-${VERSION}

if [ ! -d ${TARNAME}-${VERSION} ]
then 
  echo "${TARNAME}-${VERSION} directory not found"
  exit
fi

(cd ${TARNAME}-${VERSION}
 #patch -p1 < ${CWD}/
)
fi

pre_configure

cd ${TARNAME}-${VERSION}

fix_perms

PKGCFLAGS="-O2 -march=i686 ${CPUOPT}=i686"

if [ ${DO_CONFIGURE} == "yes" ]
then
:
#CFLAGS="${SLKCFLAGS}" \
#CXXFLAGS="${SLKCFLAGS}" \
#./configure --prefix=/usr \
#            --sysconfdir=/etc \
#            --libdir=/usr/lib${LIBDIRSUFFIX} \
#            --localstatedir=/var/lib \
#	    --mandir=/usr/man

#cmake -DCMAKE_C_FLAGS:STRING="${SLKCFLAGS}" \
#      -DCMAKE_CXX_FLAGS:STRING="${SLKCFLAGS}" \
#      -DCMAKE_BUILD_TYPE=Release \
#      -DCMAKE_INSTALL_PREFIX=/usr \
#      -DMAN_INSTALL_DIR=/usr/man \
#      -DSYSCONF_INSTALL_DIR=/etc \
#      .

fi

if [ ${DO_MAKE} == "yes" ]
then
#make ${NUM_JOBS} || exit
python3 setup.py build || exit
#python3 -c 'import setuptools; setuptools.setup()' build || exit
fi

if [ ${DO_INSTALL} != "yes" ]
then
  exit
fi

#make install DESTDIR=${PKG}
python3 setup.py install --root=${PKG}
##python3 -c 'import setuptools; setuptools.setup()' install --root=${PKG}

strip_binaries

fix_links

compress_manpages

compress_info

cp -a \
  AUTHORS COPYING* INSTALL NEWS PLANS README* TODO \
  ${PKG}/usr/doc/${TARNAME}-${VERSION}

fix_docs

#-----handy-ruler-for-slack-desc-width-------------------------------|
make_slack_desc << EOF "A library to handle automated deprecations"
The deprecation library provides a deprecated decorator and a
fail_if_not_removed decorator for your tests. Together, the two
enable the automation of several things:

    The docstring of a deprecated method gets the deprecation details
    appended to the end of it. If you generate your API docs direct
    from your source, you dont need to worry about writing your own
    notification. You also dont need to worry about forgetting to
    write it. Its done for you.

    Rather than having code live on forever because you only
    deprecated it but never actually moved on from it, you can have
    your tests tell you when its time to remove the code. The
    @deprecated decorator can be told when its time to entirely
    remove the code, which causes @fail_if_not_removed to raise an
    AssertionError, causing either your unittest or py.test tests to
    fail.

EOF

post_install

cd ${PKG}
su -c "chown -R root:root ${PKG}; \
find . -type d -exec chmod 755 {} \; ; \
makepkg -l y -c n ${PKGDIR}${PKGNAME}-${PKGVERSION}-${ARCH}-${BUILD}${BUILD_SUFFIX}.tgz; \
chown -R ${USERNAME}:${GROUP} ${PKG}"
