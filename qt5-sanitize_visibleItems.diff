From 35d8d060b8621cfd17f92f9c632d99ceceb9acaa Mon Sep 17 00:00:00 2001
From: Gabriel de Dietrich <gabriel.dedietrich@theqtcompany.com>
Date: Wed, 25 Nov 2015 12:14:52 -0800
Subject: [PATCH] ListView: Sanitize visibleItems list after model insertions

In QQuickListViewPrivate::applyInsertionChange(), we update the
visibleItems list by first shifting the currently visible items
and then we add as many items as the model was added and at the
right position. We do this in such a way that we won't create
items that will not be visible right away (and may be deleted
right after by removeNonVisibleItems()). However, this may leave
gaps in the item index sequence, and QQuickListView doesn't always
recover gracefully from it.

The purpose of this patch is to make sure those gaps are cleared
right after inserting the new items. Since the insertions can happen
in two different places (either before or after the first visible
item) we need to update the visibleItems list accordingly. The way
we sanitize visibleItems is by removing those items that lie beyond
a possible index gap. If insertion happens before the first visible
item, we'll remove all those items before the insertion point. If
the insertion happens after the first visible item, we'll remove the
items after the insertion point.

Besides that, the logic for inserting before the visible position was
wrong. As items are inserted bottom-up in that case, the insertion
would start by just accounting for the item's size until the condition

    pos > from && insertionIdx < visibleIndex

would become false only because 'pos' would be small enough. After
that, the next loop run would start adding items before the 'from'
position, which is wrong. Our fix is to move the condition outside
the loop if the insertion index will be before the visible index
and just account for the items' size in that case. Otherwise, the
insertion happens as usual until pos < from.

Change-Id: I35767cf6e9737bea1fe7677e580245fc7172710c
Task-number: QTBUG-48870
Reviewed-by: Shawn Rutledge <shawn.rutledge@theqtcompany.com>
Reviewed-by: Robin Burchell <robin.burchell@viroteck.net>
---
 src/quick/items/qquicklistview.cpp                 | 59 ++++++++++++++++++----
 tests/auto/quick/qquicklistview/BLACKLIST          |  2 -
 .../quick/qquicklistview/tst_qquicklistview.cpp    | 18 +++++--
 3 files changed, 62 insertions(+), 17 deletions(-)

diff --git a/qtdeclarative/src/quick/items/qquicklistview.cpp b/qtdeclarative/src/quick/items/qquicklistview.cpp
index c7df855..9f53586 100644
--- a/qtdeclarative/src/quick/items/qquicklistview.cpp
+++ b/qtdeclarative/src/quick/items/qquicklistview.cpp
@@ -81,6 +81,8 @@
     bool removeNonVisibleItems(qreal bufferFrom, qreal bufferTo) Q_DECL_OVERRIDE;
     void visibleItemsChanged() Q_DECL_OVERRIDE;
 
+    void removeItem(FxViewItem *item);
+
     FxViewItem *newViewItem(int index, QQuickItem *item) Q_DECL_OVERRIDE;
     void initializeViewItem(FxViewItem *item) Q_DECL_OVERRIDE;
     bool releaseItem(FxViewItem *item) Q_DECL_OVERRIDE;
@@ -686,6 +688,18 @@
     return changed;
 }
 
+void QQuickListViewPrivate::removeItem(FxViewItem *item)
+{
+    if (item->transitionScheduledOrRunning()) {
+        qCDebug(lcItemViewDelegateLifecycle) << "\tnot releasing animating item" << item->index << (QObject *)(item->item);
+        item->releaseAfterTransition = true;
+        releasePendingTransition.append(item);
+    } else {
+        qCDebug(lcItemViewDelegateLifecycle) << "\treleasing stationary item" << item->index << (QObject *)(item->item);
+        releaseItem(item);
+    }
+}
+
 bool QQuickListViewPrivate::removeNonVisibleItems(qreal bufferFrom, qreal bufferTo)
 {
     FxViewItem *item = 0;
@@ -708,13 +722,7 @@
                 if (item->index != -1)
                     visibleIndex++;
                 visibleItems.removeAt(index);
-                if (item->transitionScheduledOrRunning()) {
-                    qCDebug(lcItemViewDelegateLifecycle) << "\tnot releasing animating item" << item->index << item->item->objectName();
-                    item->releaseAfterTransition = true;
-                    releasePendingTransition.append(item);
-                } else {
-                    releaseItem(item);
-                }
+                removeItem(item);
                 if (index == 0)
                     break;
                 item = visibleItems.at(--index);
@@ -730,13 +738,7 @@
             break;
         qCDebug(lcItemViewDelegateLifecycle) << "refill: remove last" << visibleIndex+visibleItems.count()-1 << item->position() << item->item->objectName();
         visibleItems.removeLast();
-        if (item->transitionScheduledOrRunning()) {
-            qCDebug(lcItemViewDelegateLifecycle) << "\tnot releasing animating item" << item->index << item->item->objectName();
-            item->releaseAfterTransition = true;
-            releasePendingTransition.append(item);
-        } else {
-            releaseItem(item);
-        }
+        removeItem(item);
         changed = true;
     }
 
@@ -3097,12 +3099,13 @@
         int i = 0;
         qreal from = tempPos - displayMarginBeginning - buffer;
 
-        for (i = count-1; i >= 0; --i) {
-            if (pos > from && insertionIdx < visibleIndex) {
-                // item won't be visible, just note the size for repositioning
-                insertResult->sizeChangesBeforeVisiblePos += averageSize + spacing;
-                pos -= averageSize + spacing;
-            } else {
+        if (insertionIdx < visibleIndex) {
+            if (pos >= from) {
+                // items won't be visible, just note the size for repositioning
+                insertResult->sizeChangesBeforeVisiblePos += count * (averageSize + spacing);
+            }
+        } else {
+            for (i = count-1; i >= 0 && pos >= from; --i) {
                 // item is before first visible e.g. in cache buffer
                 FxViewItem *item = 0;
                 if (change.isMove() && (item = currentChanges.removedItems.take(change.moveKey(modelIndex + i))))
@@ -3117,17 +3120,33 @@
                     insertResult->changedFirstItem = true;
                 if (!change.isMove()) {
                     addedItems->append(item);
-                    item->transitionNextReposition(transitioner, QQuickItemViewTransitioner::AddTransition, true);
+                    if (transitioner)
+                        item->transitionNextReposition(transitioner, QQuickItemViewTransitioner::AddTransition, true);
+                    else
+                        static_cast<FxListItemSG *>(item)->setPosition(pos, true);
                 }
                 insertResult->sizeChangesBeforeVisiblePos += item->size() + spacing;
                 pos -= item->size() + spacing;
+                index++;
             }
-            index++;
         }
+
+        int firstOkIdx = -1;
+        for (int i = 0; i <= insertionIdx && i < visibleItems.count() - 1; i++) {
+            if (visibleItems.at(i)->index + 1 != visibleItems.at(i + 1)->index) {
+                firstOkIdx = i + 1;
+                break;
+            }
+        }
+        for (int i = 0; i < firstOkIdx; i++) {
+            FxViewItem *nvItem = visibleItems.takeFirst();
+            addedItems->removeOne(nvItem);
+            removeItem(nvItem);
+        }
+
     } else {
-        int i = 0;
         qreal to = buffer + displayMarginEnd + tempPos + size();
-        for (i = 0; i < count && pos <= to; ++i) {
+        for (int i = 0; i < count && pos <= to; ++i) {
             FxViewItem *item = 0;
             if (change.isMove() && (item = currentChanges.removedItems.take(change.moveKey(modelIndex + i))))
                 item->index = modelIndex + i;
@@ -3147,12 +3166,32 @@
                     movingIntoView->append(MovedItem(item, change.moveKey(item->index)));
             } else {
                 addedItems->append(item);
-                item->transitionNextReposition(transitioner, QQuickItemViewTransitioner::AddTransition, true);
+                if (transitioner)
+                    item->transitionNextReposition(transitioner, QQuickItemViewTransitioner::AddTransition, true);
+                else
+                    static_cast<FxListItemSG *>(item)->setPosition(pos, true);
             }
             insertResult->sizeChangesAfterVisiblePos += item->size() + spacing;
             pos += item->size() + spacing;
             ++index;
         }
+
+        if (0 < index && index < visibleItems.count()) {
+            FxViewItem *prevItem = visibleItems.at(index - 1);
+            FxViewItem *item = visibleItems.at(index);
+            if (prevItem->index != item->index - 1) {
+                int i = index;
+                qreal prevPos = prevItem->position();
+                while (i < visibleItems.count()) {
+                    FxListItemSG *nvItem = static_cast<FxListItemSG *>(visibleItems.takeLast());
+                    insertResult->sizeChangesAfterVisiblePos -= nvItem->size() + spacing;
+                    addedItems->removeOne(nvItem);
+                    if (nvItem->transitionScheduledOrRunning())
+                        nvItem->setPosition(prevPos + (nvItem->index - prevItem->index) * averageSize);
+                    removeItem(nvItem);
+                }
+            }
+        }
     }
 
     updateVisibleIndex();
-- 
2.6.2.2.g1b5ffa3

