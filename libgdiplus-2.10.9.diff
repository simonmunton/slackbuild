--- libgdiplus-2.10.9/src/pngcodec.c.orig	2012-01-30 23:37:20.000000000 +0000
+++ libgdiplus-2.10.9/src/pngcodec.c	2012-06-22 22:58:06.000000000 +0100
@@ -116,10 +116,14 @@
 	bitmap_data->dpi_horz = png_get_x_pixels_per_inch(png_ptr, info_ptr);
 	bitmap_data->dpi_vert = png_get_y_pixels_per_inch(png_ptr, info_ptr);
 #elif defined(PNG_pHYs_SUPPORTED)
-	if ((info_ptr->valid & PNG_INFO_pHYs) && (info_ptr->phys_unit_type == PNG_RESOLUTION_METER)) {
-		bitmap_data->image_flags |= ImageFlagsHasRealDPI;
-		bitmap_data->dpi_horz = info_ptr->x_pixels_per_unit * 0.0254;
-		bitmap_data->dpi_vert = info_ptr->y_pixels_per_unit * 0.0254;
+	if (png_get_valid(png_ptr, info_ptr, PNG_INFO_pHYs)) {
+		png_uint_32  res_x, res_y;
+		int unit_type;
+		if (png_get_pHYs(png_ptr, info_ptr, &res_x, &res_y, &unit_type) && (unit_type == PNG_RESOLUTION_METER)) {
+			bitmap_data->image_flags |= ImageFlagsHasRealDPI;
+			bitmap_data->dpi_horz = res_x * 0.0254;
+			bitmap_data->dpi_vert = res_y * 0.0254;
+		}
 	}
 #endif
 	/* default to screen resolution (if nothing was provided or available) */
@@ -292,6 +296,11 @@
 		ImageFlags	colourspace_flag;
 		int		i;
 		int		j;
+		int num_palette;
+		png_colorp palettep;
+		png_bytep trans_alpha;
+		int num_trans;
+		png_color_16p trans_color;
 
 		width = png_get_image_width (png_ptr, info_ptr);
 		height = png_get_image_height (png_ptr, info_ptr);
@@ -317,46 +326,51 @@
 			palette = gdip_create_greyscale_palette (num_colours);
 			palette->Flags = PaletteFlagsGrayScale;
 		} else {
+
 			/* Copy the palette data into the GDI+ structure. */
 			colourspace_flag = ImageFlagsColorSpaceRGB;
 
 			palette_entries = num_colours;
-			if (palette_entries > info_ptr->num_palette) {
-				palette_entries = info_ptr->num_palette;
-			}
+			if (png_get_PLTE(png_ptr, info_ptr, &palettep, &num_palette)) {
+				if (palette_entries > num_palette) {
+					palette_entries = num_palette;
+				}
 
-			palette = GdipAlloc (sizeof(ColorPalette) + (num_colours - 1) * sizeof(ARGB));
-			palette->Flags = 0;
-			palette->Count = num_colours;
-
-			for (i=0; i < palette_entries; i++) {
-				set_pixel_bgra (&palette->Entries[i], 0,
-						info_ptr->palette[i].blue,
-						info_ptr->palette[i].green,
-						info_ptr->palette[i].red,
-						0xFF); /* alpha */
+				palette = GdipAlloc (sizeof(ColorPalette) + (num_colours - 1) * sizeof(ARGB));
+				palette->Flags = 0;
+				palette->Count = num_colours;
+
+				for (i=0; i < palette_entries; i++) {
+					set_pixel_bgra (&palette->Entries[i], 0,
+							palettep[i].blue,
+							palettep[i].green,
+							palettep[i].red,
+							0xFF); /* alpha */
+				}
 			}
 		}
 
 		/* Make sure transparency is respected. */
-		if (info_ptr->num_trans > 0) {
+		if (png_get_tRNS(png_ptr, info_ptr, &trans_alpha, &num_trans, &trans_color) && num_trans > 0) {
 			palette->Flags |= PaletteFlagsHasAlpha;
 			colourspace_flag |= ImageFlagsHasAlpha;
 
-			if (info_ptr->num_trans > info_ptr->num_palette) {
-				info_ptr->num_trans = info_ptr->num_palette;
-			}
+			if (png_get_PLTE(png_ptr, info_ptr, &palettep, &num_palette)) {
+				if (num_trans > num_palette) {
+					num_trans = num_palette;
+				}
 
-			for (i=0; i < info_ptr->num_trans; i++) {
-				set_pixel_bgra(&palette->Entries[i], 0,
-						info_ptr->palette[i].blue,
-						info_ptr->palette[i].green,
-						info_ptr->palette[i].red,
+				for (i=0; i < num_trans; i++) {
+					set_pixel_bgra(&palette->Entries[i], 0,
+							palettep[i].blue,
+							palettep[i].green,
+							palettep[i].red,
 #if PNG_LIBPNG_VER > 10399
-						info_ptr->trans_alpha [i]); /* alpha */
+							trans_alpha [i]); /* alpha */
 #else
-						info_ptr->trans[i]); /* alpha */
+							info_ptr->trans[i]); /* alpha */
 #endif
+				}
 			}
 		}
 
@@ -401,6 +415,8 @@
 		png_bytep *row_pointers;
 		BYTE *rawptr;
 		int i, j;
+		int num_palette;
+		png_colorp palettep;
 
 		width = png_get_image_width (png_ptr, info_ptr);
 		height = png_get_image_height (png_ptr, info_ptr);
@@ -485,6 +501,7 @@
 				for (i = 0; i < height; i++) {
 					png_bytep rowp = row_pointers[i];
 					if (bit_depth == 2) {
+						if (png_get_PLTE(png_ptr, info_ptr, &palettep, &num_palette)) {
 						// 4 pixels for each byte
 						for (j = 0; j < (width >> bit_depth); j++) {
 							png_byte palette = 0;
@@ -492,33 +509,34 @@
 
 							palette = (pix >> 6) & 0x03;
 							set_pixel_bgra (rawptr, 0,
-								info_ptr->palette[palette].blue,
-								info_ptr->palette[palette].green,
-								info_ptr->palette[palette].red,
+								palettep[palette].blue,
+								palettep[palette].green,
+								palettep[palette].red,
 								0xFF); /* alpha */
 
 							palette = (pix >> 4) & 0x03;
 							set_pixel_bgra (rawptr, 4,
-								info_ptr->palette[palette].blue,
-								info_ptr->palette[palette].green,
-								info_ptr->palette[palette].red,
+								palettep[palette].blue,
+								palettep[palette].green,
+								palettep[palette].red,
 								0xFF); /* alpha */
 
 							palette = (pix >> 2) & 0x03;
 							set_pixel_bgra (rawptr, 8,
-								info_ptr->palette[palette].blue,
-								info_ptr->palette[palette].green,
-								info_ptr->palette[palette].red,
+								palettep[palette].blue,
+								palettep[palette].green,
+								palettep[palette].red,
 								0xFF); /* alpha */
 
 							palette = pix & 0x03;
 							set_pixel_bgra (rawptr, 12,
-								info_ptr->palette[palette].blue,
-								info_ptr->palette[palette].green,
-								info_ptr->palette[palette].red,
+								palettep[palette].blue,
+								palettep[palette].green,
+								palettep[palette].red,
 								0xFF); /* alpha */
 							rawptr += 16;
 						}
+						}
 					} else {
 						for (j = 0; j < width; j++) {
 							png_byte pix = *rowp++;
--- libgdiplus-2.10.9/configure.in.orig	2012-01-31 17:27:38.000000000 +0000
+++ libgdiplus-2.10.9/configure.in	2012-06-22 23:26:47.000000000 +0100
@@ -330,41 +330,49 @@
 fi
 
 dnl Test for libpng
-    AC_MSG_CHECKING(for libpng14)
-    if $PKG_CONFIG --exists libpng14 ; then
+    AC_MSG_CHECKING(for libpng15)
+    if $PKG_CONFIG --exists libpng15 ; then
       AC_MSG_RESULT(yes)
       PNG='png'
-      PNG_DEP_CFLAGS_PACKAGES=libpng14
-      LIBPNG=`$PKG_CONFIG --libs libpng14`
+      PNG_DEP_CFLAGS_PACKAGES=libpng15
+      LIBPNG=`$PKG_CONFIG --libs libpng15`
     else
-      AC_MSG_CHECKING(for libpng12)
-      if $PKG_CONFIG --exists libpng12 ; then
+      AC_MSG_CHECKING(for libpng14)
+      if $PKG_CONFIG --exists libpng14 ; then
         AC_MSG_RESULT(yes)
         PNG='png'
-        PNG_DEP_CFLAGS_PACKAGES=libpng12
-        LIBPNG=`$PKG_CONFIG --libs libpng12`
+        PNG_DEP_CFLAGS_PACKAGES=libpng14
+        LIBPNG=`$PKG_CONFIG --libs libpng14`
       else
-        AC_MSG_RESULT(no)
-        AC_CHECK_LIB(png, png_read_info,
-          [AC_CHECK_HEADER(png.h, png_ok=yes, png_ok=no)],
-          AC_MSG_ERROR(*** libpng12 not found. See http://www.libpng.org/pub/png/libpng.html.), -lz -lm)
-        if test "$png_ok" = yes; then
-          AC_MSG_CHECKING([for png_structp in png.h])
-          AC_TRY_COMPILE([#include <png.h>],
-            [png_structp pp; png_infop info; png_colorp cmap; png_create_read_struct;],
-            png_ok=yes,
-            png_ok=no)
-          AC_MSG_RESULT($png_ok)
+        AC_MSG_CHECKING(for libpng12)
+        if $PKG_CONFIG --exists libpng12 ; then
+          AC_MSG_RESULT(yes)
+          PNG='png'
+          PNG_DEP_CFLAGS_PACKAGES=libpng12
+          LIBPNG=`$PKG_CONFIG --libs libpng12`
+        else
+          AC_MSG_RESULT(no)
+          AC_CHECK_LIB(png, png_read_info,
+            [AC_CHECK_HEADER(png.h, png_ok=yes, png_ok=no)],
+            AC_MSG_ERROR(*** libpng12 not found. See http://www.libpng.org/pub/png/libpng.html.), -lz -lm)
           if test "$png_ok" = yes; then
-            PNG='png'; LIBPNG='-lpng -lz'
+            AC_MSG_CHECKING([for png_structp in png.h])
+            AC_TRY_COMPILE([#include <png.h>],
+              [png_structp pp; png_infop info; png_colorp cmap; png_create_read_struct;],
+              png_ok=yes,
+              png_ok=no)
+            AC_MSG_RESULT($png_ok)
+            if test "$png_ok" = yes; then
+              PNG='png'; LIBPNG='-lpng -lz'
+            else
+              AC_MSG_ERROR(*** libpng12 found, but it is too old. See http://www.libpng.org/pub/png/libpng.html.)
+            fi
           else
-            AC_MSG_ERROR(*** libpng12 found, but it is too old. See http://www.libpng.org/pub/png/libpng.html.)
+              AC_MSG_ERROR(*** libpng12 not found. See http://www.libpng.org/pub/png/libpng.html.)
           fi
-        else
-            AC_MSG_ERROR(*** libpng12 not found. See http://www.libpng.org/pub/png/libpng.html.)
         fi
       fi
-    fi
+   fi
 
 
 GDIPLUS_LIBS="$GDIPLUS_LIBS $LIBPNG"
