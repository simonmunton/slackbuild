From 92c6c30f02746dfe82538dc33a051b531c5e4e54 Mon Sep 17 00:00:00 2001
From: Ilya Katsnelson <me@0upti.me>
Date: Tue, 18 Feb 2025 23:21:58 +0000
Subject: [PATCH] kcms/libkwindevices: put template functions in the header

Otherwise some compilers will get confused and fail with nonsensical linking errors.

Discovered while building 6.3.1 on NixOS, and should probably be backported.

BUG: 500345
(cherry picked from commit 7e4068c7e8c3f78914a223bf98af35a5e32269a0)
---
 kcms/libkwindevices/CMakeLists.txt   |  2 +-
 kcms/libkwindevices/devicesmodel.cpp |  2 +-
 kcms/libkwindevices/inputdevice.cpp  | 40 ----------------------------
 kcms/libkwindevices/inputdevice.h    | 40 +++++++++++++++++++++++++---
 4 files changed, 38 insertions(+), 46 deletions(-)

diff --git a/kcms/libkwindevices/CMakeLists.txt b/kcms/libkwindevices/CMakeLists.txt
index 15d5f6c44a..6363e89e4e 100644
--- a/kcms/libkwindevices/CMakeLists.txt
+++ b/kcms/libkwindevices/CMakeLists.txt
@@ -3,7 +3,7 @@
 
 ecm_qt_declare_logging_category(kwindevices_SRCS
     HEADER
-        logging.h
+        kwindevices-logging.h
     IDENTIFIER
         LIBKWINDEVICES
     CATEGORY_NAME
diff --git a/kcms/libkwindevices/devicesmodel.cpp b/kcms/libkwindevices/devicesmodel.cpp
index 136ef36482..f1beef3333 100644
--- a/kcms/libkwindevices/devicesmodel.cpp
+++ b/kcms/libkwindevices/devicesmodel.cpp
@@ -15,7 +15,7 @@
 #include <QDBusInterface>
 
 #include "inputdevice.h"
-#include "logging.h"
+#include "kwindevices-logging.h"
 
 DevicesModel::DevicesModel(const QByteArray &kind, QObject *parent)
     : QAbstractListModel(parent)
diff --git a/kcms/libkwindevices/inputdevice.cpp b/kcms/libkwindevices/inputdevice.cpp
index c087f1c3d3..ffe8786e6a 100644
--- a/kcms/libkwindevices/inputdevice.cpp
+++ b/kcms/libkwindevices/inputdevice.cpp
@@ -8,46 +8,6 @@
 
 #include <QList>
 
-#include "logging.h"
-
-template<typename T>
-bool InputDevice::Prop<T>::save()
-{
-    if (!isSupported() || !m_value || m_prop.isConstant()) {
-        qCDebug(LIBKWINDEVICES) << "skipping" << this << m_value.has_value() << isSupported() << m_prop.name();
-        return false;
-    }
-
-    auto iface = m_device->m_iface.get();
-    const bool ret = m_prop.write(iface, *m_value);
-    if (ret) {
-        m_configValue = *m_value;
-    }
-    return ret;
-}
-
-template<typename T>
-void InputDevice::Prop<T>::set(T newVal)
-{
-    if (!m_value) {
-        value();
-    }
-
-    Q_ASSERT(isSupported());
-    if (m_value != newVal) {
-        m_value = newVal;
-        if (m_changedSignalFunction) {
-            (m_device->*m_changedSignalFunction)();
-        }
-    }
-}
-
-template<typename T>
-bool InputDevice::Prop<T>::changed() const
-{
-    return m_value.has_value() && m_value.value() != m_configValue;
-}
-
 InputDevice::InputDevice(const QString &dbusName, QObject *parent)
     : QObject(parent)
 {
diff --git a/kcms/libkwindevices/inputdevice.h b/kcms/libkwindevices/inputdevice.h
index f3b420c12e..a535f3e6e9 100644
--- a/kcms/libkwindevices/inputdevice.h
+++ b/kcms/libkwindevices/inputdevice.h
@@ -15,6 +15,8 @@
 
 #include <optional>
 
+#include "kwindevices-logging.h"
+
 class InputDevice : public QObject
 {
     Q_OBJECT
@@ -226,7 +228,7 @@ class InputDevice : public QObject
         {
             int idx = OrgKdeKWinInputDeviceInterface::staticMetaObject.indexOfProperty(propName);
             if (idx < 0) {
-                qDebug() << "there is no" << propName;
+                qCDebug(LIBKWINDEVICES) << "there is no" << propName;
             }
             Q_ASSERT(idx >= 0);
             m_prop = OrgKdeKWinInputDeviceInterface::staticMetaObject.property(idx);
@@ -270,12 +272,29 @@ class InputDevice : public QObject
             }
         }
 
-        void set(T newVal);
+        void set(T newVal) {
+            if (!m_value) {
+                value();
+            }
+        
+            Q_ASSERT(isSupported());
+            if (m_value != newVal) {
+                m_value = newVal;
+                if (m_changedSignalFunction) {
+                    (m_device->*m_changedSignalFunction)();
+                }
+            }
+        }
+
         T defaultValue() const
         {
             return m_defaultValueFunction ? (m_device->m_iface.get()->*m_defaultValueFunction)() : T();
         }
-        bool changed() const;
+        
+        bool changed() const {
+            return m_value.has_value() && m_value.value() != m_configValue;
+        }
+
         void set(const Prop<T> &p)
         {
             set(p.value());
@@ -287,7 +306,20 @@ class InputDevice : public QObject
             return !m_supportedFunction || (iface->*m_supportedFunction)();
         }
 
-        bool save();
+        bool save() {
+            if (!isSupported() || !m_value || m_prop.isConstant()) {
+                qCDebug(LIBKWINDEVICES) << "skipping" << this << m_value.has_value() << isSupported() << m_prop.name();
+                return false;
+            }
+        
+            auto iface = m_device->m_iface.get();
+            const bool ret = m_prop.write(iface, *m_value);
+            if (ret) {
+                m_configValue = *m_value;
+            }
+            return ret;
+        }
+
         bool isDefaults() const
         {
             return m_value == defaultValue();
