--- motion-3.2.10.1/picture.c.orig	2008-06-10 23:39:40.000000000 +0100
+++ motion-3.2.10.1/picture.c	2011-06-09 20:38:14.000000000 +0100
@@ -52,7 +52,7 @@
         dest->jpegsize = dest->bufsize - dest->pub.free_in_buffer;
 }
 
-static GLOBAL(void) jpeg_mem_dest(j_compress_ptr cinfo, JOCTET* buf, size_t bufsize)
+static GLOBAL(void) my_jpeg_mem_dest(j_compress_ptr cinfo, JOCTET* buf, size_t bufsize)
 {
         mem_dest_ptr dest;
 
@@ -127,7 +127,7 @@
 	jpeg_set_quality(&cinfo, quality, TRUE);
 	cinfo.dct_method = JDCT_FASTEST;
 
-	jpeg_mem_dest(&cinfo, dest_image, image_size);	// data written to mem
+	my_jpeg_mem_dest(&cinfo, dest_image, image_size);	// data written to mem
 	
 	jpeg_start_compress (&cinfo, TRUE);
 
@@ -177,7 +177,7 @@
 
 	jpeg_set_quality(&cjpeg, quality, TRUE);
 	cjpeg.dct_method = JDCT_FASTEST;
-	jpeg_mem_dest(&cjpeg, dest_image, image_size);  // data written to mem
+	my_jpeg_mem_dest(&cjpeg, dest_image, image_size);  // data written to mem
 
 	jpeg_start_compress (&cjpeg, TRUE);
 
--- motion-3.2.10.1/configure.orig	2008-06-10 23:39:40.000000000 +0100
+++ motion-3.2.10.1/configure	2011-06-09 20:38:14.000000000 +0100
@@ -4321,9 +4321,9 @@
 	    s//\1/
 	    q
 	  }
-	  s/.*/./; q'`/include/ffmpeg/avformat.h; then
-		{ echo "$as_me:$LINENO: result: found ${FFMPEG}/include/ffmpeg/avformat.h" >&5
-echo "${ECHO_T}found ${FFMPEG}/include/ffmpeg/avformat.h" >&6; }
+	  s/.*/./; q'`/include/libavformat/avformat.h; then
+		{ echo "$as_me:$LINENO: result: found ${FFMPEG}/include/libavformat/avformat.h" >&5
+echo "${ECHO_T}found ${FFMPEG}/include/libavformat/avformat.h" >&6; }
 		FFMPEG_CFLAGS="-I`$as_dirname -- ${FFMPEG} ||
 $as_expr X${FFMPEG} : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
 	 X${FFMPEG} : 'X\(//\)[^/]' \| \
--- motion-3.2.10.1/ffmpeg.h.orig	2008-06-10 23:39:40.000000000 +0100
+++ motion-3.2.10.1/ffmpeg.h	2011-06-09 20:38:14.000000000 +0100
@@ -3,7 +3,7 @@
 
 #ifdef HAVE_FFMPEG
 #include <errno.h>
-#include <avformat.h>
+#include <libavformat/avformat.h>
 
 #ifndef AVERROR /* 0.4.8 & 0.4.9-pre1 */
 
--- motion-3.2.10.1/ffmpeg.c.orig	2008-06-10 23:39:40.000000000 +0100
+++ motion-3.2.10.1/ffmpeg.c	2011-06-09 21:02:42.000000000 +0100
@@ -122,7 +122,7 @@
  * 
  */ 
    
-#include "avstring.h"
+#include "libavutil/avstring.h"
 
 static int file_open(URLContext *h, const char *filename, int flags)
 {
@@ -159,7 +159,7 @@
 	return write(fd, buf, size);
 }
 
-static offset_t file_seek(URLContext *h, offset_t pos, int whence)
+static off_t file_seek(URLContext *h, off_t pos, int whence)
 {
 	int fd = (size_t)h->priv_data;
 	return lseek(fd, pos, whence);
@@ -218,7 +218,7 @@
 	mpeg1_file_protocol.url_close = file_protocol.url_close;
 
 	/* Register the append file protocol. */
-	register_protocol(&mpeg1_file_protocol);
+	av_register_protocol2(&mpeg1_file_protocol, sizeof mpeg1_file_protocol);
 }
 
 /* Obtains the output format used for the specified codec. For mpeg4 codecs,
@@ -244,7 +244,7 @@
 		/* We use "mpeg1video" for raw mpeg1 format. Using "mpeg" would
 		 * result in a muxed output file, which isn't appropriate here.
 		 */
-		of = guess_format("mpeg1video", NULL, NULL);
+		of = av_guess_format("mpeg1video", NULL, NULL);
 		if (of) {
 			/* But we want the trailer to be correctly written. */
 			of->write_trailer = mpeg1_write_trailer;
@@ -256,23 +256,23 @@
 #endif
 	} else if (strcmp(codec, "mpeg4") == 0) {
 		ext = ".avi";
-		of = guess_format("avi", NULL, NULL);
+		of = av_guess_format("avi", NULL, NULL);
 	} else if (strcmp(codec, "msmpeg4") == 0) {
 		ext = ".avi";
-		of = guess_format("avi", NULL, NULL);
+		of = av_guess_format("avi", NULL, NULL);
 		if (of) {
 			/* Manually override the codec id. */
 			of->video_codec = CODEC_ID_MSMPEG4V2;
 		}
 	} else if (strcmp(codec, "swf") == 0) {
 		ext = ".swf";
-		of = guess_format("swf", NULL, NULL);
+		of = av_guess_format("swf", NULL, NULL);
 	} else if (strcmp(codec, "flv") == 0) {
 		ext = ".flv";
-		of = guess_format("flv", NULL, NULL);
+		of = av_guess_format("flv", NULL, NULL);
 	} else if (strcmp(codec, "ffv1") == 0) {
 		ext = ".avi";
-		of = guess_format("avi", NULL, NULL);
+		of = av_guess_format("avi", NULL, NULL);
 		if (of) {
 			/* Use the FFMPEG Lossless Video codec (experimental!).
 			   Requires strict_std_compliance to be <= -2 */
@@ -280,7 +280,7 @@
 		}
 	} else if (strcmp(codec, "mov") == 0) {
 		ext = ".mov";
-		of = guess_format("mov", NULL, NULL);		
+		of = av_guess_format("mov", NULL, NULL);		
 	} else {
 		motion_log(LOG_ERR, 0, "ffmpeg_video_codec option value %s is not supported", codec);
 		return NULL;
@@ -359,7 +359,7 @@
 
 	ffmpeg->c     = c = AVSTREAM_CODEC_PTR(ffmpeg->video_st);
 	c->codec_id   = ffmpeg->oc->oformat->video_codec;
-	c->codec_type = CODEC_TYPE_VIDEO;
+	c->codec_type = AVMEDIA_TYPE_VIDEO;
 	is_mpeg1      = c->codec_id == CODEC_ID_MPEG1VIDEO;
 
 	if (strcmp(ffmpeg_video_codec, "ffv1") == 0)
@@ -627,7 +627,7 @@
 	if (ffmpeg->oc->oformat->flags & AVFMT_RAWPICTURE) {
 		/* raw video case. The API will change slightly in the near future for that */
 #ifdef FFMPEG_AVWRITEFRAME_NEWAPI
-		pkt.flags |= PKT_FLAG_KEY;
+		pkt.flags |= AV_PKT_FLAG_KEY;
 		pkt.data = (uint8_t *)pic;
 		pkt.size = sizeof(AVPicture);
 		ret = av_write_frame(ffmpeg->oc, &pkt);
@@ -648,7 +648,7 @@
 #ifdef FFMPEG_AVWRITEFRAME_NEWAPI
 			pkt.pts = AVSTREAM_CODEC_PTR(ffmpeg->video_st)->coded_frame->pts;
 			if (AVSTREAM_CODEC_PTR(ffmpeg->video_st)->coded_frame->key_frame) {
-				pkt.flags |= PKT_FLAG_KEY;
+				pkt.flags |= AV_PKT_FLAG_KEY;
 			}
 			pkt.data = ffmpeg->video_outbuf;
 			pkt.size = out_size;
