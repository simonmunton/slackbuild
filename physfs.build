#!/bin/bash
#
. build_funcs

TARNAME=physfs
TARNAMEEXTRA=
TARDIR=~/tmp/new/p
#TAR_EXT=.tar.gz
VERSION=1.1.1
VERSIONEXTRA=
BUILD=1

#TAR_PROG=
#TAR_OPTS=
#PKGNAME=
#PKGVERSION=
#BUILD_SUFFIX=
#ARCH=noarch


FULL_TARNAME=${TARDIR}/${TARNAME}${TARNAMEEXTRA}-${VERSION}${VERSIONEXTRA}${TAR_EXT}

pre_unpack

PKG=/tmp/package-${PKGNAME}

if [ ! -f ${FULL_TARNAME} ]
then
  echo Can\'t find ${FULL_TARNAME}
  exit
fi

if [ ! -d ${TARNAME}-${VERSION} ]
then 
${TAR_PROG} ${TAR_OPTS} ${FULL_TARNAME}
#mv ${TARNAME}-${VERSION} ${TARNAME}-${VERSION}

if [ ! -d ${TARNAME}-${VERSION} ]
then 
  echo "${TARNAME}-${VERSION} directory not found"
  exit
fi

(cd ${TARNAME}-${VERSION}
 #patch -p1 < ${CWD}/
)
fi

pre_configure

cd ${TARNAME}-${VERSION}

fix_perms

if [ ${DO_CONFIGURE} == "yes" ]
then
cmake -DCMAKE_INSTALL_PREFIX="/usr" .
fi

if [ ${DO_MAKE} == "yes" ]
then
make ${NUM_JOBS} || exit
fi

if [ ${DO_INSTALL} != "yes" ]
then
  exit
fi

make install DESTDIR=${PKG}

rm ${PKG}/usr/bin/test_physfs ${PKG}/usr/bin/wxtest_physfs
rmdir ${PKG}/usr/bin

doxygen

(cd docs/man/man3
for f in *
do
if grep -q "^[.]so" ${f}
then
  read junk src < ${f}
  rm ${f}
  ln -s `basename $src` ${f}
fi
done
)

mkdir -p ${PKG}/usr/man/man3
cp -r docs/man/man3/[Pp][Hh]* ${PKG}/usr/man/man3

#strip_binaries

fix_links

compress_manpages

compress_info

cp -a \
  AUTHORS COPYING* CREDITS* INSTALL* LICENSE* NEWS PLANS README* TODO* \
  ${PKG}/usr/doc/${TARNAME}-${VERSION}

fix_docs

#-----handy-ruler-for-slack-desc-width-------------------------------|
make_slack_desc << EOF "PhysicsFS file abstraction layer for games"
PhysicsFS is a library to provide abstract access to various archives.
It is intended for use in video games, and the design was somewhat 
inspired by Quake 3's file subsystem. 
It allows easy access to ZIP files in the same way as you access a 
file directly on the disk, and it makes it easy to ship a new archive 
that will override a previous archive on a per-file basis. Finally, 
PhysicsFS gives you platform-abstracted means to determine if CD-ROMs 
are available, the user's home directory, where in the real filesystem 
your program is running, etc.

EOF

post_install

cd ${PKG}
su -c "chown -R root.root ${PKG}; \
find . -type d -exec chmod 755 {} \; ; \
makepkg -l y -c n ${PKGNAME}-${PKGVERSION}-${ARCH}-${BUILD}${BUILD_SUFFIX}.tgz; \
chown -R ${USERNAME}.${GROUP} ${PKG}"
