--- lapack-3.2.1/SRC/Makefile.orig	2008-11-17 23:45:27.000000000 +0000
+++ lapack-3.2.1/SRC/Makefile	2009-09-19 23:16:42.000000000 +0100
@@ -370,6 +370,9 @@
 	$(ARCH) $(ARCHFLAGS) $@ $(ALLOBJ) $(ALLXOBJ)
 	$(RANLIB) $@
 
+shared: $(ALLOBJ)
+	gcc $(CFLAGS) -shared -Wl,-soname,liblapack.so.3 -o liblapack.so.3.1.1 $(ALLOBJ) -lblas -lm -lgfortran -lc
+
 single: $(SLASRC) $(ALLAUX) $(SCLAUX) 
 	$(ARCH) $(ARCHFLAGS) ../$(LAPACKLIB) $(SLASRC) $(ALLAUX) \
 	$(SCLAUX)
--- lapack-3.2.1/make.inc.orig	2009-04-16 20:09:59.000000000 +0100
+++ lapack-3.2.1/make.inc	2009-09-19 23:18:24.000000000 +0100
@@ -11,7 +11,7 @@
 #
 #  The machine (platform) identifier to append to the library names
 #
-PLAT = _LINUX
+PLAT = 
 #  
 #  Modify the FORTRAN and OPTS definitions to refer to the
 #  compiler and desired compiler options for your machine.  NOOPT
@@ -20,9 +20,9 @@
 #  and desired load options for your machine.
 #
 FORTRAN  = gfortran -fimplicit-none -g
-OPTS     =
+OPTS     = -funroll-all-loops -O3
 DRVOPTS  = $(OPTS)
-NOOPT    =
+NOOPT    = -O0
 LOADER   = gfortran -g
 LOADOPTS =
 #
@@ -33,10 +33,10 @@
 # For RS6K : SECOND and DSECND will use a call to the EXTERNAL FUNCTION ETIME_
 # TIMER    = EXT_ETIME_
 # For gfortran compiler: SECOND and DSECND will use a call to the INTERNAL FUNCTION ETIME
-# TIMER    = INT_ETIME
+TIMER    = INT_ETIME
 # If your Fortran compiler does not provide etime (like Nag Fortran Compiler, etc...)
 # SECOND and DSECND will use a call to the Fortran standard INTERNAL FUNCTION CPU_TIME 
-TIMER    = INT_CPU_TIME
+# TIMER    = INT_CPU_TIME
 # If neither of this works...you can use the NONE value... In that case, SECOND and DSECND will always return 0
 # TIMER     = NONE
 #
