#!/bin/bash
#
. build_funcs

TARNAME=openssl
TARNAMEEXTRA=
TARSEP="-"
TARDIR=~/tmp/new/o
#TAR_EXT=.tar.gz
VERSION=1.0.1c
VERSIONEXTRA=
BUILD=1

WEBPAGE="http://www.openssl.org/"

#TAR_PROG=
#TAR_OPTS=
#PKGNAME=
#PKGVERSION=
#BUILD_SUFFIX=
#ARCH=noarch


FULL_TARNAME=${TARDIR}/${TARNAME}${TARNAMEEXTRA}${TARSEP}${VERSION}${VERSIONEXTRA}${TAR_EXT}

pre_unpack

PKG=/tmp/package-${PKGNAME}

if [ ! -f ${FULL_TARNAME} ]
then
  echo Can\'t find ${FULL_TARNAME}
  exit
fi

if [ ! -d ${TARNAME}-${VERSION} ]
then 
${TAR_PROG} ${TAR_OPTS} ${FULL_TARNAME}
#mv ${TARNAME}-${VERSION} ${TARNAME}-${VERSION}

if [ ! -d ${TARNAME}-${VERSION} ]
then 
  echo "${TARNAME}-${VERSION} directory not found"
  exit
fi

(cd ${TARNAME}-${VERSION}
 patch -p1 < ${CWD}/openssl.soname.diff
 if [ $ARCH == "i486" ]
 then
   patch -p1 < ${CWD}/openssl.optsx86.diff
 fi

 # OpenSSL has a (nasty?) habit of bumping the internal version number with
 # every release.  This wouldn't be so bad, but some applications are so
 # paranoid that they won't run against a different OpenSSL version than
 # what they were compiled against, whether or not the ABI has changed.
 #
 # So, we will use the OPENSSL_VERSION_NUMBER from openssl-1.0.1c unless ABI
 # breakage forces it to change.  Yes, we're finally using this old trick.  :)
 sed -i "s/#define OPENSSL_VERSION_NUMBER.*/\/* Use 0x1000103fL (1.0.1c) below to avoid pointlessly breaking the ABI *\/\n#define OPENSSL_VERSION_NUMBER 0x1000103fL/g" crypto/opensslv.h || exit 1
)
fi

pre_configure

cd ${TARNAME}-${VERSION}

fix_perms

PKGCFLAGS="-O2 -march=i686 ${CPUOPT}=i686"

if [ ${DO_CONFIGURE} == "yes" ]
then
./config    --prefix=/usr \
	    --openssldir=/etc/ssl \
	    no-idea \
	    no-rc5 \
	    no-sse2 \
	    shared

#cmake -DCMAKE_C_FLAGS:STRING="${SLKCFLAGS}" \
#      -DCMAKE_CXX_FLAGS:STRING="${SLKCFLAGS}" \
#      -DCMAKE_BUILD_TYPE=Release \
#      -DCMAKE_INSTALL_PREFIX=/usr \
#      -DMAN_INSTALL_DIR=/usr/man \
#      -DLIB_SUFFIX=${LIBDIRSUFFIX} \
#      -DSYSCONF_INSTALL_DIR=/etc \
#      .

fi

if [ ${DO_MAKE} == "yes" ]
then
make depend
make ${NUM_JOBS} || exit
fi

if [ ${DO_INSTALL} != "yes" ]
then
  exit
fi

make install INSTALL_PREFIX=${PKG}

# Make the .so.? library symlinks:
( cd ${PKG}/usr/lib${LIBDIRSUFFIX} ; /sbin/ldconfig -l lib*.so.* )

# Move libraries, as they might be needed by programs that bring a network
# mounted /usr online:

mkdir ${PKG}/lib${LIBDIRSUFFIX}
( cd ${PKG}/usr/lib${LIBDIRSUFFIX}
  for file in lib*.so.?.* ; do
    mv $file ../../lib${LIBDIRSUFFIX}
    ln -sf ../../lib${LIBDIRSUFFIX}/$file .
  done
  cp -a lib*.so.? ../../lib${LIBDIRSUFFIX}
)

# Add a cron script to warn root if a certificate is going to expire soon:
mkdir -p ${PKG}/etc/cron.daily
cp ${CWD}/openssl-certwatch ${PKG}/etc/cron.daily/certwatch.new
chmod 755 ${PKG}/etc/cron.daily/certwatch.new

mv ${PKG}/etc/ssl/openssl.cnf ${PKG}/etc/ssl/openssl.cnf.new

doinst_config etc/ssl/openssl.cnf.new
doinst_config config etc/cron.daily/certwatch.new

mv ${PKG}/etc/ssl/man ${PKG}/usr
( cd ${PKG}/usr/man/man1 ; mv passwd.1 ssl_passwd.1 )
( cd ${PKG}/usr/man/man3 ; mv rand.3 ssl_rand.3 )
( cd ${PKG}/usr/man/man3 ; mv err.3 ssl_err.3 )



cat << EOF >> ${PKG}/install/doinst.sh

# If there is a known buggy certwatch script with no local
# modifications, just replace it:
if [ "\$(md5sum etc/cron.daily/certwatch 2> /dev/null)" = "32556321806f1850d56cb2ef8384b7a1  etc/cron.daily/certwatch" ]; then
  cat etc/cron.daily/certwatch.new > etc/cron.daily/certwatch
  touch -r etc/cron.daily/certwatch.new etc/cron.daily/certwatch
fi

# Rehash certificates if the package is upgraded on a running system:
if [ -x /usr/bin/c_rehash ]; then
  /usr/bin/c_rehash 1> /dev/null 2> /dev/null
fi

EOF

#strip_binaries

fix_links

compress_manpages

compress_info

cp -a \
  AUTHORS COPYING* INSTALL NEWS PLANS README* TODO \
  CHANGES CHANGES.SSLeay FAQ INSTALL.MacOS INSTALL.VMS INSTALL.W32 \
  LICENSE doc \
  ${PKG}/usr/doc/${TARNAME}-${VERSION}

fix_docs

#-----handy-ruler-for-slack-desc-width-------------------------------|
make_slack_desc << EOF "Secure Sockets Layer toolkit"
The OpenSSL certificate management tool and the shared libraries that
provide various encryption and decryption algorithms and protocols.

This product includes software developed by the OpenSSL Project for
use in the OpenSSL Toolkit (http://www.openssl.org).  This product
includes cryptographic software written by Eric Young
(eay@cryptsoft.com).  This product includes software written by Tim
Hudson (tjh@cryptsoft.com).

EOF

post_install

cd ${PKG}
su -c "chown -R root.root ${PKG}; \
find . -type d -exec chmod 755 {} \; ; \
makepkg -l y -c n ${PKGDIR}${PKGNAME}-${PKGVERSION}-${ARCH}-${BUILD}${BUILD_SUFFIX}.tgz; \
chown -R ${USERNAME}.${GROUP} ${PKG}"
