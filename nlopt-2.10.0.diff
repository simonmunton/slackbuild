--- nlopt-2.10.0/CMakeLists.txt.orig	2025-02-04 18:29:30.000000000 +0000
+++ nlopt-2.10.0/CMakeLists.txt	2025-03-30 09:14:06.839114595 +0100
@@ -147,7 +147,7 @@
 if (NLOPT_CXX OR NLOPT_PYTHON OR NLOPT_GUILE OR NLOPT_OCTAVE OR NLOPT_JAVA)
   check_cxx_symbol_exists (__cplusplus ciso646 SYSTEM_HAS_CXX)
   if (SYSTEM_HAS_CXX)
-    set (CMAKE_CXX_STANDARD 11) # set the standard to C++11 but do not require it
+    set (CMAKE_CXX_STANDARD 17) # set the standard to C++11 but do not require it
 
     if (NLOPT_CXX)
       set (CMAKE_CXX_STANDARD_REQUIRED ON) # if we build C++ API, we do need C++11
--- nlopt-2.10.0/src/algs/bobyqa/README.orig	2025-02-04 18:29:30.000000000 +0000
+++ nlopt-2.10.0/src/algs/bobyqa/README	2025-02-04 18:29:30.000000000 +0000
@@ -1,60 +1,20 @@
-===========================================================================
-On 8/13/09 added the paper on BOBYQA
-===========================================================================
-
-For simplicity, the Makefi;e has been replaced by a one-line compile
-script "comp" which needs to be adjusted if the compiler name is not
-f77. All Fortran files are in bobyla.f. Compiling and running bobyqa
-should produce results similar to those in RESULTS.
-                                         Hans Mittelmann, Jan 2009
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-     The Fortran version of BOBYQA is attached. Its purpose is to seek
-the least value of a function F of several variables, when derivatives
-are not available, where F is specified by the user through a subroutine
-called CALFUN. The name BOBYQA denotes Bound Approximation BY Quadratic
-Approximation, the constraints being lower and upper bounds on every
-variable, which can be set to huge values for unconstrained variables.
-The algorithm is intended to change the variables to values that are close
-to a local minimum of F. The user, however, should assume responsibility for
-finding out if the calculations are satisfactory, by considering carefully
-the values of F that occur. The BOBYQA software has been developed from the
-method of the paper "The NEWUOA software for unconstrained minimization
-without derivatives", in Large-Scale Nonlinear Optimization, editors G. Di
-Pillo and M. Roma, Springer (2006), pages 255-297. A report that describes
-the details of the development is going to be written soon.
-
-     The attachments in sequence are a suitable Makefile, followed by a main
-program and a CALFUN routine for the "Invdist2" problem, in order to provide
-an example for testing. Then BOBYQA and its six auxiliary routines, namely
-BOBYQB, ALTMOV, PRELIM, RESCUE, TRSBOX and UPDATE, are given. Finally, the
-computed output that the author obtained for the Invdist2 problems is listed.
-
-     In addition to providing CALFUN, an initial vector of variables and
-the lower and upper bounds, the user has to set the values of the parameters
-RHOBEG, RHOEND and NPT. After scaling the individual variables if necessary,
-so that the magnitudes of their expected changes are similar, RHOBEG is the
-initial steplength for changes to the variables, a reasonable choice being
-the mesh size of a coarse grid search. Further, RHOEND should be suitable for
-a search on a very fine grid. Typically, the software calculates a vector
-of variables that is within distance 10*RHOEND of a local minimum. Another
-consideration is that every trial vector of variables is forced to satisfy
-the lower and upper bounds, but there has to be room to make a search in all
-directions. Therefore an error return occurs if the difference between the
-bounds on any variable is less than 2*RHOBEG. The parameter NPT specifies
-the number of interpolation conditions on each quadratic model, the value
-NPT=2*N+1 being recommended for a start, where N is the number of variables.
-It is often worthwhile to try other choices too, but much larger values tend
-to be inefficient, because the amount of routine work of each iteration is
-of magnitude NPT**2, and because the achievement of adequate accuracy in some
-matrix calculations becomes more difficult. Some excellent numerical results
-have been found in the case NPT=N+6 even with more than 100 variables.
-
-     The way of calling BOBYQA should be clear from the Invdist2 examples
-and from the comments near the beginning of SUBROUTINE BOBYQA. There are no
-restrictions on or charges for the use of the software. I hope that the time
-and effort I have spent on developing the package will be helpful to much
-research and to many applications.
-
-January 5th, 2009                    M.J.D. Powell (mjdp@cam.ac.uk)
-
+This is the BOBYQA software by M. J. D. Powell, which performs
+derivative-free unconstrained optimization using an iteratively
+constructed quadratic approximation for the objective function.  See:
+
+        M. J. D. Powell, "The BOBYQA algorithm for bound constrained
+        optimization without derivatives," Department of Applied
+	Mathematics and Theoretical Physics, Cambridge England,
+	technical report NA2009/06 (2009).
+
+	http://www.damtp.cam.ac.uk/user/na/NA_papers/NA2009_06.pdf
+	http://plato.asu.edu/ftp/other_software/bobyqa.zip
+
+The C translation by S. G. Johnson (2009) includes a few minor
+modifications, mainly to use the NLopt stopping criteria (and to
+take the objective function as an argument rather than a global).
+
+The original Fortran code was released by Powell with "no restrictions
+or charges", and the C translation by S. G. Johnson is released in a
+similar spirit under the MIT License (see the COPYRIGHT file in this
+directory).
--- nlopt-2.10.0/src/algs/cobyla/README.orig	2025-02-04 18:29:30.000000000 +0000
+++ nlopt-2.10.0/src/algs/cobyla/README	2025-02-04 18:29:30.000000000 +0000
@@ -1,74 +1,42 @@
-# COBYLA : constrained optimization by linear approximation
-# Version 1.1
-# Copyright (c) 1992, Michael J. D. Powell (M.J.D.Powell@damtp.cam.ac.uk)
-# Copyright (c) 2004, J.S. Roy (js@jeannot.org)
-# See the LICENSE file for copyright information.
-# $Jeannot: README,v 1.7 2004/04/18 14:04:20 js Exp $
-
-This software is a C version of COBYLA2, a contrained optimization by linear
-approximation package developed by Michael J. D. Powell in Fortran.
-
-The original source code can be found at :
-http://plato.la.asu.edu/topics/problems/nlores.html
-
-Reference article for the method: Powell, J.M.D. (1992), "A Direct Search
-Optimization Method that Models the Objective and Constraint Functions by Linear
-Interpolation", DAMTP/NA5, Cambridge, England.
-
-This package was initially built by J.S. Roy to ease integration into SciPy.
-See: http://www.scipy.org/
-Many thanks to Michael J. D. Powell for allowing this to happen !
-
-This software, a derivative free non-linear optimizer, aims at minimizing the
-value of a nonlinear function subject to nonlinear constraints. It requires to
-be able to evaluate the function and the value of the constraints.
-
-COBYLA will try to make all the values of the constraints positive.
-So if you want to input a constraint j such as variable x[i] <= MAX, set:
-  constraint[j] = MAX - x[i]
-
-See the comments in cobyla.c for more details.
-
-This software has been converted from the Fortran into C and provides the
-following modifications :
-- reentrancy, no global variables or functions ;
-- ability to pass a pointer to the function to be optimized (to provide
-  access to constants) ;
-- ability to end the minimization at any time ;
-And other small changes.
-
-The last version (and other software) is avalaible at the URL :
-http://www.jeannot.org/~js/code/index.en.html
-
-A Python interface module is also provided.
-
-Contents :
-- cobyla.c : Source
-- cobyla.h : Header, and API documentation
-- LICENSE : License and copyright information
-- HISTORY : Release history
-- README : This file
-- example.c : A simple example
-- Makefile : Make file used to build the examples
-- moduleCobyla.c : the source of the python module
-- cobyla.py : the python module wrapper
-- example.py : an example for the python module
-- setup.py : the python installer
-
-Use is described in cobyla.h. For more information, see the example.
-The example can be built and executed by doing :
-  make test
-
-You may need to adjust the Makefile before building cobyla.
-
-To install the module in the current directory, use:
- python setup.py build_ext --inplace
-To test it, execute:
-  python cobyla.py
-To install it globaly, use:
- python setup.py install
-
-If you make use of this software, or if you make modifications to it (for a
-specific platform for example), you are encouraged to contact the author of
-this Fortran to C conversion at the following email : js@jeannot.org
-Thanks !
+This code implements COBYLA (Constrained Optimization BY Linear
+Approximations) algorithm derivative free optimization with nonlinear
+inequality constraints by M. J. D. Powell, described by:
+
+	M. J. D. Powell, "A direct search optimization method that
+	models the objective and constraint functions by linear
+	interpolation," in Advances in Optimization and Numerical
+	Analysis, eds. S. Gomez and J.-P. Hennart (Kluwer Academic:
+	Dordrecht, 1994), p. 51-67.
+
+and reviewed in:
+
+	M. J. D. Powell, "Direct search algorithms for optimization
+	calculations," Acta Numerica 7, 287-336 (1998).
+
+It constructs successive linear approximations of the objective
+function and constraints via a simplex of n+1 points (in n
+dimensions), and optimizes these approximations in a trust region at
+each step.
+
+The original code itself was written in Fortran by Powell, and
+apparently released without restrictions (like several of his other
+programs), and was converted to C in 2004 by Jean-Sebastien Roy
+(js@jeannot.org) for the SciPy project.  The C version was released
+under the attached license (basically the MIT license) at:
+	http://www.jeannot.org/~js/code/index.en.html#COBYLA
+
+It was incorporated into NLopt in 2008 by S. G. Johnson, and kept under
+the same MIT license.  In incorporating it into NLopt, SGJ adapted it
+to include the NLopt stopping conditions (the original code provided
+an x tolerance and a maximum number of function evaluations only).
+
+The original COBYLA did not have explicit support for bound
+constraints; these are included as linear constraints along with any
+other nonlinear constraints.  This is mostly fine---linear constraints
+are handled exactly by COBYLA's linear approximations.  However,
+occasionally COBYLA takes a "simplex" step, either to create the
+initial simplex or to fix a degenerate simplex, and these steps could
+violate the bound constraints.  SGJ modified COBYLA to explicitly
+honor the bound constraints in these cases, so that the
+objective/constraints are never evaluated outside of the bound
+constraints, without slowing convergence.
--- nlopt-2.10.0/src/algs/newuoa/README.orig	2025-02-04 18:29:30.000000000 +0000
+++ nlopt-2.10.0/src/algs/newuoa/README	2025-02-04 18:29:30.000000000 +0000
@@ -1,40 +1,29 @@
-     This is the Fortran version of NEWUOA. Its purpose is to seek
-the least value of a function F of several variables, when derivatives
-are not available, where F is specified by the user through a subroutine
-called CALFUN. The algorithm is intended to change the variables to values
-that are close to a local minimum of F. The user, however, should assume
-responsibility for finding out if the calculations are satisfactory, by
-considering carefully the values of F that occur. The method is described
-in the report "The NEWUOA software for unconstrained optimization without
-derivatives", which is available on the web at www.damtp.cam.ac.uk, where
-you have to click on Numerical Analysis and then on Reports, the number
-of the report being NA2004/08. Let N be the number of variables. The main
-new feature of the method is that quadratic models are updated using only
-about NPT=2N+1 interpolation conditions, the remaining freedom being taken
-up by minimizing the Frobenius norm of the change to the second derivative
-matrix of the model.
+This is the NEWUOA software by M. J. D. Powell, which performs
+derivative-free unconstrained optimization using an iteratively
+constructed quadratic approximation for the objective function.  See:
 
-     The new software was developed from UOBYQA, which also forms quadratic
-models from interpolation conditions. That method requires NPT=(N+1)(N+2)/2
-conditions, however, because they have to define all the parameters of the
-model. The least Frobenius norm updating procedure with NPT=2N+1 is usually
-much more efficient when N is large, because the work of each iteration is
-much less than before, and in some experiments the number of calculations
-of the objective function seems to be only of magnitude N.
+	M. J. D. Powell, "The NEWUOA software for unconstrained
+	optimization without derivatives," Proc. 40th Workshop
+	on Large Scale Nonlinear Optimization (Erice, Italy, 2004).
 
-     The attachments in sequence are a suitable Makefile, followed by a main
-program and a CALFUN routine for the Chebyquad problems, in order to provide
-an example for testing. Then NEWUOA and its five auxiliary routines, namely
-NEWUOB, BIGDEN, BIGLAG, TRSAPP and UPDATE, are given. Finally, the computed
-output that the author obtained for the Chebyquad problems is listed.
+The C translation by S. G. Johnson (2008) includes a few minor
+modifications, mainly to use the NLopt stopping criteria (and to
+take the objective function as an argument rather than a global).
 
-     The way of calling NEWUOA should be clear from the Chebyquad example
-and from the comments of that subroutine. It is hoped that the software will
-be helpful to much future research and to many applications. There are no
-restrictions on or charges for its use. If you wish to refer to it, please
-cite the DAMTP report that is mentioned above, which has been submitted for
-publication in the proceedings of the 40th Workshop on Large Scale Nonlinear
-Optimization (Erice, Italy, 2004).
-
-December 16th, 2004                    M.J.D. Powell (mjdp@cam.ac.uk)
+The C translation also includes a variant (NEWUOA_BOUND, when the lb
+and ub parameters to newuoa are non-NULL) that is substantially
+modified in order to support bound constraints on the input variables.
+In the original NEWUOA algorithm, Powell solved the quadratic
+subproblems (in routines TRSAPP and BIGLAG) in a spherical trust
+region via a truncated conjugate-gradient algorithm.  In the new
+variant, we use the MMA algorithm for these subproblems to solve them
+with both bound constraints and a spherical trust region.  In principle,
+we should also change the BIGDEN subroutine in a similar way (since
+BIGDEN also approximately solves a trust-region subproblem), but instead
+I just truncated its result to the bounds (which probably gives suboptimal
+convergence, but BIGDEN is called only very rarely in practice).
 
+The original Fortran code was released by Powell with "no restrictions
+or charges", and the C translation by S. G. Johnson is released in a
+similar spirit under the MIT License (see the COPYRIGHT file in this
+directory).
