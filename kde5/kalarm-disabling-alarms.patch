From 23eae65d7150bbc726d17092eacf2ad1f1d80f10 Mon Sep 17 00:00:00 2001
From: David Jarvie <djarvie@kde.org>
Date: Thu, 15 Oct 2020 19:19:06 +0100
Subject: [PATCH] Bug 427722: Prevent resources being disabled on logout

---
 src/resources/fileresourcedatamodel.cpp |  5 +--
 src/resources/resourcemodel.cpp         | 20 ++++++++++-
 src/resources/resourcemodel.h           | 47 ++++++++++++++-----------
 5 files changed, 53 insertions(+), 24 deletions(-)

diff --git a/src/resources/fileresourcedatamodel.cpp b/src/resources/fileresourcedatamodel.cpp
index 6c5c12c2..312c147d 100644
--- a/src/resources/fileresourcedatamodel.cpp
+++ b/src/resources/fileresourcedatamodel.cpp
@@ -135,13 +135,14 @@ FileResourceDataModel::FileResourceDataModel(QObject* parent)
 FileResourceDataModel::~FileResourceDataModel()
 {
     qCDebug(KALARM_LOG) << "FileResourceDataModel::~FileResourceDataModel";
+    ResourceFilterCheckListModel::disable();   // prevent resources being disabled when they are removed
+    while (!mResources.isEmpty())
+        removeResource(mResources.first());
     if (mInstance == this)
     {
         mInstance = nullptr;
         mInstanceIsOurs = false;
     }
-    while (!mResources.isEmpty())
-        removeResource(mResources.first());
     delete Resources::instance();
 }
 
diff --git a/src/resources/resourcemodel.cpp b/src/resources/resourcemodel.cpp
index d0cbd880..b132fd1b 100644
--- a/src/resources/resourcemodel.cpp
+++ b/src/resources/resourcemodel.cpp
@@ -387,7 +387,7 @@ void ResourceCheckListModel::slotRowsInsertedRemoved()
 */
 void ResourceCheckListModel::selectionChanged(const QItemSelection& selected, const QItemSelection& deselected)
 {
-    if (mResetting)
+    if (mResetting  ||  mDisabled)
         return;
     const QModelIndexList sel = selected.indexes();
     for (const QModelIndex& ix : sel)
@@ -459,6 +459,8 @@ QByteArray ResourceCheckListModel::debugType(const char* func) const
 = Proxy model providing a checkable resource list, filtered to contain only one
 = alarm type. The selected alarm type may be changed as desired.
 =============================================================================*/
+ResourceFilterCheckListModel* ResourceFilterCheckListModel::mInstance {nullptr};
+
 ResourceFilterCheckListModel::ResourceFilterCheckListModel(QObject* parent)
     : QSortFilterProxyModel(parent)
 {
@@ -466,6 +468,12 @@ ResourceFilterCheckListModel::ResourceFilterCheckListModel(QObject* parent)
     setSortCaseSensitivity(Qt::CaseInsensitive);
 }
 
+ResourceFilterCheckListModel::~ResourceFilterCheckListModel()
+{
+    if (this == mInstance)
+        mInstance = nullptr;
+}
+
 void ResourceFilterCheckListModel::init()
 {
     setEventTypeFilter(CalEvent::ACTIVE);   // ensure that sourceModel() is a valid model
@@ -525,6 +533,16 @@ Resource ResourceFilterCheckListModel::resource(const QModelIndex& index) const
     return static_cast<ResourceCheckListModel*>(sourceModel())->resource(mapToSource(index));
 }
 
+void ResourceFilterCheckListModel::disable()
+{
+    if (mInstance)
+    {
+        mInstance->mActiveModel->disable();
+        mInstance->mArchivedModel->disable();
+        mInstance->mTemplateModel->disable();
+    }
+}
+
 QVariant ResourceFilterCheckListModel::data(const QModelIndex& index, int role) const
 {
     switch (role)
diff --git a/src/resources/resourcemodel.h b/src/resources/resourcemodel.h
index 46c03a7e..7c4556a2 100644
--- a/src/resources/resourcemodel.h
+++ b/src/resources/resourcemodel.h
@@ -46,8 +46,8 @@ class ResourceFilterModel : public QSortFilterProxyModel
     /** Constructs a new instance.
      *  @tparam DataModel  The data model class to use as the source model. It must
      *                     have the following methods:
-     *                       static Model* instance(); - returns the unique instance.
-     *                       QModelIndex resourceIndex(const Resource&) const;
+     *                     static Model* instance(); - returns the unique instance.
+     *                     QModelIndex resourceIndex(const Resource&) const;
      */
     template <class DataModel>
     static ResourceFilterModel* create(QObject* parent = nullptr);
@@ -106,9 +106,9 @@ class ResourceListModel : public KDescendantsProxyModel
 public:
     /** Constructs a new instance.
      *  @tparam DataModel  The data model class to use as the source model. It must
-     *                  have the following methods:
-     *                    static DataModel* instance(); - returns the unique instance.
-     *                    QModelIndex resourceIndex(const Resource&) const;
+     *                     have the following methods:
+     *                     static DataModel* instance(); - returns the unique instance.
+     *                     QModelIndex resourceIndex(const Resource&) const;
      */
     template <class DataModel>
     static ResourceListModel* create(QObject* parent = nullptr);
@@ -144,9 +144,9 @@ class ResourceCheckListModel : public KCheckableProxyModel
 public:
     /** Constructs a new instance.
      *  @tparam DataModel  The data model class to use as the source model. It must
-     *                  have the following methods:
-     *                    static DataModel* instance(); - returns the unique instance.
-     *                    QModelIndex resourceIndex(const Resource&) const;
+     *                     have the following methods:
+     *                     static DataModel* instance(); - returns the unique instance.
+     *                     QModelIndex resourceIndex(const Resource&) const;
      */
     template <class DataModel>
     static ResourceCheckListModel* create(CalEvent::Type, QObject* parent = nullptr);
@@ -154,6 +154,7 @@ class ResourceCheckListModel : public KCheckableProxyModel
     ~ResourceCheckListModel();
     Resource resource(int row) const;
     Resource resource(const QModelIndex&) const;
+    void disable()    { mDisabled = true; }
     QVariant data(const QModelIndex&, int role = Qt::DisplayRole) const override;
     bool setData(const QModelIndex&, const QVariant& value, int role) override;
 
@@ -176,6 +177,7 @@ private Q_SLOTS:
     CalEvent::Type            mAlarmType;     // alarm type contained in this model
     QItemSelectionModel*      mSelectionModel;
     bool                      mResetting {false};   // currently handling rows inserted/removed
+    bool                      mDisabled {false};    // resources are being deleted on program exit
 };
 
 
@@ -188,19 +190,21 @@ class ResourceFilterCheckListModel : public QSortFilterProxyModel
 {
     Q_OBJECT
 public:
-    /** Constructs a new instance.
+    /** Constructs the unique instance.
      *  @tparam DataModel  The data model class to use as the source model. It must
-     *                  have the following methods:
-     *                    static DataModel* instance(); - returns the unique instance.
-     *                    QModelIndex resourceIndex(const Resource&) const;
-     *                    QString tooltip(const Resource&, CalEvent::Types) const;
+     *                     have the following methods:
+     *                     static DataModel* instance(); - returns the unique instance.
+     *                     QModelIndex resourceIndex(const Resource&) const;
+     *                     QString tooltip(const Resource&, CalEvent::Types) const;
      */
     template <class DataModel>
     static ResourceFilterCheckListModel* create(QObject* parent = nullptr);
 
+    ~ResourceFilterCheckListModel();
     void setEventTypeFilter(CalEvent::Type);
     Resource resource(int row) const;
     Resource resource(const QModelIndex&) const;
+    static void disable();
     QVariant data(const QModelIndex&, int role = Qt::DisplayRole) const override;
 
 protected:
@@ -217,6 +221,7 @@ private Q_SLOTS:
     explicit ResourceFilterCheckListModel(QObject* parent);
     void init();
 
+    static ResourceFilterCheckListModel* mInstance;
     ResourceCheckListModel* mActiveModel {nullptr};
     ResourceCheckListModel* mArchivedModel {nullptr};
     ResourceCheckListModel* mTemplateModel {nullptr};
@@ -279,13 +284,15 @@ ResourceCheckListModel* ResourceCheckListModel::create(CalEvent::Type type, QObj
 template <class DataModel>
 ResourceFilterCheckListModel* ResourceFilterCheckListModel::create(QObject* parent)
 {
-    ResourceFilterCheckListModel* model = new ResourceFilterCheckListModel(parent);
-    model->mActiveModel   = ResourceCheckListModel::create<DataModel>(CalEvent::ACTIVE, model);
-    model->mArchivedModel = ResourceCheckListModel::create<DataModel>(CalEvent::ARCHIVED, model);
-    model->mTemplateModel = ResourceCheckListModel::create<DataModel>(CalEvent::TEMPLATE, model);
-    model->mTooltipFunction = [](const Resource& r, CalEvent::Types t) { return DataModel::instance()->tooltip(r, t); };
-    model->init();
-    return model;
+    if (mInstance)
+        return nullptr;
+    mInstance = new ResourceFilterCheckListModel(parent);
+    mInstance->mActiveModel   = ResourceCheckListModel::create<DataModel>(CalEvent::ACTIVE, mInstance);
+    mInstance->mArchivedModel = ResourceCheckListModel::create<DataModel>(CalEvent::ARCHIVED, mInstance);
+    mInstance->mTemplateModel = ResourceCheckListModel::create<DataModel>(CalEvent::TEMPLATE, mInstance);
+    mInstance->mTooltipFunction = [](const Resource& r, CalEvent::Types t) { return DataModel::instance()->tooltip(r, t); };
+    mInstance->init();
+    return mInstance;
 }
 
 #endif // RESOURCEMODEL_H
