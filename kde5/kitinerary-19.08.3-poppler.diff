--- kitinerary-19.08.3/src/CMakeLists.txt.orig	2019-10-30 06:40:11.000000000 +0000
+++ kitinerary-19.08.3/src/CMakeLists.txt	2019-11-30 18:38:18.365483943 +0000
@@ -36,6 +36,7 @@
     pdf/pdfextractoroutputdevice.cpp
     pdf/pdfimage.cpp
     pdf/pdfvectorpicture.cpp
+    pdf/popplerglobalparams.cpp
     pdf/popplerutils.cpp
 
     barcodedecoder.cpp
--- kitinerary-19.08.3/src/pdf/pdfdocument.cpp.orig	2019-10-30 06:40:11.000000000 +0000
+++ kitinerary-19.08.3/src/pdf/pdfdocument.cpp	2019-11-30 18:38:32.116483287 +0000
@@ -20,6 +20,7 @@
 #include "pdfdocument_p.h"
 #include "pdfextractoroutputdevice_p.h"
 #include "pdfimage_p.h"
+#include "popplerglobalparams_p.h"
 #include "popplerutils_p.h"
 #include "logging.h"
 
@@ -28,7 +29,6 @@
 #include <QScopedValueRollback>
 
 #ifdef HAVE_POPPLER
-#include <GlobalParams.h>
 #include <PDFDoc.h>
 #include <Stream.h>
 #endif
@@ -44,7 +44,7 @@
     }
 
 #ifdef HAVE_POPPLER
-    QScopedValueRollback<GlobalParams*> globalParamResetter(globalParams, PopplerUtils::globalParams());
+    PopplerGlobalParams gp;
     PdfExtractorOutputDevice device;
     m_doc->m_popplerDoc->displayPageSlice(&device, m_pageNum + 1, 72, 72, 0, false, true, false, -1, -1, -1, -1);
     device.finalize();
@@ -89,7 +89,7 @@
 QString PdfPage::textInRect(double left, double top, double right, double bottom) const
 {
 #ifdef HAVE_POPPLER
-    QScopedValueRollback<GlobalParams*> globalParamResetter(globalParams, PopplerUtils::globalParams());
+    PopplerGlobalParams gp;
 
     TextOutputDev device(nullptr, false, 0, false, false);
     d->m_doc->m_popplerDoc->displayPageSlice(&device, d->m_pageNum + 1, 72, 72, 0, false, true, false, -1, -1, -1, -1);
@@ -136,7 +136,7 @@
     d->load();
     QVariantList l;
 #ifdef HAVE_POPPLER
-    QScopedValueRollback<GlobalParams*> globalParamResetter(globalParams, PopplerUtils::globalParams());
+    PopplerGlobalParams gp;
     const auto pageRect = d->m_doc->m_popplerDoc->getPage(d->m_pageNum + 1)->getCropBox();
 
     for (const auto &img : d->m_images) {
@@ -201,7 +201,7 @@
 PdfDocument* PdfDocument::fromData(const QByteArray &data, QObject *parent)
 {
 #ifdef HAVE_POPPLER
-    QScopedValueRollback<GlobalParams*> globalParamResetter(globalParams, PopplerUtils::globalParams());
+    PopplerGlobalParams gp;
 
     std::unique_ptr<PdfDocument> doc(new PdfDocument(parent));
     doc->d->m_pdfData = data;
--- kitinerary-19.08.3/src/pdf/pdfimage.cpp.orig	2019-10-30 06:40:11.000000000 +0000
+++ kitinerary-19.08.3/src/pdf/pdfimage.cpp	2019-11-30 18:38:18.365483943 +0000
@@ -18,6 +18,7 @@
 #include "pdfimage.h"
 #include "pdfimage_p.h"
 #include "pdfdocument_p.h"
+#include "popplerglobalparams_p.h"
 #include "popplerutils_p.h"
 
 #include <QScopedValueRollback>
@@ -131,7 +132,7 @@
     }
 
 #ifdef HAVE_POPPLER
-    QScopedValueRollback<GlobalParams*> globalParamResetter(globalParams, PopplerUtils::globalParams());
+    PopplerGlobalParams gp;
 
 #ifdef HAVE_POPPLER_0_69
     const auto xref = m_page->m_doc->m_popplerDoc->getXRef();
--- kitinerary-19.08.3/src/pdf/popplerutils.cpp.orig	2019-10-30 06:40:11.000000000 +0000
+++ kitinerary-19.08.3/src/pdf/popplerutils.cpp	2019-11-30 18:38:18.365483943 +0000
@@ -28,7 +28,6 @@
 #ifdef HAVE_POPPLER
 
 #include <GfxState.h>
-#include <GlobalParams.h>
 
 using namespace KItinerary;
 
@@ -107,13 +106,4 @@
     return qpp;
 }
 
-GlobalParams* PopplerUtils::globalParams()
-{
-    static std::unique_ptr<GlobalParams> s_globalParams;
-    if (!s_globalParams) {
-        s_globalParams.reset(new GlobalParams);
-    }
-    return s_globalParams.get();
-}
-
 #endif
--- kitinerary-19.08.3/src/pdf/popplerglobalparams_p.h.orig	2019-11-30 18:38:18.365483943 +0000
+++ kitinerary-19.08.3/src/pdf/popplerglobalparams_p.h	2019-11-30 18:38:18.365483943 +0000
@@ -0,0 +1,40 @@
+/*
+    Copyright (C) 2019 Volker Krause <vkrause@kde.org>
+
+    This program is free software; you can redistribute it and/or modify it
+    under the terms of the GNU Library General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or (at your
+    option) any later version.
+
+    This program is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
+    License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program.  If not, see <https://www.gnu.org/licenses/>.
+*/
+
+#ifndef KITINERARY_POPPLERGLOBALPARAMS_H
+#define KITINERARY_POPPLERGLOBALPARAMS_H
+
+#include <memory>
+
+class GlobalParams;
+
+namespace KItinerary {
+
+/** RAII wrapper of the globalParams object. */
+class PopplerGlobalParams
+{
+public:
+    PopplerGlobalParams();
+    ~PopplerGlobalParams();
+
+private:
+    std::unique_ptr<GlobalParams> m_prev;
+};
+
+}
+
+#endif // KITINERARY_POPPLERGLOBALPARAMS_H
--- kitinerary-19.08.3/src/pdf/popplerglobalparams.cpp.orig	2019-11-30 18:38:18.365483943 +0000
+++ kitinerary-19.08.3/src/pdf/popplerglobalparams.cpp	2019-11-30 18:38:18.365483943 +0000
@@ -0,0 +1,55 @@
+/*
+    Copyright (C) 2019 Volker Krause <vkrause@kde.org>
+
+    This program is free software; you can redistribute it and/or modify it
+    under the terms of the GNU Library General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or (at your
+    option) any later version.
+
+    This program is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
+    License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program.  If not, see <https://www.gnu.org/licenses/>.
+*/
+
+#include "config-kitinerary.h"
+#include "popplerglobalparams_p.h"
+
+#include <qglobal.h>
+
+#ifdef HAVE_POPPLER
+#include <GlobalParams.h>
+
+using namespace KItinerary;
+
+static std::unique_ptr<GlobalParams> s_globalParams;
+
+PopplerGlobalParams::PopplerGlobalParams()
+{
+    if (!s_globalParams) {
+        s_globalParams.reset(new GlobalParams);
+    }
+
+#if KPOPPLER_VERSION <= QT_VERSION_CHECK(0, 82, 0)
+    m_prev.reset(globalParams);
+    globalParams = s_globalParams.get();
+#else
+    std::swap(globalParams, m_prev);
+    std::swap(s_globalParams, globalParams);
+#endif
+}
+
+PopplerGlobalParams::~PopplerGlobalParams()
+{
+#if KPOPPLER_VERSION <= QT_VERSION_CHECK(0, 82, 0)
+    globalParams = m_prev.release();
+#else
+    std::swap(s_globalParams, globalParams);
+    std::swap(globalParams, m_prev);
+#endif
+}
+
+#endif
--- kitinerary-19.08.3/src/pdf/popplerutils_p.h.orig	2019-10-30 06:40:11.000000000 +0000
+++ kitinerary-19.08.3/src/pdf/popplerutils_p.h	2019-11-30 18:38:18.365483943 +0000
@@ -22,7 +22,6 @@
 
 class GfxPath;
 class GfxState;
-class GlobalParams;
 
 class QBrush;
 class QPainterPath;
@@ -43,8 +42,6 @@
 
     /** Convets a Poppler path into a Qt path. */
     QPainterPath convertPath(GfxPath *path, Qt::FillRule fillRule);
-
-    GlobalParams* globalParams();
 }
 
 }
--- kitinerary-19.08.3/CMakeLists.txt.orig	2019-11-05 04:19:20.000000000 +0000
+++ kitinerary-19.08.3/CMakeLists.txt	2019-11-30 18:46:17.653461075 +0000
@@ -69,6 +69,12 @@
         set(HAVE_POPPLER_0_82 ON)
     endif()
 endif()
+if (HAVE_POPPLER)
+    string(REPLACE "." ";" _poppler_version_components ${Poppler_VERSION})
+    list(GET _poppler_version_components 0 POPPLER_VERSION_MAJOR)
+    list(GET _poppler_version_components 1 POPPLER_VERSION_MINOR)
+    list(GET _poppler_version_components 2 POPPLER_VERSION_PATCH)
+endif()
 
 if (TARGET ZXing::Core)
     set(HAVE_ZXING ON)
--- kitinerary-19.08.3/src/config-kitinerary.h.cmake.orig	2019-10-30 06:40:11.000000000 +0000
+++ kitinerary-19.08.3/src/config-kitinerary.h.cmake	2019-11-30 18:42:01.639473290 +0000
@@ -25,6 +25,12 @@
 #cmakedefine HAVE_POPPLER_0_69
 #cmakedefine HAVE_POPPLER_0_72
 #cmakedefine HAVE_POPPLER_0_82
+// namespaced by "K" to not interfere with defines poppler provides itself
+#define KPOPPLER_VERSION_STRING "@Poppler_VERSION@"
+#define KPOPPLER_VERSION_MAJOR @POPPLER_VERSION_MAJOR@
+#define KPOPPLER_VERSION_MINOR @POPPLER_VERSION_MINOR@
+#define KPOPPLER_VERSION_PATCH @POPPLER_VERSION_PATCH@
+#define KPOPPLER_VERSION ((@POPPLER_VERSION_MAJOR@<<16)|(@POPPLER_VERSION_MINOR@<<8)|(@POPPLER_VERSION_PATCH@))
 
 #cmakedefine HAVE_ZXING
 
--- kitinerary-19.08.3/src/pdf/popplerutils.cpp.orig	2019-11-30 18:39:46.664479730 +0000
+++ kitinerary-19.08.3/src/pdf/popplerutils.cpp	2019-11-30 18:50:54.268844112 +0000
@@ -80,7 +80,7 @@
     return QTransform(ctm[0], ctm[1], ctm[2], ctm[3], ctm[4], ctm[5]);
 }
 
-QPainterPath PopplerUtils::convertPath(GfxPath *path, Qt::FillRule fillRule)
+QPainterPath PopplerUtils::convertPath(const GfxPath *path, Qt::FillRule fillRule)
 {
     QPainterPath qpp;
     qpp.setFillRule(fillRule);
--- kitinerary-19.08.3/src/pdf/popplerutils_p.h.orig	2019-11-30 18:39:46.664479730 +0000
+++ kitinerary-19.08.3/src/pdf/popplerutils_p.h	2019-11-30 18:50:44.007844602 +0000
@@ -41,7 +41,7 @@
     QTransform currentTransform(GfxState *state);
 
     /** Convets a Poppler path into a Qt path. */
-    QPainterPath convertPath(GfxPath *path, Qt::FillRule fillRule);
+    QPainterPath convertPath(const GfxPath *path, Qt::FillRule fillRule);
 }
 
 }
