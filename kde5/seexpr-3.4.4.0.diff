--- seexpr-3.4.4.0/CMakeLists.txt.orig	2020-09-28 14:04:00.000000000 +0100
+++ seexpr-3.4.4.0/CMakeLists.txt	2020-10-17 15:29:36.456249722 +0100
@@ -81,14 +81,15 @@
 # TODO: find boost and python the proper ways
 set(BOOST_DIR /usr CACHE PATH "where boost is located")
 
-find_package(PythonInterp) # provides Python version check
-find_package(PythonLibs)
+#find_package(PythonInterp) # provides Python version check
+#find_package(PythonLibs)
+find_package(Python)
 
 if(PYTHON_VERSION_MAJOR LESS 3)
     set(BOOST_PYTHON_LIBNAME boost_python CACHE STRING "what library name for boost python")
 else()
     # try to find boost_python3 in a way compatible with most distributions
-    find_library(BOOST_PYTHON3_LIB NAMES "boost_python3" "boost_python3${PYTHON_VERSION_MINOR}")
+    find_library(BOOST_PYTHON3_LIB NAMES "boost_python3" "boost_python3${Python_VERSION_MINOR}")
     SET (BOOST_PYTHON_LIBNAME ${BOOST_PYTHON3_LIB} CACHE STRING "what library name for boost python")
 endif()
 
@@ -192,6 +193,8 @@
             ${SeExpr2_PLATFORM_CODEGEN_LIBS}
         )
 
+        llvm_expand_dependencies(LLVM_LIB ${LLVM_LIB})
+
         message(STATUS "LLVM_LIB = ${LLVM_LIB}")
 
         if (LLVM_VERSION VERSION_LESS 3.8.0)
--- seexpr-3.4.4.0/src/py/CMakeLists.txt.orig	2020-09-28 14:04:00.000000000 +0100
+++ seexpr-3.4.4.0/src/py/CMakeLists.txt	2020-10-17 15:29:36.456249722 +0100
@@ -22,51 +22,53 @@
             set(CMAKE_LINK_FLAGS "${CMAKE_CXX_FLAGS} ${CUSTOM_PYTHON_FRAMEWORK}")
         #endif()
     else()
-        if (NOT DEFINED PYTHON_INCLUDE_DIR)
-            execute_process(
-                COMMAND
-                sh -c "python-config --includes | sed -e s,-I,,g"
-                OUTPUT_VARIABLE PYTHON_INCLUDE_DIR
-                OUTPUT_STRIP_TRAILING_WHITESPACE)
-            separate_arguments(PYTHON_INCLUDE_DIR)
-        endif()
-        message(STATUS "PYTHON_INCLUDE_DIR = ${PYTHON_INCLUDE_DIR}")
-        include_directories(${PYTHON_INCLUDE_DIR})
-
-        if (NOT DEFINED PYTHON_LIB_DIRS)
-            execute_process(
-                COMMAND
-                sh -c "python-config --ldflags | tr ' ' '\\n' | grep ^-L | sed -e s,-L,, | tr '\\n' ' '"
-                OUTPUT_VARIABLE PYTHON_LIB_DIRS
-                OUTPUT_STRIP_TRAILING_WHITESPACE)
-            if (NOT ${PYTHON_LIB_DIRS} STREQUAL "")
-                separate_arguments(PYTHON_LIB_DIRS)
-            endif()
-        endif()
-
-        if (DEFINED PYTHON_LIB_DIRS)
-            message(STATUS "PYTHON_LIB_DIRS = ${PYTHON_LIB_DIRS}")
-            link_directories(${PYTHON_LIB_DIRS})
-        endif()
-
-        if (NOT DEFINED PYTHON_LIBRARIES)
-            execute_process(
-                COMMAND
-                sh -c "python-config --ldflags | tr ' ' '\\n' | grep ^-l | sed -e s,-l,, | tr '\\n' ' '"
-                OUTPUT_VARIABLE PYTHON_LIBRARIES OUTPUT_STRIP_TRAILING_WHITESPACE)
-            separate_arguments(PYTHON_LIBRARIES)
-        endif()
-        message(STATUS "PYTHON_LIBRARIES = ${PYTHON_LIBRARIES}")
+        find_package(Python COMPONENTS Interpreter Development)
+#        if (NOT DEFINED PYTHON_INCLUDE_DIR)
+#            execute_process(
+#                COMMAND
+#                sh -c "python3-config --includes | sed -e s,-I,,g"
+#                OUTPUT_VARIABLE PYTHON_INCLUDE_DIR
+#                OUTPUT_STRIP_TRAILING_WHITESPACE)
+#            separate_arguments(PYTHON_INCLUDE_DIR)
+#        endif()
+#        message(STATUS "PYTHON_INCLUDE_DIR = ${PYTHON_INCLUDE_DIR}")
+#        include_directories(${PYTHON_INCLUDE_DIR})
+#
+#        if (NOT DEFINED PYTHON_LIB_DIRS)
+#            execute_process(
+#                COMMAND
+#                sh -c "python3-config --ldflags | tr ' ' '\\n' | grep ^-L | sed -e s,-L,, | tr '\\n' ' '"
+#                OUTPUT_VARIABLE PYTHON_LIB_DIRS
+#                OUTPUT_STRIP_TRAILING_WHITESPACE)
+#            if (NOT ${PYTHON_LIB_DIRS} STREQUAL "")
+#                separate_arguments(PYTHON_LIB_DIRS)
+#            endif()
+#        endif()
+#
+#        if (DEFINED PYTHON_LIB_DIRS)
+#            message(STATUS "PYTHON_LIB_DIRS = ${PYTHON_LIB_DIRS}")
+#            link_directories(${PYTHON_LIB_DIRS})
+#        endif()
+#
+#        if (NOT DEFINED PYTHON_LIBRARIES)
+#            execute_process(
+#                COMMAND
+#                sh -c "python3-config --ldflags | tr ' ' '\\n' | grep ^-l | sed -e s,-l,, | tr '\\n' ' '"
+#                OUTPUT_VARIABLE PYTHON_LIBRARIES OUTPUT_STRIP_TRAILING_WHITESPACE)
+#            separate_arguments(PYTHON_LIBRARIES)
+#        endif()
+#        set(PYTHON_LIBRARIES ${Python_LIBRARIES} ${PYTHON_LIBRARIES})
+#        message(STATUS "PYTHON_LIBRARIES = ${PYTHON_LIBRARIES}")
 
     endif()
 
-    set(PYTHON_DEST "${CMAKE_INSTALL_LIBDIR}/python${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}/site-packages/SeExprPy")
+    set(PYTHON_DEST "${CMAKE_INSTALL_LIBDIR}/python${Python_VERSION_MAJOR}.${Python_VERSION_MINOR}/site-packages/SeExprPy")
     message(STATUS "PYTHON_DEST = ${PYTHON_DEST}")
 
     if (NOT DEFINED BOOST_INCLUDE_DIR)
         set(BOOST_INCLUDE_DIR ${BOOST_DIR}/include)
     endif()
-    include_directories(SYSTEM ${BOOST_INCLUDE_DIR} ${PYTHON_INCLUDE_DIR})
+    include_directories(SYSTEM ${BOOST_INCLUDE_DIR} ${Python_INCLUDE_DIRS})
     message(STATUS "BOOST_INCLUDE_DIR = ${BOOST_INCLUDE_DIR}")
 
     if (NOT DEFINED BOOST_LIB_DIR)
@@ -78,7 +80,7 @@
     include_directories(../SeExpr2/parser)
     add_library(core SHARED SeExprPy.cpp ../SeExpr2/parser/SeExprParse.cpp ../SeExpr2/parser/SeExprLex.cpp)
 
-    target_link_libraries(core ${PYTHON_LIBRARIES})
+    target_link_libraries(core ${Python_LIBRARIES})
     target_link_libraries(core ${BOOST_PYTHON_LIBNAME})
     set_target_properties(core PROPERTIES PREFIX "")
     # Python modules require a ".so" suffix on macOS
--- seexpr-3.4.4.0/src/SeExpr2/ExprLLVMCodeGeneration.cpp.orig	2020-09-28 14:04:00.000000000 +0100
+++ seexpr-3.4.4.0/src/SeExpr2/ExprLLVMCodeGeneration.cpp	2020-10-17 15:31:04.180245536 +0100
@@ -168,7 +168,7 @@
     return createVecVal(Builder, vals);
 }
 
-LLVM_VALUE getFirstElement(LLVM_VALUE V, IRBuilder<> Builder) {
+LLVM_VALUE getFirstElement(LLVM_VALUE V, IRBuilder<> &Builder) {
     Type *VTy = V->getType();
     if (VTy->isDoubleTy()) return V;
 
@@ -184,7 +184,7 @@
 
     if (destTy->isDoubleTy()) return val;
 
-    return createVecVal(Builder, val, destTy->getVectorNumElements());
+    return createVecVal(Builder, val, llvm::cast<llvm::VectorType>(destTy)->getNumElements());
 }
 
 AllocaInst *createAllocaInst(LLVM_BUILDER Builder, Type *ty, unsigned arraySize = 1, const std::string &varName = "") {
@@ -235,7 +235,7 @@
 
     assert(target->getType()->isVectorTy());
 
-    unsigned dim = target->getType()->getVectorNumElements();
+    unsigned dim = llvm::cast<llvm::VectorType>(target->getType())->getNumElements();
     LLVM_VALUE vecVal = createVecVal(Builder, toPromote, dim);
 
     if (op1Ty->isVectorTy())
@@ -258,7 +258,7 @@
 AllocaInst *storeVectorToDoublePtr(LLVM_BUILDER Builder, LLVM_VALUE vecVal) {
     LLVMContext &llvmContext = Builder.getContext();
     AllocaInst *doublePtr =
-        createAllocaInst(Builder, Type::getDoubleTy(llvmContext), vecVal->getType()->getVectorNumElements());
+        createAllocaInst(Builder, Type::getDoubleTy(llvmContext), llvm::cast<llvm::VectorType>(vecVal->getType())->getNumElements());
     for (unsigned i = 0; i < 3; ++i) {
         LLVM_VALUE idx = ConstantInt::get(Type::getInt32Ty(llvmContext), i);
         LLVM_VALUE val = Builder.CreateExtractElement(vecVal, idx);
@@ -350,13 +350,13 @@
 
     if (isVarArg(seFuncType)) args = convertArgsToPointerAndLength(Builder, args, seFuncType);
 
-    if (isReturnVector(seFuncType) == false) return Builder.CreateCall(addrVal, args);
+    if (isReturnVector(seFuncType) == false) return Builder.CreateCall(cast<FunctionType>(addrVal->getType()->getPointerElementType()), addrVal, args);
 
     // TODO: assume standard function all use vector of length 3 as parameter
     //       or return type.
     AllocaInst *retPtr = createAllocaInst(Builder, Type::getDoubleTy(llvmContext), 3);
     args.insert(args.begin(), retPtr);
-    Builder.CreateCall(addrVal, replaceVecArgWithDoublePointer(Builder, args));
+    Builder.CreateCall(cast<FunctionType>(addrVal->getType()->getPointerElementType()), addrVal, replaceVecArgWithDoublePointer(Builder, args));
     return createVecValFromAlloca(Builder, retPtr, 3);
 }
 
@@ -380,7 +380,7 @@
         LLVM_VALUE arg = seFunc->child(i)->codegen(Builder);
         if (arg->getType()->isVectorTy()) {
             AllocaInst *vecArray = storeVectorToDoublePtr(Builder, arg);
-            for (unsigned i = 0; i < arg->getType()->getVectorNumElements(); ++i) {
+            for (unsigned i = 0; i < llvm::cast<llvm::VectorType>(arg->getType())->getNumElements(); ++i) {
                 LLVM_VALUE elemPtr = Builder.CreateConstGEP1_32(vecArray, i);
                 args.push_back(Builder.CreateLoad(elemPtr));
             }
@@ -876,7 +876,7 @@
     assert(maxVectorArgType->isVectorTy());
 
     std::vector<LLVM_VALUE> ret;
-    for (unsigned vecComponent = 0; vecComponent < maxVectorArgType->getVectorNumElements(); ++vecComponent) {
+    for (unsigned vecComponent = 0; vecComponent < llvm::cast<llvm::VectorType>(maxVectorArgType)->getNumElements(); ++vecComponent) {
         LLVM_VALUE idx = ConstantInt::get(Type::getInt32Ty(llvmContext), vecComponent);
         std::vector<LLVM_VALUE> realArgs;
         // Break the function into multiple calls per component of the output
@@ -975,7 +975,7 @@
     Builder.SetInsertPoint(BB);
     Function::arg_iterator AI = F->arg_begin();
     for (int i = 0, e = F->arg_size(); i != e; ++i, ++AI) {
-        AllocaInst *Alloca = createAllocaInst(Builder, AI->getType(), 1, AI->getName());
+        AllocaInst *Alloca = createAllocaInst(Builder, AI->getType(), 1, AI->getName().str());
         Alloca->takeName(&*AI);
         Builder.CreateStore(&*AI, Alloca);
     }
--- seexpr-3.4.4.0/src/SeExpr2/UI/CMakeLists.txt.orig	2020-09-28 14:04:00.000000000 +0100
+++ seexpr-3.4.4.0/src/SeExpr2/UI/CMakeLists.txt	2020-10-17 15:29:36.456249722 +0100
@@ -225,12 +225,13 @@
         find_program(SIP_EXEC sip)
 
         # Find python includes and libs. cmake doesn't seem to handle automatically
-        find_package(PythonInterp)
-        find_package(PythonLibs)
+        #find_package(PythonInterp)
+        #find_package(PythonLibs)
+        find_package(Python COMPONENTS Interpreter Development)
 
         macro(get_build_info NAME STORAGE)
             execute_process(
-                COMMAND ${PYTHON_EXECUTABLE} ${PROJECT_SOURCE_DIR}/src/build/build-info ${NAME}
+                COMMAND ${Python_EXECUTABLE} ${PROJECT_SOURCE_DIR}/src/build/build-info ${NAME}
                 OUTPUT_VARIABLE ${STORAGE}
                 OUTPUT_STRIP_TRAILING_WHITESPACE)
         endmacro()
@@ -249,7 +250,11 @@
         endif()
 
         if (NOT DEFINED PYQT_SIP_DIR)
-            get_build_info(pyqt4-sip PYQT_SIP_DIR)
+            if (ENABLE_QT5)
+                get_build_info(pyqt5-sip PYQT_SIP_DIR)
+            else()
+                get_build_info(pyqt4-sip PYQT_SIP_DIR)
+            endif()
             if (NOT DEFINED PYQT_SIP_DIR)
                message(FATAL_ERROR "PYQT_SIP_DIR must be defined")
             endif()
@@ -287,7 +292,7 @@
         add_library(expreditor2 SHARED sipexpreditor2part0.cpp)
         target_include_directories(expreditor2 PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
         target_link_libraries(expreditor2 SeExpr2Editor ${SEEXPR_LIBRARIES}
-                              ${OPENGL_LIBRARY} ${GLUT_LIBRARY} ${PYTHON_LIBRARIES})
+                              ${OPENGL_LIBRARY} ${GLUT_LIBRARY} ${Python_LIBRARIES})
 
         if (ENABLE_QT5)
             target_link_libraries(expreditor2 SeExpr2Editor
--- seexpr-3.4.4.0/src/build/build-info.orig	2020-09-28 14:04:00.000000000 +0100
+++ seexpr-3.4.4.0/src/build/build-info	2020-10-17 15:29:36.456249722 +0100
@@ -21,6 +21,7 @@
         ('python-site', python_site),
         ('python-inc', python_inc),
         ('pyqt4-sip', pyqt4_sip),
+        ('pyqt5-sip', pyqt5_sip),
         ('pyqt4-sip-flags', pyqt4_sip_flags),
         ('pyqt5-sip-flags', pyqt5_sip_flags),
         ('sip-inc', sip_inc),
@@ -62,6 +63,11 @@
     return pkg_cfg['pyqt_sip_dir']
 
 
+def pyqt5_sip(args):
+    import sipconfig
+    return os.path.join(sipconfig._pkg_config['default_sip_dir'], 'PyQt5')
+
+
 def pyqt5_sip_flags(args):
     import PyQt5.Qt
     return PyQt5.Qt.PYQT_CONFIGURATION['sip_flags']
