--- liboauth-1.0.3/src/hash.c.orig	2013-10-04 14:02:50.000000000 +0100
+++ liboauth-1.0.3/src/hash.c	2021-04-15 22:14:11.951359925 +0100
@@ -1,18 +1,18 @@
 /*
- * hash algorithms used in OAuth 
+ * hash algorithms used in OAuth
  *
  * Copyright 2007-2012 Robin Gareus <robin@gareus.org>
- * 
+ *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
  * in the Software without restriction, including without limitation the rights
  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  * copies of the Software, and to permit persons to whom the Software is
  * furnished to do so, subject to the following conditions:
- * 
+ *
  * The above copyright notice and this permission notice shall be included in
  * all copies or substantial portions of the Software.
- * 
+ *
  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
@@ -20,7 +20,7 @@
  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  * THE SOFTWARE.
- * 
+ *
  */
 
 #if HAVE_CONFIG_H
@@ -196,7 +196,7 @@
   SECItem            der;
   char              *rv=NULL;
 
-  char *key = oauth_strip_pkcs(k, NS_PRIV_HEADER, NS_PRIV_TRAILER); 
+  char *key = oauth_strip_pkcs(k, NS_PRIV_HEADER, NS_PRIV_TRAILER);
   if (!key) return NULL;
 
   oauth_init_nss();
@@ -232,7 +232,7 @@
   SECItem            der;
   int                rv=0;
 
-  char *key = oauth_strip_pkcs(c, NS_CERT_HEADER, NS_CERT_TRAILER); 
+  char *key = oauth_strip_pkcs(c, NS_CERT_HEADER, NS_CERT_TRAILER);
   if (!key) return 0;
 
   oauth_init_nss();
@@ -244,7 +244,7 @@
   s = ATOB_ConvertAsciiToItem(&der, key);
   if (s != SECSuccess) goto looser;
   cert = __CERT_DecodeDERCertificate(&der, PR_TRUE, NULL);
-  SECITEM_FreeItem(&der, PR_FALSE); 
+  SECITEM_FreeItem(&der, PR_FALSE);
   if (!cert) goto looser;
   pkey = CERT_ExtractPublicKey(cert);
   if (!pkey) goto looser;
@@ -335,7 +335,7 @@
   return rv;
 }
 
-#else 
+#else
 /* use http://www.openssl.org/ for hash/sign */
 
 #ifdef _GNU_SOURCE
@@ -369,8 +369,8 @@
 char *oauth_sign_hmac_sha1_raw (const char *m, const size_t ml, const char *k, const size_t kl) {
   unsigned char result[EVP_MAX_MD_SIZE];
   unsigned int resultlen = 0;
-  
-  HMAC(EVP_sha1(), k, kl, 
+
+  HMAC(EVP_sha1(), k, kl,
       (unsigned char*) m, ml,
       result, &resultlen);
 
@@ -386,7 +386,7 @@
   unsigned char *sig = NULL;
   unsigned char *passphrase = NULL;
   unsigned int len=0;
-  EVP_MD_CTX md_ctx;
+  EVP_MD_CTX *md_ctx;
 
   EVP_PKEY *pkey;
   BIO *in;
@@ -402,21 +402,28 @@
   len = EVP_PKEY_size(pkey);
   sig = (unsigned char*)xmalloc((len+1)*sizeof(char));
 
-  EVP_SignInit(&md_ctx, EVP_sha1());
-  EVP_SignUpdate(&md_ctx, m, strlen(m));
-  if (EVP_SignFinal (&md_ctx, sig, &len, pkey)) {
+  md_ctx = EVP_MD_CTX_new();
+  if (md_ctx == NULL) {
+    return "";
+  }
+
+  EVP_SignInit(md_ctx, EVP_sha1());
+  EVP_SignUpdate(md_ctx, m, strlen(m));
+  if (EVP_SignFinal (md_ctx, sig, &len, pkey)) {
     char *tmp;
     sig[len] = '\0';
     tmp = oauth_encode_base64(len,sig);
     OPENSSL_free(sig);
     EVP_PKEY_free(pkey);
+    EVP_MD_CTX_free(md_ctx);
     return tmp;
   }
+  EVP_MD_CTX_free(md_ctx);
   return xstrdup("liboauth/OpenSSL: rsa-sha1 signing failed");
 }
 
 int oauth_verify_rsa_sha1 (const char *m, const char *c, const char *s) {
-  EVP_MD_CTX md_ctx;
+  EVP_MD_CTX *md_ctx;
   EVP_PKEY *pkey;
   BIO *in;
   X509 *cert = NULL;
@@ -426,7 +433,7 @@
   in = BIO_new_mem_buf((unsigned char*)c, strlen(c));
   cert = PEM_read_bio_X509(in, NULL, 0, NULL);
   if (cert)  {
-    pkey = (EVP_PKEY *) X509_get_pubkey(cert); 
+    pkey = (EVP_PKEY *) X509_get_pubkey(cert);
     X509_free(cert);
   } else {
     pkey = PEM_read_bio_PUBKEY(in, NULL, 0, NULL);
@@ -440,50 +447,61 @@
   b64d= (unsigned char*) xmalloc(sizeof(char)*strlen(s));
   slen = oauth_decode_base64(b64d, s);
 
-  EVP_VerifyInit(&md_ctx, EVP_sha1());
-  EVP_VerifyUpdate(&md_ctx, m, strlen(m));
-  err = EVP_VerifyFinal(&md_ctx, b64d, slen, pkey);
-  EVP_MD_CTX_cleanup(&md_ctx);
+  md_ctx = EVP_MD_CTX_new();
+  if (md_ctx == NULL) {
+    return -2;
+  }
+
+  EVP_VerifyInit(md_ctx, EVP_sha1());
+  EVP_VerifyUpdate(md_ctx, m, strlen(m));
+  err = EVP_VerifyFinal(md_ctx, b64d, slen, pkey);
   EVP_PKEY_free(pkey);
+  EVP_MD_CTX_free(md_ctx);
   xfree(b64d);
   return (err);
 }
 
 
-/** 
+/**
  * http://oauth.googlecode.com/svn/spec/ext/body_hash/1.0/oauth-bodyhash.html
  */
 char *oauth_body_hash_file(char *filename) {
   unsigned char fb[BUFSIZ];
-  EVP_MD_CTX ctx;
+  EVP_MD_CTX *ctx;
   size_t len=0;
   unsigned char *md;
   FILE *F= fopen(filename, "r");
   if (!F) return NULL;
 
-  EVP_MD_CTX_init(&ctx);
-  EVP_DigestInit(&ctx,EVP_sha1());
+  ctx = EVP_MD_CTX_new();
+  if (ctx == NULL) {
+    return "";
+  }
+  EVP_DigestInit(ctx,EVP_sha1());
   while (!feof(F) && (len=fread(fb,sizeof(char),BUFSIZ, F))>0) {
-    EVP_DigestUpdate(&ctx, fb, len);
+    EVP_DigestUpdate(ctx, fb, len);
   }
   fclose(F);
   len=0;
   md=(unsigned char*) xcalloc(EVP_MD_size(EVP_sha1()),sizeof(unsigned char));
-  EVP_DigestFinal(&ctx, md,(unsigned int*) &len);
-  EVP_MD_CTX_cleanup(&ctx);
+  EVP_DigestFinal(ctx, md,(unsigned int*) &len);
+  EVP_MD_CTX_free(ctx);
   return oauth_body_hash_encode(len, md);
 }
 
 char *oauth_body_hash_data(size_t length, const char *data) {
-  EVP_MD_CTX ctx;
+  EVP_MD_CTX *ctx;
   size_t len=0;
   unsigned char *md;
   md=(unsigned char*) xcalloc(EVP_MD_size(EVP_sha1()),sizeof(unsigned char));
-  EVP_MD_CTX_init(&ctx);
-  EVP_DigestInit(&ctx,EVP_sha1());
-  EVP_DigestUpdate(&ctx, data, length);
-  EVP_DigestFinal(&ctx, md,(unsigned int*) &len);
-  EVP_MD_CTX_cleanup(&ctx);
+  ctx = EVP_MD_CTX_new();
+  if (ctx == NULL) {
+    return "";
+  }
+  EVP_DigestInit(ctx,EVP_sha1());
+  EVP_DigestUpdate(ctx, data, length);
+  EVP_DigestFinal(ctx, md,(unsigned int*) &len);
+  EVP_MD_CTX_free(ctx);
   return oauth_body_hash_encode(len, md);
 }
 
