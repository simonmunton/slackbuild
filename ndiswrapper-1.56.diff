--- ndiswrapper-1.56/driver/win2lin_stubs.S.orig	2010-02-11 02:09:32.000000000 +0000
+++ ndiswrapper-1.56/driver/win2lin_stubs.S	2010-05-02 11:39:37.000000000 +0100
@@ -103,14 +103,14 @@
 # for n > 4. But in prolog, we push 2 registers that are non-volaile in
 # Windows, but volatile in Linux. So after prolog, args are at (n+2)*8(%rsp)
 
-#define win2lin_win_arg(n) (n+2)*8(%rsp)
+#define win2lin_win_arg(n,m) (n+2 + (m-6))*8(%rsp)
 
 #define win2lin_arg1 mov %rcx, %rdi
 #define win2lin_arg2 mov %rdx, %rsi
 #define win2lin_arg3 mov %r8, %rdx
 #define win2lin_arg4 mov %r9, %rcx
-#define win2lin_arg5 mov win2lin_win_arg(5), %r8
-#define win2lin_arg6 mov win2lin_win_arg(6), %r9
+#define win2lin_arg5 mov win2lin_win_arg(5,6), %r8
+#define win2lin_arg6 mov win2lin_win_arg(6,6), %r9
 
 	.type	win2lin0, @function
 win2lin0:
@@ -193,9 +193,11 @@
 # First 6 args are passed through registers, so we need space for 7 and above.
 # The arguments should have been copied onto stack already.
 
-.macro call_lin_func_args n
+.macro reserve_stack n
 	sub $(\n-6)*8, %rsp
-	call_lin_func
+	.endm
+
+.macro free_stack n
 	add $(\n-6)*8, %rsp
 	.endm
 
@@ -205,7 +207,7 @@
 # Stack frame starts at -(n-6)*8(%rsp), so before stack frame is allocated
 # Linux arg m should be at (6-n+m-7)*8(%rsp)
 
-#define win2lin_lin_arg(m,n) (m-1-n)*8(%rsp)
+#define win2lin_lin_arg(m) (m-7)*8(%rsp)
 
 	.type	win2lin7, @function
 win2lin7:
@@ -218,11 +220,16 @@
 	win2lin_arg5
 	win2lin_arg6
 
+	reserve_stack(7)
+
 	# copy windows argument 7 onto stack for Linux function
-	mov	win2lin_win_arg(7), %r11
-	mov	%r11, win2lin_lin_arg(7,7)
+	mov	win2lin_win_arg(7,7), %r11
+	mov	%r11, win2lin_lin_arg(7)
+
+	call_lin_func
+	
+	free_stack(7)
 
-	call_lin_func_args(7)
 	win2lin_epilog
 	ret
 	.size	win2lin7, .-win2lin7
@@ -238,29 +245,41 @@
 	win2lin_arg5
 	win2lin_arg6
 
+	reserve_stack(8)
+
 	# copy windows arguments 7 and 8 onto stack for Linux function
-	mov	win2lin_win_arg(7), %r11
-	mov	%r11, win2lin_lin_arg(7,8)
-	mov	win2lin_win_arg(8), %r11
-	mov	%r11, win2lin_lin_arg(8,8)
+        mov	win2lin_win_arg(7,8), %r11
+        mov	%r11, win2lin_lin_arg(7)
+        mov	win2lin_win_arg(8,8), %r11
+	mov	%r11, win2lin_lin_arg(8)
+
+	call_lin_func
+
+	free_stack(8)
 
-	call_lin_func_args(8)
 	win2lin_epilog
 	ret
 	.size	win2lin8, .-win2lin8
 
 	.type	win2lin9, @function
-win2lin9:
+
+ENTRY(win2lin9)
 win2lin10:
 win2lin11:
 win2lin12:
 	win2lin_prolog
 
+	# must be done before reserving stack space
+	win2lin_arg5
+	win2lin_arg6
+
+	reserve_stack(12)
+
 	# since we destroy rsi and rdi here, first copy windows
 	# arguments 7 through 12 onto stack for Linux function
 	mov	%rcx, %r11		# save rcx
-	lea	win2lin_win_arg(7), %rsi	# source (windows arg 7 and up)
-	lea	win2lin_lin_arg(7,12), %rdi	# = destination
+	lea	win2lin_win_arg(7,12), %rsi	# source (windows arg 7 and up)
+	lea	win2lin_lin_arg(7), %rdi	# = destination
 	mov	$6, %rcx			# 6 arguments
 	rep
 	movsq
@@ -270,10 +289,11 @@
 	win2lin_arg2
 	win2lin_arg3
 	win2lin_arg4
-	win2lin_arg5
-	win2lin_arg6
+	
+	call_lin_func
+
+	free_stack(12)
 
-	call_lin_func_args(12)
 	win2lin_epilog
 	ret
 	.size	win2lin9, .-win2lin9
