#!/bin/bash
#
. build_funcs

TARNAME=gpsim
TARNAMEEXTRA=
TARSEP="-"
TARDIR=${SOURCE}/g
#TAR_EXT=.tar.gz
VERSION=r2539
VERSIONEXTRA=
BUILD=1

WEBPAGE="http://gpsim.sourceforge.net/"

#TAR_PROG=
#TAR_OPTS=
#PKGNAME=
#PKGVERSION=
#BUILD_SUFFIX=
#ARCH=noarch


FULL_TARNAME=${TARDIR}/${TARNAME}${TARNAMEEXTRA}${TARSEP}${VERSION}${VERSIONEXTRA}${TAR_EXT}

pre_unpack

PKG=/tmp/package-${PKGNAME}

if [ ! -f ${FULL_TARNAME} ]
then
  echo Can\'t find ${FULL_TARNAME}
  exit
fi

if [ ! -d ${TARNAME}-${VERSION} ]
then
${TAR_PROG} ${TAR_OPTS} ${FULL_TARNAME}
#mv ${TARNAME}-${VERSION} ${TARNAME}-${VERSION}

if [ ! -d ${TARNAME}-${VERSION} ]
then
  echo "${TARNAME}-${VERSION} directory not found"
  exit
fi

(cd ${TARNAME}-${VERSION}
 patch -p1 < ${CWD}/gpsim-0001-Fix-various-crashes.patch
 patch -p1 < ${CWD}/gpsim-0002-Fix-detection-of-subtree-row.patch
 patch -p1 < ${CWD}/gpsim-0003-Fix-losing-old-stc-file-if-crash-when-writing-new-on.patch
 patch -p1 < ${CWD}/gpsim-0004-Fix-getting-address-to-set-breakpoint-at.patch
 patch -p1 < ${CWD}/gpsim-0005-Limit-closest-distance-picking.patch

 if [ ! -f ./configure ]
 then
  (. ./autogen.sh)
 fi
)
fi

pre_configure

cd ${TARNAME}-${VERSION}

fix_perms

PKGCFLAGS="-O2 -march=i686 ${CPUOPT}=i686"

if [ ${DO_CONFIGURE} == "yes" ]
then
if [ -f ./configure ]
then
CFLAGS="${SLKCFLAGS} -O0 -ggdb" \
CXXFLAGS="${SLKCFLAGS} -O0 -ggdb" \
./configure --prefix=/usr \
            --sysconfdir=/etc \
            --libdir=/usr/lib${LIBDIRSUFFIX} \
            --localstatedir=/var/lib \
	    --mandir=/usr/man
elif [ -f ./CMakeLists.txt ]
then
cmake -DCMAKE_C_FLAGS:STRING="${SLKCFLAGS}" \
      -DCMAKE_CXX_FLAGS:STRING="${SLKCFLAGS}" \
      -DCMAKE_BUILD_TYPE=Release \
      -DCMAKE_INSTALL_PREFIX=/usr \
      -DMAN_INSTALL_DIR=/usr/man \
      -DLIB_SUFFIX=${LIBDIRSUFFIX} \
      -DSYSCONF_INSTALL_DIR=/etc \
      .
elif [ -f ./meson.build ]
then
  meson --prefix=/usr _BuilD_
fi

fi

if [ ${DO_MAKE} == "yes" ]
then
if [ -f ./meson.build ]
then
  ninja -C _BuilD_ || exit
else
  make ${NUM_JOBS} || exit
fi
fi

if [ ${DO_INSTALL} != "yes" ]
then
  exit
fi

if [ -f ./meson.build ]
then
  DESTDIR=${PKG} ninja -C _BuilD_ install
else
  make install DESTDIR=${PKG}
fi

#strip_binaries

fix_links

compress_manpages

compress_info

cp -a \
  AUTHORS COPYING* INSTALL NEWS PLANS README* TODO \
  ${PKG}/usr/doc/${TARNAME}-${VERSION}

fix_docs

#-----handy-ruler-for-slack-desc-width-------------------------------|
make_slack_desc << EOF "software simulator for Microchip PIC microcontrollers"
gpsim is a full-featured software simulator for Microchip PIC 
microcontrollers distributed under the GNU General Public License, 
Version 2 or higher, and some of it's libraries under GNU Lesser 
General Public License, Version 2 or higher.

gpsim has been designed to be as accurate as possible. Accuracy 
includes the entire PIC - from the core to the I/O pins and including 
ALL of the internal peripherals. Thus it's possible to create stimuli 
and tie them to the I/O pins and test the PIC the same 
way you would in the real world.

EOF

post_install

cd ${PKG}
su -c "chown -R root:root ${PKG}; \
find . -type d -exec chmod 755 {} \; ; \
makepkg -l y -c n ${PKGDIR}${PKGNAME}-${PKGVERSION}-${ARCH}-${BUILD}${BUILD_SUFFIX}.tgz; \
chown -R ${USERNAME}:${GROUP} ${PKG}"
