#!/bin/bash
#
. build_funcs

TARNAME=llvm
TARNAMEEXTRA=
TARSEP="-"
TARDIR=~/tmp/new/l/llvm
#TAR_EXT=.tar.gz
VERSION=7.0.1
VERSIONEXTRA=.src
BUILD=1

WEBPAGE="http://llvm.org/"

#TAR_PROG=
#TAR_OPTS=
#PKGNAME=
#PKGVERSION=
#BUILD_SUFFIX=
#ARCH=noarch


FULL_TARNAME=${TARDIR}/${TARNAME}${TARNAMEEXTRA}${TARSEP}${VERSION}${VERSIONEXTRA}${TAR_EXT}

pre_unpack

PKG=/tmp/package-${PKGNAME}

if [ ! -f ${FULL_TARNAME} ]
then
  echo Can\'t find ${FULL_TARNAME}
  exit
fi

if [ ! -d ${TARNAME}-${VERSION} ]
then 
${TAR_PROG} ${TAR_OPTS} ${FULL_TARNAME}
mv ${TARNAME}-${VERSION}.src ${TARNAME}-${VERSION}

if [ ! -d ${TARNAME}-${VERSION} ]
then 
  echo "${TARNAME}-${VERSION} directory not found"
  exit
fi

(cd ${TARNAME}-${VERSION}
 (cd tools
  tar xf ${TARDIR}/cfe-${VERSION}.src.tar.xz
  mv cfe* clang

  tar xvf ${TARDIR}/lldb-${VERSION}.src.tar.xz
  mv lldb-${VERSION}* lldb
 )

 (cd tools/clang/tools
  tar xvf ${TARDIR}/clang-tools-extra-${VERSION}.src.tar.xz
  mv clang-tools-extra-${VERSION}* extra
 )

 (cd projects
  tar xvf ${TARDIR}/compiler-rt-${VERSION}.src.tar.xz
  mv compiler-rt-${VERSION}* compiler-rt

  tar xvf ${TARDIR}/openmp-${VERSION}.src.tar.xz
  mv openmp-${VERSION}* openmp

  tar xvf ${TARDIR}/libcxx-${VERSION}.src.tar.xz
  mv libcxx-${VERSION}* libcxx

  tar xvf ${TARDIR}/libcxxabi-${VERSION}.src.tar.xz
  mv libcxxabi-${VERSION}* libcxxabi
 )

 patch -p0 < ${CWD}/llvm-n_clang_allow_BUILD_SHARED_LIBRARY.patch

 if [ -n "${LIBDIRSUFFIX}" ]
 then
#   patch -p1 -b -z .orig < ${CWD}/llvm-3.2-x86_64.diff

#   sed -i "/^PROJ_libdir/ s@/lib@/lib${LIBDIRSUFFIX}@" Makefile.config.in
#   sed -i "s@\$(PROJ_prefix)/lib@\$(PROJ_prefix)/lib$LIBDIRSUFFIX@" tools/clang/lib/Headers/Makefile
#   sed -i "s@\"lib\"@\"lib${LIBDIRSUFFIX}\"@" tools/clang/lib/Frontend/CompilerInvocation.cpp
#   sed -i "s@\"lib\"@\"lib${LIBDIRSUFFIX}\"@" tools/clang/lib/Driver/Tools.cpp
##   sed -i "/ActiveLibDir =/ s@/lib@/lib${LIBDIRSUFFIX}@g" tools/llvm-config/llvm-config.cpp
#   sed -i "/LibDir / s@/lib@/lib${LIBDIRSUFFIX}@; s@/lib/@/lib${LIBDIRSUFFIX}/@; /RPATH/ s@/lib@/lib${LIBDIRSUFFIX}@" Makefile.rules
 :
 fi
)
fi

pre_configure

cd ${TARNAME}-${VERSION}

fix_perms

PKGCFLAGS="-O2 -march=i686 ${CPUOPT}=i686"

mkdir _BuilD_
cd  _BuilD_

if [ ${DO_CONFIGURE} == "yes" ]
then
if [ -f ./configure ]
then
CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
../configure --prefix=/usr \
            --sysconfdir=/etc \
            --libdir=/usr/lib${LIBDIRSUFFIX} \
            --localstatedir=/var/lib \
	    --mandir=/usr/man \
	    --enable-pic \
	    --enable-optimized \
	    --enable-shared \
	    --disable-assertions \
	    --with-python \
	    --with-clang-resource-dir="../lib${LIBDIRSUFFIX}/clang/${VERSION}"

#	    --enable-experimental-targets=R600 \

elif [ -f ../CMakeLists.txt ]
then
cmake -DCMAKE_C_FLAGS:STRING="${SLKCFLAGS}" \
      -DCMAKE_CXX_FLAGS:STRING="${SLKCFLAGS}" \
      -DCMAKE_INSTALL_PREFIX=/usr \
      -DLLVM_LIBDIR_SUFFIX=${LIBDIRSUFFIX} \
      -DMAN_INSTALL_DIR=/usr/man \
      -DSYSCONF_INSTALL_DIR=/etc \
      -DCMAKE_BUILD_TYPE=Release \
      -DBUILD_SHARED_LIBS=OFF \
      -DCLANG_BUILD_SHARED_LIBS=ON \
      -DLLVM_BUILD_LLVM_DYLIB=ON \
      -DLLVM_LINK_LLVM_DYLIB=ON \
      -DLLVM_ENABLE_RTTI=ON \
      -DLLVM_ENABLE_FFI=ON \
      -DLLVM_ENABLE_ASSERTIONS=OFF \
      -DLLVM_USE_OPROFILE=ON \
      -DLLVM_BINUTILS_INCDIR=/usr/include \
      -DCLANG_RESOURCE_DIR="../lib${LIBDIRSUFFIX}/clang/${VERSION}" \
      ..

     # -DCMAKE_C_COMPILER="clang" \
     # -DCMAKE_CXX_COMPILER="clang++" \
      #      -DBUILD_SHARED_LIBS=on \

fi

fi

if [ ${DO_MAKE} == "yes" ]
then
make ${NUM_JOBS} || exit
fi

if [ ${DO_INSTALL} != "yes" ]
then
  exit
fi

make install DESTDIR=${PKG}

cd ..

# install clang-static-analyzer
for i in ccc c++; do
  ln -s /usr/libexec/$i-analyzer \
    ${PKG}/usr/bin/$i-analyzer || exit 1
done

# Remove symlink to libgomp, which is already provided by gcc
rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/libgomp.so

# Install Python bindings
for pyver in 2.7 ; do
  mkdir -p "${PKG}/usr/lib${LIBDIRSUFFIX}/python$pyver/site-packages"
  cp -a tools/clang/bindings/python/clang "${PKG}/usr/lib${LIBDIRSUFFIX}/python$pyver/site-packages/"
done

# Remove bundled python-six
rm -f "${PKG}/usr/lib${LIBDIRSUFFIX}/python2.7/site-packages/six.py"

# Compile Python scripts
python -m compileall "${PKG}/usr/lib${LIBDIRSUFFIX}/python2.7/site-packages/clang"
python -O -m compileall "${PKG}/usr/lib${LIBDIRSUFFIX}/python2.7/site-packages/clang"
#python3 -m compileall "${PKG}/usr/lib${LIBDIRSUFFIX}/python3.6/site-packages/clang"
#python3 -O -m compileall "${PKG}/usr/lib${LIBDIRSUFFIX}/python3.6/site-packages/clang"
#python -m compileall "${PKG}/usr/lib${LIBDIRSUFFIX}/python2.7/site-packages/lldb"
#python -O -m compileall "${PKG}/usr/lib${LIBDIRSUFFIX}/python2.7/site-packages/lldb"
python -m compileall "${PKG}/usr/share/scan-view"
python -O -m compileall "${PKG}/usr/share/scan-view"
python -m compileall "${PKG}/usr/share/clang"
python -O -m compileall "${PKG}/usr/share/clang"
python -m compileall "${PKG}/usr/share/opt-viewer"
python -O -m compileall "${PKG}/usr/share/opt-viewer"


ln -s /usr/share/clang/clang-format-diff.py ${PKG}/usr/bin/clang-format-diff

if [ ! -d ${PKG}/usr/share/clang ]
then
  mkdir -p ${PKG}/usr/share/clang
  for f in clang-format-bbedit.applescript clang-format-diff.py clang-format-sublime.py clang-format.el clang-format.py
  do
    cp tools/clang/tools/clang-format/$f ${PKG}/usr/share/clang
  done
  cp tools/clang/tools/clang-format/git-clang-format ${PKG}/usr/bin
fi

if [ -f ${PKG}/usr/lib${LIBDIRSUFFIX}/libLLVM.so.${VERSION} ]
then
  ln -s libLLVM.so.${VERSION} ${PKG}/usr/lib${LIBDIRSUFFIX}/libLLVM-${VERSION}.so
fi

#for f in FileCheck not c-index-test count lli-child-target
#do
#  rm ${PKG}/usr/bin/$f
#done



sanitise_la_files ${PKG}/usr/lib${LIBDIRSUFFIX}

mv ${PKG}/usr/docs/llvm/* ${PKG}/usr/doc/${TARNAME}-${VERSION}

rmdir -p ${PKG}/usr/docs/llvm

#rm ${PKG}/usr/lib${LIBDIRSUFFIX}/LLVMHello*

strip_binaries

fix_links

compress_manpages

compress_info

cp -a \
  AUTHORS COPYING* INSTALL NEWS PLANS README* TODO \
  ${PKG}/usr/doc/${TARNAME}-${VERSION}

fix_docs

rmdir -p ${PKG}/usr/share

#-----handy-ruler-for-slack-desc-width-------------------------------|
make_slack_desc << EOF "The Low Level Virtual Machine (An Optimizing Compiler Infrastructure)"
LLVM is a compiler infrastructure designed for compile-time, link-
time, runtime, and idle-time optimization of programs from arbitrary 
programming languages. LLVM is written in C++ and has been developed 
since 2000 at the University of Illinois and Apple. It currently 
supports compilation of C and C++ programs, using front-ends derived 
from GCC 4.0.1. A new front-end for the C family of languages is in 
development. The compiler infrastructure includes mirror sets of 
programming tools as well as libraries with equivalent functionality.

EOF

post_install

cd ${PKG}
su -c "chown -R root.root ${PKG}; \
find . -type d -exec chmod 755 {} \; ; \
makepkg -l y -c n ${PKGDIR}${PKGNAME}-${PKGVERSION}-${ARCH}-${BUILD}${BUILD_SUFFIX}.tgz; \
chown -R ${USERNAME}.${GROUP} ${PKG}"
