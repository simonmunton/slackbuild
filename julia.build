#!/bin/bash
#
. build_funcs

TARNAME=julia
TARNAMEEXTRA=
TARSEP="-"
TARDIR=~/tmp/new/j
#TAR_EXT=.tar.gz
VERSION=1.6.6
VERSIONEXTRA=-full
BUILD=1

WEBPAGE="https://julialang.org/"

#TAR_PROG=
#TAR_OPTS=
#PKGNAME=
#PKGVERSION=
#BUILD_SUFFIX=
#ARCH=noarch


FULL_TARNAME=${TARDIR}/${TARNAME}${TARNAMEEXTRA}${TARSEP}${VERSION}${VERSIONEXTRA}${TAR_EXT}

pre_unpack

PKG=/tmp/package-${PKGNAME}

if [ ! -f ${FULL_TARNAME} ]
then
  echo Can\'t find ${FULL_TARNAME}
  exit
fi

if [ ! -d ${TARNAME}-${VERSION} ]
then 
${TAR_PROG} ${TAR_OPTS} ${FULL_TARNAME}
mv ${TARNAME} ${TARNAME}-${VERSION}

if [ ! -d ${TARNAME}-${VERSION} ]
then 
  echo "${TARNAME}-${VERSION} directory not found"
  exit
fi

(cd ${TARNAME}-${VERSION}
# patch -p1 -b -z .orig < ${CWD}/julia-1.0.1.diff
# patch -p1 -b -z .orig < ${CWD}/julia-1.0.2.diff
)
fi

pre_configure

cd ${TARNAME}-${VERSION}

fix_perms

PKGCFLAGS="-O2 -march=i686 ${CPUOPT}=i686"

if [ ${DO_CONFIGURE} == "yes" ]
then
if [ -f ./configure ]
then
CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
./configure --prefix=/usr \
            --sysconfdir=/etc \
            --libdir=/usr/lib${LIBDIRSUFFIX} \
            --localstatedir=/var/lib \
	    --mandir=/usr/man
elif [ -f ./CMakeLists.txt ]
then
cmake -DCMAKE_C_FLAGS:STRING="${SLKCFLAGS}" \
      -DCMAKE_CXX_FLAGS:STRING="${SLKCFLAGS}" \
      -DCMAKE_BUILD_TYPE=Release \
      -DCMAKE_INSTALL_PREFIX=/usr \
      -DMAN_INSTALL_DIR=/usr/man \
      -DLIB_SUFFIX=${LIBDIRSUFFIX} \
      -DSYSCONF_INSTALL_DIR=/etc \
      .
elif [ -f ./meson.build ]
then
  meson --prefix=/usr _BuilD_
fi

fi

MAKEFLAGS="prefix=/usr libdir=/usr/lib${LIBDIRSUFFIX} mandir=/usr/man sysconfdir=/etc docdir=/usr/doc/${TARNAME}-${VERSION}"

# gmp=0
MAKEOPTS="USE_SYSTEM_LIBSSH2=1 USE_SYSTEM_CURL=1 USE_SYSTEM_LIBGIT2=1 USE_SYSTEM_ZLIB=1 USE_SYSTEM_P7ZIP=1 \
          USE_SYSTEM_PCRE=1 USE_SYSTEM_UTF8PROC=1 USE_SYSTEM_LIBUV=0 USE_SYSTEM_PATCHELF=1 USE_SYSTEM_GMP=0 \
          USE_SYSTEM_MPFR=1 USE_SYSTEM_CSL=1 USE_SYSTEM_LLVM=0 USE_SYSTEM_LIBUNWIND=1 USE_SYSTEM_DSFMT=1 \
          USE_SYSTEM_BLAS=1 USE_SYSTEM_LAPACK=1 USE_SYSTEM_SUITESPARSE=1 USE_SYSTEM_MBEDTLS=1 \
          BUNDLE_DEBUG_LIBS=0 "

MAKEOPTS=""

if [ ${DO_MAKE} == "yes" ]
then
if [ -f ./meson.build ]
then
  ninja -C _BuilD_ || exit
else
  make ${NUM_JOBS} ${MAKEFLAGS} ${MAKEOPTS} || exit
fi
fi

if [ ${DO_INSTALL} != "yes" ]
then
  exit
fi

if [ -f ./meson.build ]
then
  DESTDIR=${PKG} ninja -C _BuilD_ install
else
  make install DESTDIR=${PKG} ${MAKEFLAGS} ${MAKEOPTS}
fi

#strip_binaries

# stripping this file gives a
#   libsuitesparse_wrapper.so: ELF load command address/offset not properly aligned
# so copy an unstripped version over
cp usr/lib/libsuitesparse_wrapper.so ${PKG}/usr/lib${LIBDIRSUFFIX}/julia

fix_links

compress_manpages

compress_info

cp -a \
  AUTHORS COPYING* INSTALL NEWS PLANS README* TODO \
  ${PKG}/usr/doc/${TARNAME}-${VERSION}

fix_docs

#-----handy-ruler-for-slack-desc-width-------------------------------|
make_slack_desc << EOF "The Julia Programming Language"
Julia was designed from the beginning for high performance. Julia 
programs compile to efficient native code for multiple platforms via 
LLVM.

EOF

post_install

cd ${PKG}
su -c "chown -R root:root ${PKG}; \
find . -type d -exec chmod 755 {} \; ; \
makepkg -l y -c n ${PKGDIR}${PKGNAME}-${PKGVERSION}-${ARCH}-${BUILD}${BUILD_SUFFIX}.tgz; \
chown -R ${USERNAME}:${GROUP} ${PKG}"
