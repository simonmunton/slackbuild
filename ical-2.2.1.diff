--- ical-2.2.1/configure.in.orig	1997-10-22 00:52:58.000000000 +0100
+++ ical-2.2.1/configure.in	2006-12-07 11:37:41.000000000 +0000
@@ -68,8 +68,8 @@
 # Find Tcl/Tk
 
 AC_CHECKING(Tcl/Tk installation)
-legal_tk_versions="8.0 4.9 4.8 4.7 4.6 4.5 4.4 4.3 4.2 4.1"
-legal_tcl_versions="8.0 7.9 7.8 7.7 7.6 7.5"
+legal_tk_versions="8.5 8.4 8.3 8.2 8.0 4.9 4.8 4.7 4.6 4.5 4.4 4.3 4.2 4.1"
+legal_tcl_versions="8.5 8.4 8.3 8.2 8.0 7.9 7.8 7.7 7.6 7.5"
 
 #### Find tclsh
 AC_ARG_WITH(tclsh,[  --with-tclsh=<path>     full path name of tclsh],
@@ -140,6 +140,10 @@
 . $tclconfig/tclConfig.sh
 . $tkconfig/tkConfig.sh
 
+eval TCL_LIB_FILE=${TCL_LIB_FILE}
+eval TCL_LIB_FLAG=${TCL_LIB_FLAG}
+eval TK_LIB_FILE=${TK_LIB_FILE}
+
 if test -z "$TCL_EXEC_PREFIX"; then TCL_EXEC_PREFIX="$TCL_PREFIX"; fi
 if test -z "$TK_EXEC_PREFIX"; then TK_EXEC_PREFIX="$TK_PREFIX"; fi
 
@@ -328,7 +332,7 @@
 AC_CACHE_VAL(ical_cv_proto_$1,[
 AC_TRY_RUN([
 #include <$2>
-static void* ptr = &$1;
+static void* ptr = (void*) &$1;
 int main() {return 0;}
 ],ical_cv_proto_$1=yes,ical_cv_proto_$1=no,ical_cv_proto_$1=no)])
 AC_MSG_RESULT($ical_cv_proto_$1)
@@ -337,17 +341,19 @@
    fi])dnl
 
 ICAL_CHECK_PROTO(strerror,string.h)
-ICAL_CHECK_PROTO(sys_errlist,errno.h)
+ICAL_CHECK_PROTO(sys_errlist,stdio.h)
 ICAL_CHECK_PROTO(gettimeofday,sys/time.h)
 ICAL_CHECK_PROTO(gethostname,unistd.h)
 ICAL_CHECK_PROTO(getpid,unistd.h)
-ICAL_CHECK_PROTO(strncasecmp,string.h)
+ICAL_CHECK_PROTO(strncasecmp,strings.h)
 ICAL_CHECK_PROTO(gethostid,unistd.h)
 
 # gethostid
 AC_MSG_CHECKING(for working gethostid)
 AC_TRY_RUN([/* check for working gethostid */
-#ifndef HAVE_GETHOSTID_PROTO
+#ifdef HAVE_GETHOSTID_PROTO
+#include <unistd.h>
+#else
 extern "C" long gethostid(void);
 #endif
 int main() {
--- ical-2.2.1/cal_tcl.C.orig	2000-06-30 14:23:29.000000000 +0100
+++ ical-2.2.1/cal_tcl.C	2006-12-07 11:53:18.000000000 +0000
@@ -214,28 +214,30 @@
 static int cal_loopf	(ClientData, Tcl_Interp*, int, char*[]);
 static int cal_loopb	(ClientData, Tcl_Interp*, int, char*[]);
 
+typedef int (*disp_fp) (ClientData, Tcl_Interp*, int, const char*[]);
+
 static Dispatch_Entry calendar_dispatch[] = {
-    { "delete",		0, 0, cal_delete	},
-    { "main",		0, 0, cal_main		},
-    { "include",	1, 1, cal_include	},
-    { "exclude",	1, 1, cal_exclude	},
-    { "forincludes",	2, 2, cal_forincs	},
-    { "add",		1, 2, cal_add		},
-    { "remove",		1, 1, cal_remove	},
-    { "hide",		1, 1, cal_hide		},
-    { "readonly",	0, 1, cal_ronly		},
-    { "dirty",		0, 1, cal_dirty		},
-    { "stale",		0, 1, cal_stale		},
-    { "save",		0, 1, cal_save		},
-    { "reread",		0, 1, cal_reread	},
-    { "query",		5, 7, cal_query		},
-    { "listing",	5, 7, cal_listing	},
-    { "loop",		2, 4, cal_loop		},
-    { "incalendar",	3, 3, cal_incal		},
-    { "option",		1, 4, cal_option	},
-    { "delete_option",	1, 3, cal_doption	},
-    { "loop_forward",	5, 7, cal_loopf		},
-    { "loop_backward",	5, 7, cal_loopb		},
+    { "delete",		0, 0, (disp_fp) cal_delete	},
+    { "main",		0, 0, (disp_fp) cal_main		},
+    { "include",	1, 1, (disp_fp) cal_include	},
+    { "exclude",	1, 1, (disp_fp) cal_exclude	},
+    { "forincludes",	2, 2, (disp_fp) cal_forincs	},
+    { "add",		1, 2, (disp_fp) cal_add		},
+    { "remove",		1, 1, (disp_fp) cal_remove	},
+    { "hide",		1, 1, (disp_fp) cal_hide		},
+    { "readonly",	0, 1, (disp_fp) cal_ronly		},
+    { "dirty",		0, 1, (disp_fp) cal_dirty		},
+    { "stale",		0, 1, (disp_fp) cal_stale		},
+    { "save",		0, 1, (disp_fp) cal_save		},
+    { "reread",		0, 1, (disp_fp) cal_reread	},
+    { "query",		5, 7, (disp_fp) cal_query		},
+    { "listing",	5, 7, (disp_fp) cal_listing	},
+    { "loop",		2, 4, (disp_fp) cal_loop		},
+    { "incalendar",	3, 3, (disp_fp) cal_incal		},
+    { "option",		1, 4, (disp_fp) cal_option	},
+    { "delete_option",	1, 3, (disp_fp) cal_doption	},
+    { "loop_forward",	5, 7, (disp_fp) cal_loopf		},
+    { "loop_backward",	5, 7, (disp_fp) cal_loopb		},
     { 0,		0, 0, 0			}
 };
 
@@ -282,7 +284,7 @@
 
     if ((argc >= 2) && (strcmp(argv[0], "-items") == 0)) {
 	int count;
-	char** list;
+	const char** list;
 	if (Tcl_SplitList(tcl, argv[1], &count, &list) != TCL_OK) {
 	    TCL_Error(tcl, "invalid item list");
 	}
@@ -517,7 +519,7 @@
 	TCL_Error(tcl, "no such calendar");
     }
 
-    TCL_Return(tcl, file->GetCalendar()->ReadOnly() ? "1" : "0");
+    TCL_Return(tcl, (char *) (file->GetCalendar()->ReadOnly() ? "1" : "0"));
 }
 
 static int cal_dirty(ClientData c, Tcl_Interp* tcl, int argc, char* argv[]){
@@ -528,7 +530,7 @@
 	TCL_Error(tcl, "no such calendar");
     }
 
-    TCL_Return(tcl, (file->IsModified() ? "1" : "0"));
+    TCL_Return(tcl, (char *)((file->IsModified() ? "1" : "0")));
 }
 
 static int cal_stale(ClientData c, Tcl_Interp* tcl, int argc, char* argv[]){
@@ -539,7 +541,7 @@
 	TCL_Error(tcl, "no such calendar");
     }
 
-    TCL_Return(tcl, (file->FileHasChanged() ? "1" : "0"));
+    TCL_Return(tcl, (char *)((file->FileHasChanged() ? "1" : "0")));
 }
 
 static int cal_save(ClientData c, Tcl_Interp* tcl, int argc, char* argv[]){
--- ical-2.2.1/dateeditor.C.orig	1996-02-10 03:17:35.000000000 +0000
+++ ical-2.2.1/dateeditor.C	2006-12-07 11:53:48.000000000 +0000
@@ -113,7 +113,7 @@
     }
 
     int count;
-    char** strlist;
+    const char** strlist;
     if (Tcl_SplitList(tcl, argv[2], &count, &strlist) != TCL_OK) {
 	return TCL_ERROR;
     }
--- ical-2.2.1/dispatch.C.orig	1994-05-20 04:21:54.000000000 +0100
+++ ical-2.2.1/dispatch.C	2006-12-07 11:55:05.000000000 +0000
@@ -24,7 +24,7 @@
 	    if ((entry->max_arg_count >= 0) && (argc > entry->max_arg_count)) {
 		TCL_Error(tcl, "too many arguments");
 	    }
-	    return entry->handler(c, tcl, argc, argv);
+	    return entry->handler(c, tcl, argc, (const char **)argv);
 	}
     }
 
--- ical-2.2.1/item_tcl.C.orig	1996-08-01 20:25:10.000000000 +0100
+++ ical-2.2.1/item_tcl.C	2006-12-07 11:58:27.000000000 +0000
@@ -105,53 +105,55 @@
 static int item_mweekday	(ClientData, Tcl_Interp*, int, char*[]);
 static int item_mlweekday	(ClientData, Tcl_Interp*, int, char*[]);
 
+typedef int (*disp_fp) (ClientData, Tcl_Interp*, int, const char*[]);
+
 static Dispatch_Entry item_dispatch[] = {
-    { "delete",			0, 0, item_delete	},
-    { "clone",			0, 0, item_clone	},
+    { "delete",			0, 0, (disp_fp) item_delete	},
+    { "clone",			0, 0, (disp_fp) item_clone	},
 
-    { "length",			0, 1, item_length	},
-    { "starttime",		0, 1, item_startt	},
-    { "alarms",			0, 1, item_alarms	},
-    { "option",			1, 2, item_option	},
-    { "delete_option",		1, 1, item_doption	},
-
-    { "is",			1, 1, item_is		},
-    { "calendar",		0, 0, item_cal		},
-    { "text",			0, 1, item_text		},
-    { "uid",			0, 0, item_uid		},
-    { "earlywarning",		0, 1, item_early	},
-    { "owner",			0, 1, item_owner	},
-    { "owned",			0, 0, item_owned	},
-    { "own",			0, 0, item_own		},
-    { "hilite",			0, 1, item_hilite	},
-    { "todo",			0, 1, item_todo		},
-    { "is_done",		0, 0, item_is_done	},
-    { "done",			1, 1, item_done		},
-
-    { "contains",		1, 1, item_cont		},
-    { "empty",			0, 0, item_empty	},
-    { "repeats",		0, 0, item_repeat	},
-    { "first",			0, 0, item_first	},
-    { "next",			1, 1, item_next		},
-    { "range",			2, 2, item_range	},
-    { "type",			0, 0, item_type		},
-    { "describe_repeat",	0, 0, item_desc		},
-
-    { "date",			1, 1, item_date		},
-    { "dayrepeat",		2, 2, item_dayr		},
-
-    { "monthrepeat",		2, 2, item_monthr	},
-    { "month_day",		1, 3, item_mday		},
-    { "month_last_day",		1, 3, item_mlday	},
-    { "month_work_day",		1, 3, item_mworkday	},
-    { "month_last_work_day",	1, 3, item_mlworkday	},
-    { "month_week_day",		2, 4, item_mweekday	},
-    { "month_last_week_day",	2, 4, item_mlweekday	},
-
-    { "weekdays",		0, -1, item_wdays	},
-    { "start",			1, 1, item_start	},
-    { "finish",			1, 1, item_finish	},
-    { "deleteon",		1, 1, item_ondel	},
+    { "length",			0, 1, (disp_fp) item_length	},
+    { "starttime",		0, 1, (disp_fp) item_startt	},
+    { "alarms",			0, 1, (disp_fp) item_alarms	},
+    { "option",			1, 2, (disp_fp) item_option	},
+    { "delete_option",		1, 1, (disp_fp) item_doption	},
+
+    { "is",			1, 1, (disp_fp) item_is		},
+    { "calendar",		0, 0, (disp_fp) item_cal		},
+    { "text",			0, 1, (disp_fp) item_text		},
+    { "uid",			0, 0, (disp_fp) item_uid		},
+    { "earlywarning",		0, 1, (disp_fp) item_early	},
+    { "owner",			0, 1, (disp_fp) item_owner	},
+    { "owned",			0, 0, (disp_fp) item_owned	},
+    { "own",			0, 0, (disp_fp) item_own		},
+    { "hilite",			0, 1, (disp_fp) item_hilite	},
+    { "todo",			0, 1, (disp_fp) item_todo		},
+    { "is_done",		0, 0, (disp_fp) item_is_done	},
+    { "done",			1, 1, (disp_fp) item_done		},
+
+    { "contains",		1, 1, (disp_fp) item_cont		},
+    { "empty",			0, 0, (disp_fp) item_empty	},
+    { "repeats",		0, 0, (disp_fp) item_repeat	},
+    { "first",			0, 0, (disp_fp) item_first	},
+    { "next",			1, 1, (disp_fp) item_next		},
+    { "range",			2, 2, (disp_fp) item_range	},
+    { "type",			0, 0, (disp_fp) item_type		},
+    { "describe_repeat",	0, 0, (disp_fp) item_desc		},
+
+    { "date",			1, 1, (disp_fp) item_date		},
+    { "dayrepeat",		2, 2, (disp_fp) item_dayr		},
+
+    { "monthrepeat",		2, 2, (disp_fp) item_monthr	},
+    { "month_day",		1, 3, (disp_fp) item_mday		},
+    { "month_last_day",		1, 3, (disp_fp) item_mlday	},
+    { "month_work_day",		1, 3, (disp_fp) item_mworkday	},
+    { "month_last_work_day",	1, 3, (disp_fp) item_mlworkday	},
+    { "month_week_day",		2, 4, (disp_fp) item_mweekday	},
+    { "month_last_week_day",	2, 4, (disp_fp) item_mlweekday	},
+
+    { "weekdays",		0, -1, (disp_fp) item_wdays	},
+    { "start",			1, 1, (disp_fp) item_start	},
+    { "finish",			1, 1, (disp_fp) item_finish	},
+    { "deleteon",		1, 1, (disp_fp) item_ondel	},
 
     { 0,			0, 0, 0			}
 };
@@ -329,7 +331,7 @@
 
 static int item_owned(ClientData c, Tcl_Interp* tcl, int argc, char* argv[]) {
     Item_Tcl* item = (Item_Tcl*) c;
-    TCL_Return(tcl, (item->value()->IsMine() ? "1" : "0"));
+    TCL_Return(tcl, (char *)((item->value()->IsMine() ? "1" : "0")));
 }
 
 static int item_own(ClientData c, Tcl_Interp* tcl, int argc, char* argv[]) {
@@ -431,7 +433,7 @@
     }
 
     int count;
-    char** list;
+    const char** list;
     if (Tcl_SplitList(tcl, argv[0], &count, &list) != TCL_OK) {
 	TCL_Error(tcl, "invalid alarm list");
     }
@@ -492,12 +494,12 @@
 
 static int item_empty(ClientData c, Tcl_Interp* tcl, int argc, char* argv[]) {
     Item_Tcl* item = (Item_Tcl*) c;
-    TCL_Return(tcl, (item->value()->empty()?"1":"0"));
+    TCL_Return(tcl, (char *)(item->value()->empty()?"1":"0"));
 }
 
 static int item_repeat(ClientData c, Tcl_Interp* tcl, int argc, char* argv[]) {
     Item_Tcl* item = (Item_Tcl*) c;
-    TCL_Return(tcl,(item->value()->repeats()?"1":"0"));
+    TCL_Return(tcl,(char *)(item->value()->repeats()?"1":"0"));
 }
 
 static int item_first(ClientData c, Tcl_Interp* tcl, int argc, char* argv[]) {
@@ -576,7 +578,7 @@
 	TCL_Error(tcl, "invalid date");
     }
     Date date(dateDays);
-    TCL_Return(tcl, (item->value()->contains(date)?"1":"0"));
+    TCL_Return(tcl, (char *)(item->value()->contains(date)?"1":"0"));
 }
 
 static int item_next(ClientData c, Tcl_Interp* tcl, int argc, char* argv[]) {
--- ical-2.2.1/object.C.orig	1994-05-20 04:22:04.000000000 +0100
+++ ical-2.2.1/object.C	2006-12-07 12:01:49.000000000 +0000
@@ -8,7 +8,7 @@
 #include "ical.h"
 #include "object.h"
 
-static int obj_handle(ClientData, Tcl_Interp*, int, char*[]);
+static int obj_handle(ClientData, Tcl_Interp*, int, const char*[]);
 
 Object::Object(Tcl_Interp* t, char const* type) {
     /* Generate handle */
@@ -56,9 +56,9 @@
     TCL_Error(interp, "Object has no methods");
 }
 
-int obj_handle(ClientData c, Tcl_Interp* tcl, int argc, char* argv[]) {
+int obj_handle(ClientData c, Tcl_Interp* tcl, int argc, const char* argv[]) {
     Object* object = (Object*) c;
 
     assert(object->tcl() == tcl);
-    return object->method(argc, argv);
+    return object->method(argc, (char **)argv);
 }
--- ical-2.2.1/main.C.orig	1996-02-16 01:57:42.000000000 +0000
+++ ical-2.2.1/main.C	2006-12-07 12:03:05.000000000 +0000
@@ -228,6 +228,8 @@
 #define MAKE_BITMAP(tcl,id,n) \
 (Tk_DefineBitmap(tcl,Tk_GetUid(id),n##_bits,n##_width,n##_height) == TCL_OK)
 
+typedef int (*disp_fp) (ClientData, Tcl_Interp*, int, const char*[]);
+
 int Ical_Init(Tcl_Interp* tcl) {
     if (have_tk) {
 	/* Load necessary Tk support code */
@@ -255,14 +257,14 @@
 	return TCL_ERROR;
 
     // Non-Tk ical commands
-    Tcl_CreateCommand(tcl, "calendar",     Cmd_CreateCalendar,	NULL, NULL);
-    Tcl_CreateCommand(tcl, "notice",       Cmd_CreateNotice,	NULL, NULL);
-    Tcl_CreateCommand(tcl, "appointment",  Cmd_CreateAppt,	NULL, NULL);
-    Tcl_CreateCommand(tcl, "date",         Cmd_Date,		NULL, NULL);
-    Tcl_CreateCommand(tcl, "ical_time",    Cmd_Time,		NULL, NULL);
-    Tcl_CreateCommand(tcl, "de_monthdays", Cmd_MonthDays,	NULL, NULL);
-    Tcl_CreateCommand(tcl, "hilite_loop",  Cmd_HiliteLoop,	NULL, NULL);
-    Tcl_CreateCommand(tcl, "ical_expand_file_name", Cmd_ExpandFileName, 0, 0);
+    Tcl_CreateCommand(tcl, "calendar",     (disp_fp) Cmd_CreateCalendar,	NULL, NULL);
+    Tcl_CreateCommand(tcl, "notice",       (disp_fp) Cmd_CreateNotice,	NULL, NULL);
+    Tcl_CreateCommand(tcl, "appointment",  (disp_fp) Cmd_CreateAppt,	NULL, NULL);
+    Tcl_CreateCommand(tcl, "date",         (disp_fp) Cmd_Date,		NULL, NULL);
+    Tcl_CreateCommand(tcl, "ical_time",    (disp_fp) Cmd_Time,		NULL, NULL);
+    Tcl_CreateCommand(tcl, "de_monthdays", (disp_fp) Cmd_MonthDays,	NULL, NULL);
+    Tcl_CreateCommand(tcl, "hilite_loop",  (disp_fp) Cmd_HiliteLoop,	NULL, NULL);
+    Tcl_CreateCommand(tcl, "ical_expand_file_name", (disp_fp) Cmd_ExpandFileName, 0, 0);
 
 #ifdef STANDALONE
     // Load tcllib files
--- ical-2.2.1/Makefile.in.orig	2000-06-30 14:21:02.000000000 +0100
+++ ical-2.2.1/Makefile.in	2006-12-07 12:04:29.000000000 +0000
@@ -49,7 +49,7 @@
        LIB2 = time/libtime.a
        LIB3 = types/libtypes.a
        LIB4 = @TK_LIB_SPEC@ @TCL_LIB_SPEC@
-       LIBS = $(LIB1) $(LIB2) $(LIB3) $(LIB4) $(EXTRALIBS) $(X_LIBS) @TCL_LIBS@
+       LIBS = $(LIB1) $(LIB2) $(LIB3) $(LIB4) $(EXTRALIBS) $(X_LIBS)
 
 # XXX Make sure bundled executable uses static versions of tcl/tk libraries?
 #      BLIBS = $(LIB1) $(LIB2) $(LIB3)\
