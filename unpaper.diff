diff --git a/file.c b/file.c
index 18c6efa..6f16219 100644
--- a/file.c
+++ b/file.c
@@ -31,7 +31,8 @@ void loadImage(const char *filename, AVFrame **image) {
   AVFormatContext *s = NULL;
   AVCodecContext *avctx = avcodec_alloc_context3(NULL);
   AVCodec *codec;
-  AVPacket pkt;
+  AVCodecParameters *codec_params;
+  AVPacket *pkt = av_packet_alloc();
   AVFrame *frame = av_frame_alloc();
   char errbuff[1024];
 
@@ -52,16 +53,18 @@ void loadImage(const char *filename, AVFrame **image) {
   if (s->nb_streams < 1)
     errOutput("unable to open file %s: missing streams", filename);
 
-  if (s->streams[0]->codec->codec_type != AVMEDIA_TYPE_VIDEO)
+  codec_params = s->streams[0]->codecpar;
+
+  if (codec_params->codec_type != AVMEDIA_TYPE_VIDEO)
     errOutput("unable to open file %s: wrong stream", filename);
 
-  ret = avcodec_copy_context(avctx, s->streams[0]->codec);
+  ret = avcodec_parameters_to_context(avctx, codec_params);
   if (ret < 0) {
     av_strerror(ret, errbuff, sizeof(errbuff));
     errOutput("cannot set the new context for %s: %s", filename, errbuff);
   }
 
-  codec = avcodec_find_decoder(avctx->codec_id);
+  codec = avcodec_find_decoder(codec_params->codec_id);
   if (!codec)
     errOutput("unable to open file %s: unsupported format", filename);
 
@@ -71,21 +74,29 @@ void loadImage(const char *filename, AVFrame **image) {
     errOutput("unable to open file %s: %s", filename, errbuff);
   }
 
-  ret = av_read_frame(s, &pkt);
+  ret = av_read_frame(s, pkt);
   if (ret < 0) {
     av_strerror(ret, errbuff, sizeof(errbuff));
     errOutput("unable to open file %s: %s", filename, errbuff);
   }
 
-  if (pkt.stream_index != 0)
+  if (pkt->stream_index != 0)
     errOutput("unable to open file %s: invalid stream.", filename);
 
-  ret = avcodec_decode_video2(avctx, frame, &got_frame, &pkt);
+  ret = avcodec_send_packet(avctx, pkt);
   if (ret < 0) {
     av_strerror(ret, errbuff, sizeof(errbuff));
     errOutput("unable to open file %s: %s", filename, errbuff);
   }
 
+  ret = avcodec_receive_frame(avctx, frame);
+  if (ret < 0) {
+    av_strerror(ret, errbuff, sizeof(errbuff));
+    errOutput("unable to open file %s: %s", filename, errbuff);
+  }
+
+  av_packet_unref(pkt);
+
   switch (frame->format) {
   case AV_PIX_FMT_Y400A: // 8-bit grayscale PNG
   case AV_PIX_FMT_GRAY8:
@@ -114,6 +125,8 @@ void loadImage(const char *filename, AVFrame **image) {
 
   avcodec_close(avctx);
   av_free(avctx);
+  av_packet_free(&pkt);
+  av_frame_free(&frame);
   avformat_close_input(&s);
 }
 
@@ -133,6 +146,7 @@ void saveImage(char *filename, AVFrame *input, int outputPixFmt) {
   AVCodecContext *codec_ctx;
   AVStream *video_st;
   AVFrame *output = input;
+  AVPacket *packet;
   int ret;
   char errbuff[1024];
 
@@ -142,14 +156,11 @@ void saveImage(char *filename, AVFrame *input, int outputPixFmt) {
     errOutput("could not find suitable output format.");
   }
 
-  out_ctx = avformat_alloc_context();
+  avformat_alloc_output_context2(&out_ctx, NULL, NULL, filename);
   if (!out_ctx) {
     errOutput("unable to allocate output context.");
   }
 
-  out_ctx->oformat = fmt;
-  snprintf(out_ctx->filename, sizeof(out_ctx->filename), "%s", filename);
-
   switch (outputPixFmt) {
   case AV_PIX_FMT_RGB24:
     output_codec = AV_CODEC_ID_PPM;
@@ -176,20 +187,31 @@ void saveImage(char *filename, AVFrame *input, int outputPixFmt) {
     errOutput("output codec not found");
   }
 
-  video_st = avformat_new_stream(out_ctx, codec);
+  codec_ctx = avcodec_alloc_context3(codec);
+  if (!codec_ctx) {
+    errOutput("Could not allocate video codec context\n");
+  }
+
+  video_st = avformat_new_stream(out_ctx, NULL);
   if (!video_st) {
     errOutput("could not alloc output stream");
   }
 
-  codec_ctx = video_st->codec;
+  video_st->codecpar->codec_id = output_codec;
+  video_st->codecpar->width = output->width;
+  video_st->codecpar->height = output->height;
+
+//  codec_ctx = video_st->codec;
   codec_ctx->width = output->width;
   codec_ctx->height = output->height;
   codec_ctx->pix_fmt = output->format;
-  video_st->time_base.den = codec_ctx->time_base.den = 1;
-  video_st->time_base.num = codec_ctx->time_base.num = 1;
+  codec_ctx->time_base.den = 1;
+  codec_ctx->time_base.num = 1;
 
-  ret = avcodec_open2(codec_ctx, codec, NULL);
+//  video_st->time_base.den = 1;
+//  video_st->time_base.num = 1;
 
+  ret = avcodec_open2(codec_ctx, codec, NULL);
   if (ret < 0) {
     av_strerror(ret, errbuff, sizeof(errbuff));
     errOutput("unable to open codec: %s", errbuff);
@@ -202,20 +224,44 @@ void saveImage(char *filename, AVFrame *input, int outputPixFmt) {
     errOutput("could not open '%s'", filename);
   }
 
-  avformat_write_header(out_ctx, NULL);
+  ret = avformat_write_header(out_ctx, NULL);
+  if (ret < 0) {
+    av_strerror(ret, errbuff, sizeof(errbuff));
+    errOutput("unable to write file %s: %s", filename, errbuff);
+  }
+
+  packet = av_packet_alloc();
+  if (!packet) {
+    errOutput("Could not allocate video codec context\n");
+  }
 
-  AVPacket pkt = {0};
-  int got_packet;
-  av_init_packet(&pkt);
+  av_init_packet(packet);
 
   /* encode the image */
-  ret = avcodec_encode_video2(video_st->codec, &pkt, output, &got_packet);
+//  ret = avcodec_encode_video2(video_st->codec, &pkt, output, &got_packet);
 
+  ret = avcodec_send_frame(codec_ctx, output);
   if (ret < 0) {
     av_strerror(ret, errbuff, sizeof(errbuff));
     errOutput("unable to write file %s: %s", filename, errbuff);
   }
-  av_write_frame(out_ctx, &pkt);
+
+  while (ret >= 0) {
+    ret = avcodec_receive_packet(codec_ctx, packet);
+      if (ret == AVERROR(EAGAIN) || ret == AVERROR_EOF)
+        break;
+      else if (ret < 0) {
+        av_strerror(ret, errbuff, sizeof(errbuff));
+        errOutput("unable to write file %s: %s", filename, errbuff);
+      }
+
+    packet->pts = 0;
+    packet->dts = 0;
+
+    av_write_frame(out_ctx, packet);
+
+    av_packet_unref(packet);
+  }
 
   av_write_trailer(out_ctx);
   avcodec_close(codec_ctx);
diff --git a/unpaper.c b/unpaper.c
index 3414d77..563e3ac 100644
--- a/unpaper.c
+++ b/unpaper.c
@@ -966,8 +966,12 @@ int main(int argc, char *argv[]) {
   deskewScanStepRad = degreesToRadians(deskewScanStep);
   deskewScanDeviationRad = degreesToRadians(deskewScanDeviation);
 
+#if LIBAVCODEC_VERSION_MAJOR < 58
   avcodec_register_all();
+#endif
+#if LIBAVFORMAT_VERSION_MAJOR < 58
   av_register_all();
+#endif
 
   for (int nr = startSheet; (endSheet == -1) || (nr <= endSheet); nr++) {
     char inputFilesBuffer[2][255];
--- unpaper-20210312/tests/compare-image.c.orig	2021-03-12 21:37:40.000000000 +0000
+++ unpaper-20210312/tests/compare-image.c	2021-03-20 17:25:04.278212475 +0000
@@ -88,6 +88,8 @@
 int main(int argc, char *argv[]) {
   AVFrame *golden, *result;
   float allowed_difference = 0.1;
+  uint8_t last_byte_mask = 0xff;
+  int width;
 
   if (argc == 4) {
     allowed_difference = strtof(argv[3], NULL);
@@ -106,6 +108,32 @@
   if (!golden || !result)
     return 1;
 
+  if (golden->format == AV_PIX_FMT_MONOWHITE || golden->format == AV_PIX_FMT_MONOBLACK) {
+    int bits = golden->width % 8;
+    if (bits) {
+      last_byte_mask <<= (8 - bits);
+    }
+  }
+
+  switch (golden->format) {
+    case AV_PIX_FMT_GRAY8:
+    width = golden->width;
+    break;
+  case AV_PIX_FMT_Y400A:
+    width = golden->width * 2;
+    break;
+  case AV_PIX_FMT_RGB24:
+    width = golden->width * 3;
+    break;
+  case AV_PIX_FMT_MONOWHITE:
+  case AV_PIX_FMT_MONOBLACK:
+    width = (golden->width + 7) / 8;
+    break;
+  default:
+    width = golden->width;
+    break;
+  }
+
   if (golden->height != result->height || golden->width != result->width) {
     fprintf(stderr, "image sizes don't match: %d×%d vs %d×%d\n", golden->height,
             golden->width, result->height, result->width);
@@ -121,9 +149,13 @@
   size_t diffbytes = 0;
 
   for (int y = 0; y < golden->height; y++) {
-    for (int x = 0; x < golden->width; x++) {
+    for (int x = 0; x < width; x++) {
       size_t coord = golden->linesize[0] * y + x;
-      diffbytes += !!(golden->data[0][coord] ^ result->data[0][coord]);
+      if (x == width - 1) {
+        diffbytes += !!((golden->data[0][coord] ^ result->data[0][coord]) & last_byte_mask);
+      } else {
+        diffbytes += !!(golden->data[0][coord] ^ result->data[0][coord]);
+      }
     }
   }
 
