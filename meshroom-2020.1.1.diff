--- meshroom-2020.1.1/meshroom/ui/reconstruction.py.orig	2020-10-14 09:23:10.000000000 +0100
+++ meshroom-2020.1.1/meshroom/ui/reconstruction.py	2020-11-20 22:34:49.104485288 +0000
@@ -249,7 +249,7 @@
             self._undistortedImagePath = os.path.join(self._activeNode_PrepareDenseScene.node.output.value, filename)
         self.denseSceneParamsChanged.emit()
 
-    @Property(type=QObject, constant=True)
+    @Property(type=QObject)
     def attribute(self):
         """ Get the underlying Viewpoint attribute wrapped by this Viewpoint. """
         return self._viewpoint
--- meshroom-2020.1.1/meshroom/ui/app.py.orig	2020-10-14 09:23:10.000000000 +0100
+++ meshroom-2020.1.1/meshroom/ui/app.py	2020-11-20 22:34:42.359485610 +0000
@@ -109,7 +109,7 @@
         self.engine.setWatching(os.environ.get("MESHROOM_INSTANT_CODING", False))
         # whether to output qml warnings to stderr (disable by default)
         self.engine.setOutputWarningsToStandardError(MessageHandler.outputQmlWarnings)
-        qInstallMessageHandler(MessageHandler.handler)
+        # qInstallMessageHandler(MessageHandler.handler)
 
         self.engine.addImportPath(qmlDir)
         components.registerTypes()
@@ -280,7 +280,7 @@
             return md
         return markdown(md)
 
-    @Property(QJsonValue, constant=True)
+    @Property(QJsonValue)
     def systemInfo(self):
         import platform
         import sys
@@ -289,7 +289,7 @@
             'python': 'Python {}'.format(sys.version.split(" ")[0])
         }
 
-    @Property("QVariantList", constant=True)
+    @Property("QVariantList")
     def licensesModel(self):
         """
         Get info about open-source licenses for the application.
