#!/bin/bash
#
. build_funcs

TARNAME=ffmpeg
TARNAMEEXTRA=
TARSEP="-"
TARDIR=${SOURCE}/f
#TAR_EXT=.tar.gz
VERSION=6.1.1
VERSIONEXTRA=
BUILD=2

#TAR_PROG=
#TAR_OPTS=
PKGNAME=ffmpeg
#PKGVERSION=
#BUILD_SUFFIX=
#ARCH=noarch


FULL_TARNAME=${TARDIR}/${TARNAME}${TARNAMEEXTRA}${TARSEP}${VERSION}${VERSIONEXTRA}${TAR_EXT}

pre_unpack

PKG=/tmp/package-${PKGNAME}

if [ ! -f ${FULL_TARNAME} ]
then
  echo Can\'t find ${FULL_TARNAME}
  exit
fi

if [ ! -d ${TARNAME}-${VERSION} ]
then
${TAR_PROG} ${TAR_OPTS} ${FULL_TARNAME}
#mv ${TARNAME}-${VERSION} ${TARNAME}-${VERSION}

if [ ! -d ${TARNAME}-${VERSION} ]
then
  echo "${TARNAME}-${VERSION} directory not found"
  exit
fi

(cd ${TARNAME}-${VERSION}
 patch -p1 < ${CWD}/ffmpeg-add-av_stream_get_first_dts-for-chromium.patch

# patch -p1 < ${CWD}/ffmpeg-5.1.2.diff

# patch -p1 < ${CWD}/ffmpeg-5.1-0001-avcodec-libsvtav1-properly-initialize-the-flush-EbBu.patch
# patch -p1 < ${CWD}/ffmpeg-5.1-0002-avcodec-libsvtav1-remove-compressed_ten_bit_format-a.patch
# patch -p1 < ${CWD}/ffmpeg-5.1-0003-avcodec-libsvtav1-replace-vbv_bufsize-with-maximum_b.patch
# patch -p1 < ${CWD}/ffmpeg-5.1-0004-avcodec-libsvtav1-only-set-max_buf_sz-if-both-bitrat.patch
# patch -p1 < ${CWD}/ffmpeg-5.1-0005-avcodec-libsvtav1-don-t-force-a-default-value-for-de.patch
# patch -p1 < ${CWD}/ffmpeg-5.1-0006-avcodec-libsvtav1-use-larger-of-bit-rate-and-max-rat.patch
# patch -p1 < ${CWD}/ffmpeg-5.1-0007-hwcontext_vulkan-remove-optional-encode-decode-exten.patch
# patch -p1 < ${CWD}/ffmpeg-5.1-0008-libavcodec-libsvtav1-Allow-1-for-preset-option.patch

# patch -p1 < ${CWD}/ffmpeg-effadce6c756247ea8bae32dc13bb3e6f464f0eb.patch
 patch -p1 < ${CWD}/ffmpeg.vulkan.diff
 patch -p1 < ${CWD}/ffmpeg-250471ea1745fc703eb346a2a662304536a311b1.patch
)
fi

pre_configure

cd ${TARNAME}-${VERSION}

fix_perms

if [ ${ARCH} == x86_64 ]
then
  SLKCFLAGS="-O4"
else
  SLKCFLAGS="-O4 -march=pentium4 -mtune=pentium4"
fi

optional_lib()
{
if pkg_exist $1
then
  OPTIONAL_ENABLES="$OPTIONAL_ENABLES $2"
else
  echo "$1 not found"
fi
}

if [ ${DO_CONFIGURE} == "yes" ]
then

OPTIONAL_ENABLES=""

if pkg_exist "x265-build" "-+([0-9])"
then
  OPTIONAL_ENABLES="$OPTIONAL_ENABLES --enable-libx265"
else
  echo "x265 not found"
fi

if pkg_exist "x264-build" "-+([0-9])"
then
  OPTIONAL_ENABLES="$OPTIONAL_ENABLES --enable-libx264"
else
  echo "x264 not found"
fi

# optional_lib schroedinger --enable-libschroedinger
optional_lib SVT-AV1 --enable-libsvtav1
optional_lib aom --enable-libaom
optional_lib celt --enable-libcelt
optional_lib chromaprint --enable-chromaprint
optional_lib frei0r-plugins --enable-frei0r
optional_lib gsm --enable-libgsm
optional_lib ladspa_sdk --enable-ladspa
optional_lib lame --enable-libmp3lame
optional_lib libass --enable-libass
optional_lib libbs2b --enable-libbs2b
optional_lib libcodec2 --enable-libcodec2
optional_lib dav1d --enable-libdav1d
optional_lib libdc1394 --enable-libdc1394
optional_lib libflite --enable-libflite
optional_lib libgme --enable-libgme
optional_lib libiec61883 --enable-libiec61883
optional_lib libilbc --enable-libilbc
optional_lib jack2 --enable-libjack
optional_lib libmodplug --enable-libmodplug
#optional_lib libnut --enable-libnut
#optional_lib opencv --enable-libopencv
optional_lib libsnappy --enable-libsnappy
optional_lib soxr --enable-libsoxr
optional_lib srt --enable-libsrt
optional_lib twolame --enable-libtwolame
optional_lib libwebp --enable-libwebp
optional_lib zimg --enable-libzimg
optional_lib zeromq --enable-libzmq
optional_lib zvbi --enable-libzvbi
optional_lib lv2core --enable-lv2
optional_lib opencore-amr "--enable-libopencore-amrnb --enable-libopencore-amrwb"
optional_lib opus --enable-libopus
optional_lib rabbitmq --enable-librabbitmq
optional_lib rtmpdump --enable-librtmp
optional_lib rubberband --enable-librubberband
optional_lib speex --enable-libspeex
optional_lib tesseract-ocr --enable-libtesseract
optional_lib vapoursynth --enable-vapoursynth
optional_lib vid.stab --enable-libvidstab
optional_lib xvidcore --enable-libxvid

### libcodec2 not found
### libflite not found
### libgme not found
### libilbc not found
### libsnappy not found
### rabbitmq not found
### vapoursynth not found
###
### Unknown option "--enable-libnut"


CFLAGS="${SLKCFLAGS} -I/usr/include/gsm" \
CXXFLAGS="${SLKCFLAGS}" \
./configure --prefix=/usr \
            --libdir=/usr/lib${LIBDIRSUFFIX} \
            --shlibdir=/usr/lib${LIBDIRSUFFIX} \
            --enable-gpl \
            --enable-version3 \
            --enable-shared \
            --disable-static \
            --enable-postproc \
            --enable-avfilter \
            --enable-nonfree \
            $OPTIONAL_ENABLES \
            --enable-libfontconfig \
            --enable-libfreetype \
            --enable-libfribidi \
            --enable-gnutls \
            --enable-libbluray \
            --enable-libcaca \
            --enable-libcdio \
            --enable-libssh \
            --enable-libtheora \
            --enable-libv4l2 \
            --enable-libvorbis \
            --enable-libvpx \
            --enable-libwebp \
            --enable-libmp3lame \
            --enable-opencl \
            --enable-opengl \
            --enable-libopenjpeg \
            --enable-libpulse \
            --enable-libsmbclient \
            --enable-libspeex \
            --enable-openal \
            --enable-libopus \
            --enable-libvidstab \
            --enable-libxml2 \
            --enable-librsvg \
            --enable-libdrm \
            --enable-libglslang \
            --enable-vulkan \
            --extra-ldflags="-lssl -lcrypto -lz"



#            --enable-openssl \
#            --enable-libfaac \

#	    --enable-libdcadec \
#	    --enable-libdirac \
#	    --enable-avfilter-lavf \
#            --enable-libfaad \
#	    --enable-swscale \
#            --enable-liba52 \
#            --enable-pp \
#            --enable-libogg \
#            --enable-dc1394 \
#           --enable-swscaler \
#           --enable-libdts \
#           --enable-pthreads \
#           --enable-amr_nb-fixed \
#
#
fi

if [ ${DO_MAKE} == "yes" ]
then
make ${NUM_JOBS} || exit
pushd doc
# make || exit
popd
fi

if [ ${DO_INSTALL} != "yes" ]
then
  exit
fi

mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}

make install DESTDIR=${PKG}
# prefix=${PKG}/usr bindir=${PKG}/usr/bin mandir=${PKG}/usr/man

#cp version.h ${PKG}/usr/include/ffmpeg

# links for compatability
#mkdir -p ${PKG}/usr/include/ffmpeg ${PKG}/usr/include/postproc
#(cd ${PKG}/usr/include/ffmpeg
# ln -sf ../libavcodec/* .
# ln -sf ../libavdevice/* .
# ln -sf ../libavfilter/* .
# ln -sf ../libavformat/* .
# ln -sf ../libavutil/* .
# ln -sf ../libswscale/* .
# cd ../postproc
# ln -sf ../libpostproc/* .
#)

#strip_binaries

fix_links

compress_manpages

compress_info

cp -a \
  COPYING CREDITS INSTALL README* doc/TODO doc/*html doc/*conf \
  ${PKG}/usr/doc/${TARNAME}-${VERSION}

fix_docs

#-----handy-ruler-for-slack-desc-width-------------------------------|
make_slack_desc << EOF "fast video and audio converter"
FFmpeg is a very fast video and audio converter. It can also grab
from a live audio/video source.

The command line interface is designed to be intuitive, in the sense
that FFmpeg tries to figure out all parameters that can possibly be
derived automatically. You usually only have to specify the target
bitrate you want.

FFmpeg can also convert from any sample rate to any other, and resize
video on the fly with a high quality polyphase filter.

EOF

post_install

cd ${PKG}
su -c "chown -R root:root ${PKG}; \
find . -type d -exec chmod 755 {} \; ; \
makepkg -l y -c n ${PKGDIR}${PKGNAME}-${PKGVERSION}-${ARCH}-${BUILD}${BUILD_SUFFIX}.tgz; \
chown -R ${USERNAME}:${GROUP} ${PKG}"
