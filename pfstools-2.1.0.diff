--- pfstools-2.1.0/cmake/FindOpenEXR.cmake.orig	2017-11-13 17:38:18.000000000 +0000
+++ pfstools-2.1.0/cmake/FindOpenEXR.cmake	2018-10-24 19:45:56.743398232 +0100
@@ -111,7 +111,7 @@
     OPENEXR_HALF_LIBRARY OPENEXR_IEX_LIBRARY OPENEXR_ILMIMF_LIBRARY OPENEXR_ILMTHREAD_LIBRARY OPENEXR_IMATH_LIBRARY ZLIB_LIBRARY OPENEXR_INCLUDE_DIR)
  	
 IF(OPENEXR_FOUND)
-  SET(OPENEXR_LIBRARIES ${OPENEXR_ILMTHREAD_LIBRARY} ${OPENEXR_IEX_LIBRARY} ${OPENEXR_ILMIMF_LIBRARY} ${OPENEXR_IMATH_LIBRARY} ${OPENEXR_HALF_LIBRARY} ${ZLIB_LIBRARY})
+  SET(OPENEXR_LIBRARIES ${OPENEXR_ILMTHREAD_LIBRARY} ${OPENEXR_IEX_LIBRARY} ${OPENEXR_ILMIMF_LIBRARY} ${OPENEXR_IMATH_LIBRARY} ${OPENEXR_HALF_LIBRARY} ${ZLIB_LIBRARY} pthread)
   # Both include paths are needed because of dummy OSL headers mixing #include <OpenEXR/foo.h> and #include <foo.h> :(
   SET(OPENEXR_INCLUDE_DIRS ${OPENEXR_INCLUDE_DIR} ${OPENEXR_INCLUDE_DIR}/OpenEXR ${ZLIB_INCLUDE_DIR})
 ENDIF()
--- pfstools-2.1.0/src/camera/pfsalign.cpp.orig	2020-10-30 20:41:37.873386631 +0000
+++ pfstools-2.1.0/src/camera/pfsalign.cpp	2020-10-30 20:48:48.015576270 +0000
@@ -230,7 +230,7 @@
 
     vector<uchar> inliners(matches_sym.size(), 0);
     //        affine = findHomography( pp1, pp2, inliners, CV_RANSAC, 1. );
-    homography = findHomography( pp2, pp1, CV_RANSAC, 1., inliners );
+    homography = findHomography( pp2, pp1, RANSAC, 1., inliners );
 
     //    solve( pp1, pp2, affine, DECOMP_SVD );
     //    Mat affine = (Mat_<float>(2,3) << 1, 0, 0, 0, 1, 10);
--- pfstools-2.1.0/src/octave/pfsclose.cpp.orig	2017-11-13 17:38:28.000000000 +0000
+++ pfstools-2.1.0/src/octave/pfsclose.cpp	2020-12-08 20:18:46.040966257 +0000
@@ -47,7 +47,7 @@
 
   // Get arguments and check if they are legal
     
-  if( nargin != 1 || !args(0).is_map() )
+  if( nargin != 1 || !args(0).isstruct() )
   {
     error( SCRIPT_NAME ": Improper usage!");
     return retval;
--- pfstools-2.1.0/src/octave/pfsget.cpp.orig	2017-11-13 17:38:28.000000000 +0000
+++ pfstools-2.1.0/src/octave/pfsget.cpp	2020-12-08 20:18:46.040966257 +0000
@@ -46,7 +46,7 @@
 	
   int nargin = args.length();
 
-  if( nargin != 1 || !args(0).is_map() )
+  if( nargin != 1 || !args(0).isstruct() )
   {
     error( SCRIPT_NAME ": Improper usage!");
     return retval;
--- pfstools-2.1.0/src/octave/pfsput.cpp.orig	2017-11-13 17:38:28.000000000 +0000
+++ pfstools-2.1.0/src/octave/pfsput.cpp	2020-12-08 20:18:46.041966257 +0000
@@ -46,7 +46,7 @@
 	
   int nargin = args.length();
 
-  if( nargin != 1 || !args(0).is_map() )
+  if( nargin != 1 || !args(0).isstruct() )
   {
     error( SCRIPT_NAME ": Improper usage!");
     return retval;
@@ -98,7 +98,7 @@
   {
     octave_scalar_map::const_iterator itChannels = pfsStream.seek( "channels" );
     if( itChannels == pfsStream.end() ||
-      !pfsStream.contents( itChannels )(0).is_map() )
+      !pfsStream.contents( itChannels )(0).isstruct() )
     {
       error( SCRIPT_NAME ": 'channels' field missing in the structure or it has wrong type");
       return retval;
@@ -137,7 +137,7 @@
     {
       octave_scalar_map::const_iterator itTags = pfsStream.seek( "tags" );
       if( itTags != pfsStream.end() ) {
-        if( !pfsStream.contents( itTags )(0).is_map() )
+        if( !pfsStream.contents( itTags )(0).isstruct() )
         {
           throw pfs::Exception( "'tags' field must be a structure" );  
         }
@@ -158,14 +158,14 @@
     {
       octave_scalar_map::const_iterator itChTags = pfsStream.seek( "channelTags" );
       if( itChTags != pfsStream.end() ) {
-        if( !pfsStream.contents( itChTags )(0).is_map() )
+        if( !pfsStream.contents( itChTags )(0).isstruct() )
         {
           throw pfs::Exception( "'channelTags' field must be a structure" );  
         }
         octave_map tagChannels = pfsStream.contents( itChTags )(0).map_value();
         for( octave_scalar_map::iterator itCh = tagChannels.begin(); itCh != tagChannels.end(); itCh++ ) {
           std::string channelName = tagChannels.key(itCh);
-          if( !tagChannels.contents( itCh )(0).is_map() ) {
+          if( !tagChannels.contents( itCh )(0).isstruct() ) {
             throw pfs::Exception( "each channelTags file must be a structure" );  
           }
           pfs::Channel *pfsChannel = frame->getChannel( channelName.c_str() );
--- pfstools-2.1.0/src/fileformat/pfsinyuv.cpp.orig	2017-11-13 17:38:27.000000000 +0000
+++ pfstools-2.1.0/src/fileformat/pfsinyuv.cpp	2021-10-11 20:17:47.401495462 +0100
@@ -43,6 +43,7 @@
 
 char charsToRemove[7] = {'b', 'i', 't', 's', 'f', 'p', 's'};
 
+#if 0
 template<typename T>
 inline T clamp( T val, T min, T max )
 {
@@ -52,6 +53,7 @@
     return max;
   return val;  
 }
+#endif
 
 
 template<typename T>
--- pfstools-2.1.0/src/pfsglview/CMakeLists.txt.orig	2022-05-04 14:08:43.558001429 +0100
+++ pfstools-2.1.0/src/pfsglview/CMakeLists.txt	2022-05-04 14:11:17.163994100 +0100
@@ -12,7 +12,7 @@
 add_executable(pfsglview pfsglview.cpp picture_io.cpp module.cpp m_histogram.cpp m_status.cpp m_on_screen_display.cpp)
 
 # TODO: Use ${GLUT_LIBRARY} instead.
-target_link_libraries(pfsglview ${OPENGL_LIBRARIES} ${GLUT_glut_LIBRARY} pfs)
+target_link_libraries(pfsglview ${OPENGL_LIBRARIES} ${GLUT_glut_LIBRARY} ${GLUT_LIBRARIES} pfs)
 
 install (TARGETS pfsglview DESTINATION bin)
 install (FILES pfsglview.1 DESTINATION ${MAN_DIR})
--- pfstools-2.1.0/src/fileformat/CMakeLists.txt.orig	2017-11-13 17:38:27.000000000 +0000
+++ pfstools-2.1.0/src/fileformat/CMakeLists.txt	2022-05-05 17:05:53.306714257 +0100
@@ -67,7 +67,7 @@
 install (FILES pfsoutpfm.1 DESTINATION ${MAN_DIR})
 
 if( OPENEXR_FOUND )
-    include_directories("${OPENEXR_INCLUDE_DIR}")
+    include_directories(${OPENEXR_INCLUDE_DIR} ${IMATH_INCLUDE_DIR})
 
     add_executable(pfsinexr pfsinexr.cpp "${GETOPT_OBJECT}")
     target_link_libraries(pfsinexr pfs ${OPENEXR_LIBRARIES})
--- pfstools-2.1.0/cmake/FindOpenEXR.cmake.orig	2022-05-05 17:00:00.098731110 +0100
+++ pfstools-2.1.0/cmake/FindOpenEXR.cmake	2022-05-05 17:07:18.328710200 +0100
@@ -35,11 +35,10 @@
 ENDIF()
 
 SET(_openexr_FIND_COMPONENTS
-  Half
   Iex
-  IlmImf
   IlmThread
   Imath
+  OpenEXR
 )
 
 
@@ -61,7 +60,16 @@
     include/OpenEXR include
 )
 
-#message( "Include dir: ${OPENEXR_INCLUDE_DIR}" )
+FIND_PATH(IMATH_INCLUDE_DIR
+  NAMES
+    half.h
+  HINTS
+    ${_openexr_SEARCH_DIRS}
+  PATH_SUFFIXES
+    include/Imath include
+)
+
+#message( "Include dir: ${OPENEXR_INCLUDE_DIR} ${IMATH_INCLUDE_DIR}" )
 
 SET(_openexr_LIBRARIES)
 FOREACH(COMPONENT ${_openexr_FIND_COMPONENTS})
@@ -108,12 +116,12 @@
   
 # This is a work-around as passing the list does not work in cmake 2.8.11.2 (cygwin)  
 FIND_PACKAGE_HANDLE_STANDARD_ARGS(OpenEXR  DEFAULT_MSG  
-    OPENEXR_HALF_LIBRARY OPENEXR_IEX_LIBRARY OPENEXR_ILMIMF_LIBRARY OPENEXR_ILMTHREAD_LIBRARY OPENEXR_IMATH_LIBRARY ZLIB_LIBRARY OPENEXR_INCLUDE_DIR)
+    OPENEXR_IEX_LIBRARY OPENEXR_ILMTHREAD_LIBRARY OPENEXR_IMATH_LIBRARY ZLIB_LIBRARY OPENEXR_INCLUDE_DIR)
  	
 IF(OPENEXR_FOUND)
-  SET(OPENEXR_LIBRARIES ${OPENEXR_ILMTHREAD_LIBRARY} ${OPENEXR_IEX_LIBRARY} ${OPENEXR_ILMIMF_LIBRARY} ${OPENEXR_IMATH_LIBRARY} ${OPENEXR_HALF_LIBRARY} ${ZLIB_LIBRARY} pthread)
+  SET(OPENEXR_LIBRARIES ${OPENEXR_ILMTHREAD_LIBRARY} ${OPENEXR_IEX_LIBRARY} ${OPENEXR_IMATH_LIBRARY} ${OPENEXR_OPENEXR_LIBRARY} ${ZLIB_LIBRARY} pthread)
   # Both include paths are needed because of dummy OSL headers mixing #include <OpenEXR/foo.h> and #include <foo.h> :(
-  SET(OPENEXR_INCLUDE_DIRS ${OPENEXR_INCLUDE_DIR} ${OPENEXR_INCLUDE_DIR}/OpenEXR ${ZLIB_INCLUDE_DIR})
+  SET(OPENEXR_INCLUDE_DIRS ${OPENEXR_INCLUDE_DIR} ${OPENEXR_INCLUDE_DIR}/OpenEXR ${ZLIB_INCLUDE_DIR} ${IMATH_INCLUDE_DIR})
 ENDIF()
 
 MARK_AS_ADVANCED(OPENEXR_INCLUDE_DIR)
