commit ad601ceb3b953c042c70b462605f87c84b7179a6
Author: Alan Alpert <aalpert@rim.com>
Date:   Sat Dec 8 10:54:35 2012 -0800

    Specify better increment for captured properties
    
    There aren't that many captured properties, decreasing the
    increment will give better performance.
    
    Change-Id: Iddb17c695eda5513f2d038123f4c886e559d8f6b
    Reviewed-by: Christopher Adams <chris.adams@jollamobile.com>

diff --git a/src/declarative/qml/qdeclarativeengine_p.h b/src/declarative/qml/qdeclarativeengine_p.h
index cc1d552..4f22b94 100644
--- a/src/declarative/qml/qdeclarativeengine_p.h
+++ b/src/declarative/qml/qdeclarativeengine_p.h
@@ -157,7 +157,7 @@ public:
         int notifyIndex;
     };
     bool captureProperties;
-    QPODVector<CapturedProperty> capturedProperties;
+    QPODVector<CapturedProperty, 16> capturedProperties;
 
     QDeclarativeContext *rootContext;
     bool isDebugging;
diff --git a/src/declarative/qml/qdeclarativeexpression.cpp b/src/declarative/qml/qdeclarativeexpression.cpp
index 2d2aeb4..5e36d6e 100644
--- a/src/declarative/qml/qdeclarativeexpression.cpp
+++ b/src/declarative/qml/qdeclarativeexpression.cpp
@@ -463,7 +463,7 @@ QScriptValue QDeclarativeQtScriptExpression::scriptValue(QObject *secondaryScope
     QDeclarativeEnginePrivate *ep = QDeclarativeEnginePrivate::get(context()->engine);
 
     bool lastCaptureProperties = ep->captureProperties;
-    QPODVector<QDeclarativeEnginePrivate::CapturedProperty> lastCapturedProperties;
+    QPODVector<QDeclarativeEnginePrivate::CapturedProperty, 16> lastCapturedProperties;
     ep->captureProperties = trackChange;
     ep->capturedProperties.copyAndClear(lastCapturedProperties);
 
@@ -542,7 +542,7 @@ QScriptValue QDeclarativeQtScriptExpression::eval(QObject *secondaryScope, bool
     }
 }
 
-void QDeclarativeQtScriptExpression::updateGuards(const QPODVector<QDeclarativeEnginePrivate::CapturedProperty> &properties)
+void QDeclarativeQtScriptExpression::updateGuards(const QPODVector<QDeclarativeEnginePrivate::CapturedProperty, 16> &properties)
 {
     Q_ASSERT(guardObject);
     Q_ASSERT(guardObjectNotifyIndex != -1);
diff --git a/src/declarative/qml/qdeclarativeexpression_p.h b/src/declarative/qml/qdeclarativeexpression_p.h
index 6e8df8a..402ae84 100644
--- a/src/declarative/qml/qdeclarativeexpression_p.h
+++ b/src/declarative/qml/qdeclarativeexpression_p.h
@@ -153,7 +153,7 @@ public:
 private:
     void clearGuards();
     QScriptValue eval(QObject *secondaryScope, bool *isUndefined);
-    void updateGuards(const QPODVector<QDeclarativeEnginePrivate::CapturedProperty> &properties);
+    void updateGuards(const QPODVector<QDeclarativeEnginePrivate::CapturedProperty, 16> &properties);
 
     bool trackChange;
 
