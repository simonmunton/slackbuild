#!/bin/bash
#
. build_funcs

TARNAME=boost
TARNAMEEXTRA=
TARDIR=~/tmp/new/b
#TAR_EXT=.tar.gz
VERSION=1_62_0
VERSIONEXTRA=
BUILD=1

#TAR_PROG=
#TAR_OPTS=
#PKGNAME=
#PKGVERSION=
#BUILD_SUFFIX=
#ARCH=noarch


FULL_TARNAME=${TARDIR}/${TARNAME}${TARNAMEEXTRA}_${VERSION}${VERSIONEXTRA}${TAR_EXT}

pre_unpack

PKG=/tmp/package-${PKGNAME}
PKGDBG=/tmp/package-${PKGNAME}-debug

if [ ! -f ${FULL_TARNAME} ]
then
  echo Can\'t find ${FULL_TARNAME}
  exit
fi

if [ ! -d ${TARNAME}-${VERSION} ]
then 
${TAR_PROG} ${TAR_OPTS} ${FULL_TARNAME}
mv ${TARNAME}_${VERSION} ${TARNAME}-${VERSION}

if [ ! -d ${TARNAME}-${VERSION} ]
then 
  echo "${TARNAME}-${VERSION} directory not found"
  exit
fi

(cd ${TARNAME}-${VERSION}
# patch -p1 < ${CWD}/boost-1_57_0.diff
)
fi

pre_configure

cd ${TARNAME}-${VERSION}

fix_perms

#PATH=`pwd`/tools/jam/src/bin.linuxx86:${PATH}

#PYTHON_VERSION=`python -V 2>&1 | gawk '{print $2}' | cut -d. -f1,2`

#export PYTHON_VERSION

if [ ${DO_CONFIGURE} == "yes" ]
then
#./configure --prefix=/usr
./bootstrap.sh --prefix=/usr
fi

# use LIBS="--layout=system" to make without version numbers
#LIBS="--layout=system --build-type=minimal"
#LIBS="--layout=system --build-type=complete"
LIBS="--layout=system"
OPTS="link=shared runtime-link=shared"

export EXPAT_INCLUDE=/usr/include
export EXPAT_LIBPATH=/usr/lib${LIBDIRSUFFIX}

if [ ${DO_MAKE} == "yes" ]
then
#make LIBS="$LIBS" || exit
./bjam link=shared runtime-link=shared --layout=tagged --build-type=complete --build-dir=build-x stage
#./bjam ${LIBS} ${OPTS} --stagedir=stage-s    --build-dir=build-s                   variant=release threading=single stage
#./bjam ${LIBS} ${OPTS} --stagedir=stage-mt   --build-dir=build-mt   --buildid=mt   variant=release threading=multi  stage
#./bjam ${LIBS} ${OPTS} --stagedir=stage-d    --build-dir=build-d    --buildid=d    variant=debug   threading=single stage
#./bjam ${LIBS} ${OPTS} --stagedir=stage-mt-d --build-dir=build-mt-d --buildid=mt-d variant=debug   threading=multi  stage
fi

if [ ${DO_INSTALL} != "yes" ]
then
  exit
fi

#make install prefix=${PKG}/usr LIBS="$LIBS" 
INSTALL_OPTS="--prefix=${PKG}/usr --exec-prefix=${PKG}/usr --libdir=${PKG}/usr/lib${LIBDIRSUFFIX} --includedir=${PKG}/usr/include"
./bjam ${INSTALL_OPTS} link=shared runtime-link=shared --layout=tagged --build-type=complete --build-dir=build-x install

#./bjam ${LIBS} ${OPTS} ${INSTALL_OPTS} --build-dir=build-s                   variant=release threading=single install
#./bjam ${LIBS} ${OPTS} ${INSTALL_OPTS} --build-dir=build-mt   --buildid=mt   variant=release threading=multi  install

#INSTALL_OPTS="--prefix=${PKGDBG}/usr --exec-prefix=${PKGDBG}/usr --libdir=${PKGDBG}/usr/lib${LIBDIRSUFFIX} --includedir=${PKGDBG}/usr/include"

#./bjam ${LIBS} ${OPTS} ${INSTALL_OPTS} --build-dir=build-d    --buildid=d    variant=debug   threading=single install
#./bjam ${LIBS} ${OPTS} ${INSTALL_OPTS} --build-dir=build-mt-d --buildid=mt-d variant=debug   threading=multi  install



mkdir -p ${PKGDBG}/usr/lib${LIBDIRSUFFIX}
mv ${PKG}/usr/lib${LIBDIRSUFFIX}/*-d.so* ${PKGDBG}/usr/lib${LIBDIRSUFFIX}

#	    PREFIX=${PKG}/usr \
#	    EPREFIX=${PKG}/usr \
#	    LIBDIR=${PKG}/usr/lib \
#	    INCLUDEDIR=${PKG}/usr/include

# no static libs
rm ${PKG}/usr/lib${LIBDIRSUFFIX}/*.a

#(cd ${PKG}/usr/include; ln -s boost*/boost boost)

(cd ${PKG}/usr/lib${LIBDIRSUFFIX}
 for f in `ls | grep -v ${VERSION%_*}`
 do
    inode=`ls -li "${f}" | awk '{print $1}'`
    HLINKS=`find . \! -name "$f" -inum ${inode}`

    if [ -n "${HLINKS}" ]; then
      # We have hard-links! Remove them now.
      for i in ${HLINKS}
	do
	  rm -f ${f}
	  ln -s ${i} ${f}
	done
    fi
 done
)


#strip_binaries

fix_links

compress_manpages

compress_info

cp -a \
  LICENSE* AUTHORS COPYING* INSTALL NEWS PLANS README* TODO \
  index.htm boost.png *.css doc more wiki status people libs \
  ${PKG}/usr/doc/${TARNAME}-${VERSION}

(cd ${PKG}/usr/doc/${TARNAME}-${VERSION}/libs
 find . -type d -name build -exec rm -rf {} \;
 find . -type d -name src -exec rm -rf {} \;
 find . -type d -name test -exec rm -rf {} \;
 find . -type d -name xmldoc -exec rm -rf {} \;
 find . -type d -name pyste -exec rm -rf {} \;
 find . -type d -name performance -exec rm -rf {} \;
 find . -type d -name tools -exec rm -rf {} \;
 find . -type d -name "*ide" -exec rm -rf {} \;
)

fix_docs

mkdir -p ${PKGDBG}/install

#-----handy-ruler-for-slack-desc-width-------------------------------|
PKGNAME=${PKGNAME}-debug \
make_slack_desc << EOF "Boost template library debug version"
Debug versions of the Boost libraries.

EOF

mv ${PKG}/install/slack-desc ${PKGDBG}/install

#-----handy-ruler-for-slack-desc-width-------------------------------|
make_slack_desc << EOF "Boost template library"
Boost provides free peer-reviewed portable C++ source libraries. The
emphasis is on libraries which work well with the C++ Standard 
Library, in the hopes of establishing "existing practice" for
extensions and providing reference implementations so that the Boost
libraries are suitable for eventual standardization. (Some of the
libraries have already been proposed for inclusion in the C++
Standards Committee's upcoming C++ Standard Library Technical Report.)

EOF

post_install

cd ${PKG}
su -c "chown -R root.root ${PKG} ${PKGDBG}; \
find . -type d -exec chmod 755 {} \; ; \
makepkg -l y -c n ${PKGDIR}${PKGNAME}-${PKGVERSION}-${ARCH}-${BUILD}${BUILD_SUFFIX}.tgz; \
chown -R ${USERNAME}.${GROUP} ${PKG}; \
cd ${PKGDBG}; \
find . -type d -exec chmod 755 {} \; ; \
makepkg -l y -c n ${PKGDIR}${PKGNAME}-debug-${PKGVERSION}-${ARCH}-${BUILD}${BUILD_SUFFIX}.tgz; \
chown -R ${USERNAME}.${GROUP} ${PKG}"
