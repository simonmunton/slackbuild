#!/bin/bash
#
. build_funcs

TARNAME=Intel-Linux-Processor-Microcode-Data-Files-microcode
TARNAMEEXTRA=
TARSEP="-"
TARDIR=~/tmp/new/i
TAR_EXT=
VERSION=20230808
VERSIONEXTRA=
BUILD=1

WEBPAGE="http://downloadcenter.intel.com/default.aspx"
# https://github.com/intel/Intel-Linux-Processor-Microcode-Data-Files
# select processors, select the CPU you're interested in, go to Linux as the OS and download

#TAR_PROG=
#TAR_OPTS=
PKGNAME=microcode
#PKGVERSION=
#BUILD_SUFFIX=
#ARCH=noarch


FULL_TARNAME=${TARDIR}/${TARNAME}${TARNAMEEXTRA}${TARSEP}${VERSION}${VERSIONEXTRA}${TAR_EXT}

pre_unpack

PKG=/tmp/package-${PKGNAME}

if [ ! -f ${FULL_TARNAME} ]
then
  echo Can\'t find ${FULL_TARNAME}
  exit
fi

if [ ! -d ${TARNAME}-${VERSION} ]
then
mkdir ${TARNAME}-${VERSION}
cd ${TARNAME}-${VERSION}
${TAR_PROG} ${TAR_OPTS} ${FULL_TARNAME}
#mv ${TARNAME}-${VERSION} ${TARNAME}-${VERSION}

cd ..

if [ ! -d ${TARNAME}-${VERSION} ]
then
  echo "${TARNAME}-${VERSION} directory not found"
  exit
fi

(cd ${TARNAME}-${VERSION}
 #patch -p1 < ${CWD}/
 if [ -e ${TARNAME}-${VERSION} ]
 then
   mv ${TARNAME}-${VERSION}/* .
 fi
)
fi

pre_configure

cd ${TARNAME}-${VERSION}

mkdir -p ${PKG}/lib/firmware

cp -pr intel-ucode ${PKG}/lib/firmware

rm ${PKG}/lib/firmware/intel-ucode/list

cat << EOF >> ${PKG}/install/doinst.sh

echo "Creating microcode initrd"
/usr/sbin/iucode_tool -S --overwrite --write-earlyfw=/boot/early_ucode.cpio /lib/firmware/intel-ucode/*

EOF

cp -a \
  AUTHORS COPYING* INSTALL NEWS PLANS README* TODO releasenote \
  ${PKG}/usr/doc/${TARNAME}-${VERSION}

fix_docs

#-----handy-ruler-for-slack-desc-width-------------------------------|
make_slack_desc << EOF "Intel processor microcode"
The microcode data file for Linux contains the latest microcode 
definitions for all Intel processors.

EOF

post_install

cd ${PKG}
su -c "chown -R root:root ${PKG}; \
find . -type d -exec chmod 755 {} \; ; \
makepkg -l y -c n ${PKGDIR}${PKGNAME}-${PKGVERSION}-${ARCH}-${BUILD}${BUILD_SUFFIX}.tgz; \
chown -R ${USERNAME}:${GROUP} ${PKG}"
