--- jami-20230206.0/daemon/src/archiver.h.orig	1970-01-01 01:00:01.000000000 +0100
+++ jami-20230206.0/daemon/src/archiver.h	2023-08-15 21:32:40.104867060 +0100
@@ -22,6 +22,7 @@
 
 #include "noncopyable.h"
 
+#include <cstdint>
 #include <string>
 #include <vector>
 #include <map>
--- jami-20230206.0/daemon/src/string_utils.h.orig	1970-01-01 01:00:01.000000000 +0100
+++ jami-20230206.0/daemon/src/string_utils.h	2023-08-15 21:41:25.033842014 +0100
@@ -21,6 +21,7 @@
 
 #pragma once
 
+#include <cstdint>
 #include <string>
 #include <vector>
 #include <set>
--- jami-20230206.0/daemon/src/jami/trace-tools.h.orig	1970-01-01 01:00:01.000000000 +0100
+++ jami-20230206.0/daemon/src/jami/trace-tools.h	2023-08-15 21:42:20.976839345 +0100
@@ -32,6 +32,8 @@
 #  define CURRENT_LINE()     0
 #endif
 
+#include <string>
+
 #ifdef HAVE_CXXABI_H
 #include <cxxabi.h>
 
--- jami-20230206.0/daemon/src/connectivity/security/tls_session.cpp.orig	1970-01-01 01:00:01.000000000 +0100
+++ jami-20230206.0/daemon/src/connectivity/security/tls_session.cpp	2023-05-11 17:11:41.635951197 +0100
@@ -1216,7 +1216,7 @@
         return state; // handshake
 
     } else if (cred != GNUTLS_CRD_CERTIFICATE) {
-        JAMI_ERROR("[TLS] spurious session credential ({})", cred);
+        JAMI_ERROR("[TLS] spurious session credential ({})", (int)cred);
         return TlsSessionState::SHUTDOWN;
     }
 
--- jami-20230206.0/daemon/contrib/native/ffmpeg/libavcodec/libopusenc.c.orig	2022-01-14 18:43:55.000000000 +0000
+++ jami-20230206.0/daemon/contrib/native/ffmpeg/libavcodec/libopusenc.c	2023-02-24 22:30:31.442929077 +0000
@@ -461,6 +461,15 @@
     int ret;
     int discard_padding;
 
+    if (opus->opts.fec) {
+        ret = opus_multistream_encoder_ctl(opus->enc,
+                                           OPUS_SET_PACKET_LOSS_PERC(opus->opts.packet_loss));
+        if (ret != OPUS_OK)
+            av_log(avctx, AV_LOG_WARNING,
+                   "Unable to set expected packet loss percentage: %s\n",
+                   opus_strerror(ret));
+    }
+
     if (frame) {
         ret = ff_af_queue_add(&opus->afq, frame);
         if (ret < 0)
--- jami-20230206.0/daemon/contrib/native/ffmpeg/libavcodec/mjpegdec.c.orig	2022-01-14 18:43:55.000000000 +0000
+++ jami-20230206.0/daemon/contrib/native/ffmpeg/libavcodec/mjpegdec.c	2023-02-24 22:30:31.418929078 +0000
@@ -2459,9 +2459,7 @@
                    "restart marker: %d\n", start_code & 0x0f);
             /* APP fields */
         } else if (start_code >= APP0 && start_code <= APP15) {
-            if ((ret = mjpeg_decode_app(s)) < 0)
-                av_log(avctx, AV_LOG_ERROR, "unable to decode APP fields: %s\n",
-                       av_err2str(ret));
+            ret = mjpeg_decode_app(s);
             /* Comment */
         } else if (start_code == COM) {
             ret = mjpeg_decode_com(s);
--- jami-20230206.0/daemon/contrib/native/ffmpeg/libavformat/rtp.h.orig	2022-01-14 18:43:55.000000000 +0000
+++ jami-20230206.0/daemon/contrib/native/ffmpeg/libavformat/rtp.h	2023-02-24 22:30:31.425929078 +0000
@@ -80,8 +80,8 @@
 #define RTP_VERSION 2
 #define RTP_MAX_SDES 256   /**< maximum text length for SDES */
 
-/* RTCP packets use 0.5% of the bandwidth */
-#define RTCP_TX_RATIO_NUM 5
+/* RTCP packets use 2.5% of the bandwidth */
+#define RTCP_TX_RATIO_NUM 25
 #define RTCP_TX_RATIO_DEN 1000
 
 /* An arbitrary id value for RTP Xiph streams - only relevant to indicate
--- jami-20230206.0/daemon/contrib/native/ffmpeg/libavformat/rtpenc.c.orig	2022-01-14 18:43:55.000000000 +0000
+++ jami-20230206.0/daemon/contrib/native/ffmpeg/libavformat/rtpenc.c	2023-02-24 22:30:31.430929078 +0000
@@ -28,6 +28,8 @@
 
 #include "rtpenc.h"
 
+#define EXT_ABS_SEND_TIME
+
 static const AVOption options[] = {
     FF_RTP_FLAG_OPTS(RTPMuxContext, flags),
     { "payload_type", "Specify RTP payload type", offsetof(RTPMuxContext, payload_type), AV_OPT_TYPE_INT, {.i64 = -1 }, -1, 127, AV_OPT_FLAG_ENCODING_PARAM },
@@ -148,7 +150,11 @@
                                     s1->pb->max_packet_size);
     } else
         s1->packet_size = s1->pb->max_packet_size;
+#ifdef EXT_ABS_SEND_TIME
+    if (s1->packet_size <= 20) {
+#else
     if (s1->packet_size <= 12) {
+#endif
         av_log(s1, AV_LOG_ERROR, "Max packet size %u too low\n", s1->packet_size);
         return AVERROR(EIO);
     }
@@ -156,7 +162,11 @@
     if (!s->buf) {
         return AVERROR(ENOMEM);
     }
+#ifdef EXT_ABS_SEND_TIME
+    s->max_payload_size = s1->packet_size - 20;
+#else
     s->max_payload_size = s1->packet_size - 12;
+#endif
 
     if (st->codecpar->codec_type == AVMEDIA_TYPE_AUDIO) {
         avpriv_set_pts_info(st, 32, 1, st->codecpar->sample_rate);
@@ -334,16 +344,34 @@
 void ff_rtp_send_data(AVFormatContext *s1, const uint8_t *buf1, int len, int m)
 {
     RTPMuxContext *s = s1->priv_data;
+    uint64_t ntp64_time;
+    uint32_t absoluteSendTime;
 
     av_log(s1, AV_LOG_TRACE, "rtp_send_data size=%d\n", len);
 
     /* build the RTP header */
+#ifdef EXT_ABS_SEND_TIME
+    avio_w8(s1->pb, RTP_VERSION << 6 | 0x10); // extention bit
+#else
     avio_w8(s1->pb, RTP_VERSION << 6);
+#endif
     avio_w8(s1->pb, (s->payload_type & 0x7f) | ((m & 0x01) << 7));
     avio_wb16(s1->pb, s->seq);
     avio_wb32(s1->pb, s->timestamp);
     avio_wb32(s1->pb, s->ssrc);
 
+#ifdef EXT_ABS_SEND_TIME
+    avio_wb16(s1->pb, 0xBEDE);      // magic word
+    avio_wb16(s1->pb, 0x0001);      // length=1
+    avio_w8(s1->pb, 0x32);         // ID=3 and lenght=2
+    ntp64_time = ff_get_formatted_ntp_time(ff_ntp_time());
+    absoluteSendTime = (uint32_t)((ntp64_time>> 14) & 0x00ffffff);
+    av_log(s1, AV_LOG_TRACE, "ntp64:%lu, abs_time:%u\n", ntp64_time, absoluteSendTime);
+    avio_w8(s1->pb, (uint8_t)(absoluteSendTime >> 16));
+    avio_w8(s1->pb, (uint8_t)(absoluteSendTime >> 8 & 0xff));
+    avio_w8(s1->pb, (uint8_t)(absoluteSendTime & 0xff));
+#endif
+
     avio_write(s1->pb, buf1, len);
     avio_flush(s1->pb);
 
