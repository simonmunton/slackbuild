--- mesa-demos-8.2.0/src/egl/eglut/eglut_screen.c.orig	2012-06-25 16:34:58.000000000 +0100
+++ mesa-demos-8.2.0/src/egl/eglut/eglut_screen.c	2015-06-19 19:37:57.336934839 +0100
@@ -35,26 +35,33 @@
 
 #define MAX_MODES 100
 
+#ifdef EGL_MESA_screen_surface
 static EGLScreenMESA kms_screen;
 static EGLModeMESA kms_mode;
 static EGLint kms_width, kms_height;
+#endif
 
 void
 _eglutNativeInitDisplay(void)
 {
+#ifdef EGL_MESA_screen_surface
    _eglut->native_dpy = EGL_DEFAULT_DISPLAY;
    _eglut->surface_type = EGL_SCREEN_BIT_MESA;
+#endif
 }
 
 void
 _eglutNativeFiniDisplay(void)
 {
+#ifdef EGL_MESA_screen_surface
    kms_screen = 0;
    kms_mode = 0;
    kms_width = 0;
    kms_height = 0;
+#endif
 }
 
+#ifdef EGL_MESA_screen_surface
 static void
 init_kms(void)
 {
@@ -94,19 +101,23 @@
    kms_width = width;
    kms_height = height;
 }
+#endif
 
 void
 _eglutNativeInitWindow(struct eglut_window *win, const char *title,
                        int x, int y, int w, int h)
 {
+#ifdef EGL_MESA_screen_surface
    EGLint surf_attribs[16];
    EGLint i;
+#endif
    const char *exts;
 
    exts = eglQueryString(_eglut->dpy, EGL_EXTENSIONS);
    if (!exts || !strstr(exts, "EGL_MESA_screen_surface"))
       _eglutFatal("EGL_MESA_screen_surface is not supported\n");
 
+#ifdef EGL_MESA_screen_surface
    init_kms();
 
    i = 0;
@@ -128,14 +139,17 @@
 
    win->native.width = kms_width;
    win->native.height = kms_height;
+#endif
 }
 
 void
 _eglutNativeFiniWindow(struct eglut_window *win)
 {
+#ifdef EGL_MESA_screen_surface
    eglShowScreenSurfaceMESA(_eglut->dpy,
          kms_screen, EGL_NO_SURFACE, 0);
    eglDestroySurface(_eglut->dpy, win->native.u.surface);
+#endif
 }
 
 void
--- mesa-demos-8.2.0/src/egl/eglut/eglut.c.orig	2012-06-25 16:34:58.000000000 +0100
+++ mesa-demos-8.2.0/src/egl/eglut/eglut.c	2015-06-19 19:37:57.336934839 +0100
@@ -76,8 +76,9 @@
 static void
 _eglutDestroyWindow(struct eglut_window *win)
 {
-   if (_eglut->surface_type != EGL_PBUFFER_BIT &&
-       _eglut->surface_type != EGL_SCREEN_BIT_MESA)
+
+   if (_eglut->surface_type == EGL_WINDOW_BIT ||
+       _eglut->surface_type == EGL_PIXMAP_BIT)
       eglDestroySurface(_eglut->dpy, win->surface);
 
    _eglutNativeFiniWindow(win);
@@ -175,7 +176,9 @@
             win->config, win->native.u.pixmap, NULL);
       break;
    case EGL_PBUFFER_BIT:
+#ifdef EGL_MESA_screen_surface
    case EGL_SCREEN_BIT_MESA:
+#endif
       win->surface = win->native.u.surface;
       break;
    default:
@@ -289,8 +292,10 @@
    if (window->index != win)
       return;
 
+#ifdef EGL_MESA_screen_surface
    /* XXX it causes some bug in st/egl KMS backend */
    if ( _eglut->surface_type != EGL_SCREEN_BIT_MESA)
+#endif
       eglMakeCurrent(_eglut->dpy, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);
 
    _eglutDestroyWindow(_eglut->current);
--- mesa-demos-8.2.0/src/egl/opengl/demo3.c.orig	2012-06-25 16:34:58.000000000 +0100
+++ mesa-demos-8.2.0/src/egl/opengl/demo3.c	2015-06-19 19:37:57.336934839 +0100
@@ -46,7 +46,7 @@
    0x3e, 0x00, 0x00, 0xf8, 0x0c, 0x00, 
 };
 
-
+#ifdef EGL_MESA_screen_surface
 static void Init(void)
 {
 
@@ -551,11 +551,13 @@
       fclose(f);
    }
 }
+#endif
 
 int
 main(int argc, char *argv[])
 {
    int maj, min;
+#ifdef EGL_MESA_screen_surface
    EGLContext ctx;
    EGLSurface screen_surf;
    EGLConfig configs[10];
@@ -566,6 +568,7 @@
    const GLubyte *bitmap;
    EGLint screenAttribs[32];
    EGLint i;
+#endif
 
    EGLDisplay d = eglGetDisplay(EGL_DEFAULT_DISPLAY);
    assert(d);
@@ -583,6 +586,7 @@
       exit(1);
    }
 
+#ifdef EGL_MESA_screen_surface
    eglGetConfigs(d, configs, 10, &numConfigs);
    eglGetScreensMESA(d, &screen, 1, &count);
    eglGetModesMESA(d, screen, &mode, 1, &count);
@@ -642,6 +646,7 @@
    eglDestroySurface(d, screen_surf);
    eglDestroyContext(d, ctx);
    eglTerminate(d);
+#endif
 
    return 0;
 }
--- mesa-demos-8.2.0/src/egl/opengl/demo1.c.orig	2015-06-19 19:37:57.336934839 +0100
+++ mesa-demos-8.2.0/src/egl/opengl/demo1.c	2015-06-19 19:39:06.175935093 +0100
@@ -110,6 +110,12 @@
    printf("EGL version = %d.%d\n", maj, min);
    printf("EGL_VENDOR = %s\n", eglQueryString(d, EGL_VENDOR));
 
+   if (!strstr(eglQueryString(d, EGL_EXTENSIONS),
+               "EGL_MESA_screen_surface")) {
+      printf("EGL_MESA_screen_surface is not supported\n");
+      exit(1);
+   }
+
    eglGetConfigs(d, NULL, 0, &numConfigs);
    configs = malloc(sizeof(*configs) *numConfigs);
    eglGetConfigs(d, configs, numConfigs, &numConfigs);
--- mesa-demos-8.2.0/src/egl/opengl/demo2.c.orig	2014-03-22 12:59:24.000000000 +0000
+++ mesa-demos-8.2.0/src/egl/opengl/demo2.c	2015-06-19 19:37:57.336934839 +0100
@@ -16,6 +16,7 @@
 
 /*#define FRONTBUFFER*/
 
+#ifdef EGL_MESA_screen_surface
 static void _subset_Rectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2,
                           GLfloat r, GLfloat g, GLfloat b)
 {
@@ -95,12 +96,13 @@
       printf(" Screen %d handle: %d\n", i, (int) screens[i]);
    }
 }
-
+#endif
 
 int
 main(int argc, char *argv[])
 {
    int maj, min;
+#ifdef EGL_MESA_screen_surface
    EGLContext ctx;
    EGLSurface pbuffer, screen_surf;
    EGLConfig configs[10];
@@ -115,6 +117,7 @@
    EGLModeMESA mode;
    EGLScreenMESA screen;
    EGLint count;
+#endif
 
    EGLDisplay d = eglGetDisplay(EGL_DEFAULT_DISPLAY);
    assert(d);
@@ -132,6 +135,7 @@
       exit(1);
    }
 
+#ifdef EGL_MESA_screen_surface
    eglGetConfigs(d, configs, 10, &numConfigs);
    printf("Got %d EGL configs:\n", numConfigs);
    for (i = 0; i < numConfigs; i++) {
@@ -211,6 +215,7 @@
    eglDestroySurface(d, pbuffer);
    eglDestroyContext(d, ctx);
    eglTerminate(d);
+#endif
 
    return 0;
 }
