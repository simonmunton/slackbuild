--- bpftrace-0.19.0/CMakeLists.txt.orig	2023-09-19 11:12:54.000000000 +0100
+++ bpftrace-0.19.0/CMakeLists.txt	2023-09-26 16:37:11.579261064 +0100
@@ -178,7 +178,7 @@
   endif()
 
   set(MIN_LLVM_MAJOR 6)
-  set(MAX_LLVM_MAJOR 16)
+  set(MAX_LLVM_MAJOR 17)
 
   if((${LLVM_VERSION_MAJOR} VERSION_LESS ${MIN_LLVM_MAJOR}) OR (${LLVM_VERSION_MAJOR} VERSION_GREATER ${MAX_LLVM_MAJOR}))
     message(SEND_ERROR "Unsupported LLVM version found via ${LLVM_INCLUDE_DIRS}: ${LLVM_VERSION_MAJOR}")
--- bpftrace-0.19.0/src/ast/passes/codegen_llvm.cpp.orig	2023-09-19 11:12:54.000000000 +0100
+++ bpftrace-0.19.0/src/ast/passes/codegen_llvm.cpp	2023-09-26 16:44:26.606240308 +0100
@@ -7,7 +7,9 @@
 #include <ctime>
 #include <fstream>
 
+#if LLVM_VERSION_MAJOR < 17
 #include <llvm-c/Transforms/IPO.h>
+#endif
 #include <llvm/IR/Constants.h>
 #include <llvm/IR/LLVMContext.h>
 #include <llvm/IR/LegacyPassManager.h>
@@ -16,8 +18,10 @@
 #if LLVM_VERSION_MAJOR >= 14
 #include <llvm/Passes/PassBuilder.h>
 #endif
+#if LLVM_VERSION_MAJOR < 17
 #include <llvm/Transforms/IPO.h>
 #include <llvm/Transforms/IPO/PassManagerBuilder.h>
+#endif
 #if LLVM_VERSION_MAJOR >= 14
 #include <llvm/MC/TargetRegistry.h>
 #else
--- bpftrace-0.19.0/src/cxxdemangler/cxxdemangler_llvm.cpp.orig	2023-09-19 11:12:54.000000000 +0100
+++ bpftrace-0.19.0/src/cxxdemangler/cxxdemangler_llvm.cpp	2023-09-26 16:41:45.030248017 +0100
@@ -6,7 +6,11 @@
 
 char* cxxdemangle(const char* mangled)
 {
+#if LLVM_VERSION_MAJOR >= 17
+  return llvm::itaniumDemangle(mangled);
+#else
   return llvm::itaniumDemangle(mangled, nullptr, nullptr, nullptr);
+#endif
 }
 
 } // namespace bpftrace
