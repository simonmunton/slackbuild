From 62fc7747d37cacfb21381961674c07ebab5f2fb9 Mon Sep 17 00:00:00 2001
From: Petr Machata <pmachata@redhat.com>
Date: Tue, 5 Feb 2013 15:42:06 +0100
Subject: Implement Base Procedure Call Standard for ARM

arch_fetch_arg_next still doesn't support "hardfp" extensions, but much of
the test suite is now clean, with only 16 failures left.
---
 sysdeps/linux-gnu/arm/fetch.c        |  112 +++++++++++++++++++++++++++++++++--
 testsuite/ltrace.main/parameters.exp |    5 -
 2 files changed, 106 insertions(+), 11 deletions(-)

Index: b/sysdeps/linux-gnu/arm/fetch.c
===================================================================
--- a/sysdeps/linux-gnu/arm/fetch.c
+++ b/sysdeps/linux-gnu/arm/fetch.c
@@ -232,17 +232,27 @@ struct fetch_context {
 		};
 		uint32_t fpscr;
 	} fpregs;
+	unsigned ncrn;
+	arch_addr_t sp;
+	arch_addr_t nsaa;
+	arch_addr_t ret_struct;
 	bool hardfp:1;
 };
 
 static int
 fetch_register_banks(struct Process *proc, struct fetch_context *context)
 {
+	if (ptrace(PTRACE_GETREGS, proc->pid, NULL, &context->regs) == -1)
+		return -1;
+
 	if (context->hardfp
 	    && ptrace(PTRACE_GETVFPREGS, proc->pid,
 		      NULL, &context->fpregs) == -1)
 		return -1;
 
+	context->ncrn = 0;
+	context->nsaa = context->sp = get_stack_pointer(proc);
+
 	return 0;
 }
 
@@ -251,13 +261,32 @@ arch_fetch_arg_init(enum tof type, struc
 		    struct arg_type_info *ret_info)
 {
 	struct fetch_context *context = malloc(sizeof(*context));
-	context->hardfp = proc->libraries->arch.hardfp;
+
+	{
+		struct Process *mainp = proc;
+		while (mainp->libraries == NULL && mainp->parent != NULL)
+			mainp = mainp->parent;
+		context->hardfp = mainp->libraries->arch.hardfp;
+	}
+
 	if (context == NULL
 	    || fetch_register_banks(proc, context) < 0) {
 		free(context);
 		return NULL;
 	}
 
+	if (ret_info->type == ARGTYPE_STRUCT
+	    || ret_info->type == ARGTYPE_ARRAY) {
+		size_t sz = type_sizeof(proc, ret_info);
+		assert(sz != (size_t)-1);
+		if (sz > 4) {
+			/* XXX double cast */
+			context->ret_struct
+				= (arch_addr_t)context->regs.uregs[0];
+			context->ncrn++;
+		}
+	}
+
 	return context;
 }
 
@@ -277,6 +306,54 @@ arch_fetch_arg_next(struct fetch_context
 		    struct Process *proc,
 		    struct arg_type_info *info, struct value *valuep)
 {
+	const size_t sz = type_sizeof(proc, info);
+	assert(sz != (size_t)-1);
+
+	/* IHI0042E_aapcs: If the argument requires double-word
+	 * alignment (8-byte), the NCRN is rounded up to the next even
+	 * register number.  */
+	const size_t al = type_alignof(proc, info);
+	assert(al != (size_t)-1);
+	if (al == 8)
+		ctx->ncrn = ((ctx->ncrn + 1) / 2) * 2;
+
+	/* If the size in words of the argument is not more than r4
+	 * minus NCRN, the argument is copied into core registers,
+	 * starting at the NCRN.  */
+	/* If the NCRN is less than r4 and the NSAA is equal to the
+	 * SP, the argument is split between core registers and the
+	 * stack.  */
+
+	const size_t words = (sz + 3) / 4;
+	if (ctx->ncrn < 4 && ctx->nsaa == ctx->sp) {
+		unsigned char *data = value_reserve(valuep, words * 4);
+		if (data == NULL)
+			return -1;
+		size_t i;
+		for (i = 0; i < words && ctx->ncrn < 4; ++i) {
+			memcpy(data, &ctx->regs.uregs[ctx->ncrn++], 4);
+			data += 4;
+		}
+		const size_t rest = (words - i) * 4;
+		if (rest > 0) {
+			umovebytes(proc, ctx->nsaa, data, rest);
+			ctx->nsaa += rest;
+		}
+		return 0;
+	}
+
+	assert(ctx->ncrn == 4);
+
+	/* If the argument required double-word alignment (8-byte),
+	 * then the NSAA is rounded up to the next double-word
+	 * address.  */
+	if (al == 8)
+		/* XXX double cast.  */
+		ctx->nsaa = (arch_addr_t)((((uintptr_t)ctx->nsaa + 7) / 8) * 8);
+
+	value_in_inferior(valuep, ctx->nsaa);
+	ctx->nsaa += sz;
+
 	return 0;
 }
 
@@ -288,21 +365,39 @@ arch_fetch_retval(struct fetch_context *
 	if (fetch_register_banks(proc, ctx) < 0)
 		return -1;
 
+	size_t sz = type_sizeof(proc, info);
+	assert(sz != (size_t)-1);
+
 	switch (info->type) {
+		unsigned char *data;
+		union {
+			struct {
+				uint32_t r0;
+				uint32_t r1;
+			} s;
+			unsigned char buf[8];
+		} u;
+
 	case ARGTYPE_VOID:
 		return 0;
 
 	case ARGTYPE_FLOAT:
 	case ARGTYPE_DOUBLE:
 		if (ctx->hardfp) {
-			size_t sz = type_sizeof(proc, info);
-			assert(sz != (size_t)-1);
 			unsigned char *data = value_reserve(valuep, sz);
 			if (data == NULL)
 				return -1;
 			memmove(data, &ctx->fpregs, sz);
 			return 0;
 		}
+		goto pass_in_registers;
+
+	case ARGTYPE_ARRAY:
+	case ARGTYPE_STRUCT:
+		if (sz > 4) {
+			value_in_inferior(valuep, ctx->ret_struct);
+			return 0;
+		}
 		/* Fall through.  */
 
 	case ARGTYPE_CHAR:
@@ -313,9 +408,14 @@ arch_fetch_retval(struct fetch_context *
 	case ARGTYPE_LONG:
 	case ARGTYPE_ULONG:
 	case ARGTYPE_POINTER:
-	case ARGTYPE_ARRAY:
-	case ARGTYPE_STRUCT:
-		return -1;
+	pass_in_registers:
+		if (arm_get_register(proc, ARM_REG_R3, &u.s.r0) < 0
+		    || (sz > 4 && arm_get_register(proc, ARM_REG_R1,
+						   &u.s.r1) < 0)
+		    || (data = value_reserve(valuep, sz)) == NULL)
+			return -1;
+		memmove(data, u.buf, sz);
+		return 0;
 	}
 	assert(info->type != info->type);
 	abort();
Index: b/testsuite/ltrace.main/parameters.exp
===================================================================
--- a/testsuite/ltrace.main/parameters.exp
+++ b/testsuite/ltrace.main/parameters.exp
@@ -35,9 +35,6 @@ if [regexp {ELF from incompatible archit
 	return
 }
 
-set xfail_spec {"arm*-*" }
-set xfail_spec_arm {"arm*-*"}
-
 # Verify the output
 set pattern "func_intptr(17)"
 ltrace_verify_output ${objdir}/${subdir}/${testfile}.ltrace $pattern 1
@@ -63,7 +60,6 @@ set pattern "func_ushort(33, 34)"
 ltrace_verify_output ${objdir}/${subdir}/${testfile}.ltrace $pattern 1
 set pattern "func_float(3.40*, -3.40*).*= 3.40*"
 ltrace_verify_output ${objdir}/${subdir}/${testfile}.ltrace $pattern 1
-eval "setup_xfail $xfail_spec"
 set pattern "func_double(3.40*, -3.40*).*= -3.40*"
 ltrace_verify_output ${objdir}/${subdir}/${testfile}.ltrace $pattern 1
 set pattern "func_typedef(BLUE)"
@@ -86,7 +82,6 @@ set pattern "func_work(\\\"x\\\")"
 ltrace_verify_output ${objdir}/${subdir}/${testfile}.ltrace $pattern 1
 set pattern "func_struct_2(17, { \\\"ABCDE\\\\\\\\0\\\", 0.250* }, 0.50*).*= { 0.250*, 'B', 'C' }"
 ltrace_verify_output ${objdir}/${subdir}/${testfile}.ltrace $pattern 1
-eval "setup_xfail $xfail_spec_arm"
 set pattern "<... func_call resumed> \\\"x\\\", \\\"y\\\")"
 ltrace_verify_output ${objdir}/${subdir}/${testfile}.ltrace $pattern 1
 
