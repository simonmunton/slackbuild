--- d4x-2.5.7.1/configure.orig	2006-04-12 17:48:29.000000000 +0100
+++ d4x-2.5.7.1/configure	2011-02-05 18:54:44.000000000 +0000
@@ -18397,10 +18397,6 @@
 _ACEOF
 
 
-cat >>confdefs.h <<\_ACEOF
-#define GTK_DISABLE_DEPRECATED
-_ACEOF
-
 
 cat >>confdefs.h <<\_ACEOF
 #define _FILE_OFFSET_BITS 64
--- d4x-2.5.7.1/main/ftp.cc.orig	2006-04-05 20:11:45.000000000 +0100
+++ d4x-2.5.7.1/main/ftp.cc	2011-02-05 19:09:44.000000000 +0000
@@ -261,7 +261,7 @@
 };
 
 static void d4x_ftp_parse_pasv(const char *str,int args[]){
-	char *a=index(str,'(');
+	char *a=index((char *)str,'(');
 	if (a==NULL) return;
 	a+=1;
 	int i=0;
--- d4x-2.5.7.1/main/html.cc.orig	2005-09-13 06:42:40.000000000 +0100
+++ d4x-2.5.7.1/main/html.cc	2011-02-05 19:03:19.000000000 +0000
@@ -700,7 +700,7 @@
 
 void tHtmlParser::set_content_type(const char *ct){
 	//Example: text/html; charset=koi8-r
-	char *a=index(ct,'=');
+	char *a=index((char *)ct,'=');
 	if (a) codepage=a+1;
 };
 
--- d4x-2.5.7.1/main/locstr.cc.orig	2005-11-11 21:38:45.000000000 +0000
+++ d4x-2.5.7.1/main/locstr.cc	2011-02-05 19:06:37.000000000 +0000
@@ -281,7 +281,7 @@
 	DBC_RETVAL_IF_FAIL(str!=NULL,NULL);
 	DBC_RETVAL_IF_FAIL(what!=NULL,NULL);
 	while (*str){
-		char *a=index(what,*str);
+		char *a=index((char *)what,*str);
 		if (a) return(str);
 		str++;
 	};
@@ -472,7 +472,7 @@
 char *escape_char(const char *where,char what,char bywhat){
 	DBC_RETVAL_IF_FAIL(where!=NULL,NULL);
 	int num=0;
-	char *tmp=index(where,what);
+	char *tmp=index((char *)where,what);
 	while(tmp){
 		num+=1;
 		tmp=index(tmp+1,what);
@@ -481,7 +481,7 @@
 		char *rvalue=new char[strlen(where)+num*2+1];
 		*rvalue=0;
 		char *r=rvalue;
-		tmp=index(where,what);
+		tmp=index((char *)where,what);
 		while(tmp){
 			if (tmp-where)
 				memcpy(r,where,tmp-where);
@@ -490,7 +490,7 @@
 			r[1]=what;
 			r+=2;
 			where=tmp+1;
-			tmp=index(where,what);
+			tmp=index((char *)where,what);
 		};
 		*r=0;
 		if (*where)
@@ -691,7 +691,7 @@
 	date.tm_isdst=-1;
 	if (tmp && *tmp) {
 		tmp=extract_string(tmp,data);
-		sscanf(data,"%i",&date.tm_mday);
+		sscanf(data,"%d",&date.tm_mday);
 	};
 	if (tmp && *tmp) {
 		tmp=extract_string(tmp,data);
@@ -699,7 +699,7 @@
 	};
 	if (tmp && *tmp) {
 		tmp=extract_string(tmp,data);
-		sscanf(data,"%i",&date.tm_year);
+		sscanf(data,"%d",&date.tm_year);
 		date.tm_year-=1900;
 	};
 	if (tmp && *tmp) {
@@ -962,17 +962,17 @@
 	DBC_RETVAL_IF_FAIL(a!=NULL,NULL);
 	DBC_RETVAL_IF_FAIL(b!=NULL,NULL);
 	int i=0;
-	char *temp=index(b,'/');
+	char *temp=index((char *)b,'/');
 	while (temp){
 		while (*temp=='/') temp+=1;
 		temp=index(temp,'/');
 		i+=1;
 	};
 	i-=1;
-	temp=rindex(a,'/');
+	temp=rindex((char *)a,'/');
 	while (temp && i>0){
 		*temp=0;
-		char *tmp=rindex(a,'/');
+		char *tmp=rindex((char *)a,'/');
 		*temp='/';
 		temp=tmp;
 		i-=1;
@@ -1362,6 +1362,8 @@
 };
 
 int file_copy(char *from,char *to,char *buf,int size){
+	if (equal(from, to))
+		return 0;
 	FILE *src=fopen(from,"r");
 	if (src==NULL){
 		return(-1);
--- d4x-2.5.7.1/main/signal.cc.orig	2006-04-05 21:11:43.000000000 +0100
+++ d4x-2.5.7.1/main/signal.cc	2011-02-05 18:58:12.000000000 +0000
@@ -89,7 +89,7 @@
 
 
 void my_pthreads_mutex_init(pthread_mutex_t *lock){
-#if defined(__linux__)
+#if defined(__linux__) || defined(__GLIBC__)
 /* manual page for mutexes said that mutexes in linux is fast by
    default...
  */
--- d4x-2.5.7.1/main/path.cc.orig	2005-09-13 05:25:53.000000000 +0100
+++ d4x-2.5.7.1/main/path.cc	2011-02-05 18:54:44.000000000 +0000
@@ -3,13 +3,15 @@
 using namespace d4x;
 
 void Path::normalize(){
-	size_type p=npos;
+	size_type p=0;
 	while((p=find("//",p))!=npos){
 		replace(p,2,"/");
 	};
+	p = 0;
 	while((p=find("/./",p))!=npos){
 		replace(p,3,"/");
 	};
+	p = 0;
 	while((p=find("/../"),p)!=npos){
 		size_type r=rfind('/',p-1);
 		if (r!=npos){
--- d4x-2.5.7.1/main/socket.cc.orig	2006-04-09 13:39:25.000000000 +0100
+++ d4x-2.5.7.1/main/socket.cc	2011-02-05 18:59:24.000000000 +0000
@@ -165,10 +165,10 @@
 		return(SOCKET_CANT_ALLOCATE);
 	int a=1;
 	setsockopt(fd,SOL_SOCKET,SO_KEEPALIVE,(char *)&a,sizeof(a));
-	setsockopt(fd,SOL_SOCKET,SO_KEEPALIVE,(char *)&a,sizeof(a));
+	//setsockopt(fd,SOL_SOCKET,SO_KEEPALIVE,(char *)&a,sizeof(a));
 	
 	size_t sl=2000; //set receive buffer to default+30% MTU size
-	setsockopt(fd,SOL_SOCKET,SO_RCVBUF,(char *)&sl,sizeof(sl));
+	//setsockopt(fd,SOL_SOCKET,SO_RCVBUF,(char *)&sl,sizeof(sl));
 
 	if (!connect_impl())
 		return(SOCKET_CANT_CONNECT);
--- d4x-2.5.7.1/main/httpd.cc.orig	2006-04-05 20:01:41.000000000 +0100
+++ d4x-2.5.7.1/main/httpd.cc	2011-02-05 18:54:44.000000000 +0000
@@ -124,10 +124,24 @@
 	if (tmp==NULL) return(NULL);
 	tmp=skip_spaces(tmp+1);
 	char *sqs=index(s,';');
-	if (sqs==NULL) sqs=tmp+strlen(tmp)-1;
-	else sqs-=1;
+	if (sqs==NULL) sqs=tmp+strlen(tmp);
 	int len=sqs-tmp;
+	while (len && isspace(tmp[len-1]))
+	  len--;
 	if (len<=0) return(NULL);
+	
+	if (*tmp == '"')
+	  {
+	    tmp++;
+	    len--;
+	    if (len<=0) return(NULL);
+	    if (tmp[len - 1] == '"')
+	      {
+	        len--;
+		if (len<=0) return(NULL);
+	      }
+	  }
+	
 	char *rval=copy_string2(tmp,len);
 	for (int i=len-1;i>=0;i++){
 		if (isspace(rval[i])) rval[i]=0;
@@ -198,6 +212,7 @@
 	ETag=NULL;
 	Auth=NULL;
 	D_FILE.type=T_FILE; //we don't know any other when download via http
+	D_FILE.date=time(NULL);
 	config.copy_ints(cfg);
 	if (cfg->split){
 		config.retry=0;
@@ -211,6 +226,7 @@
 	REQUESTED_URL=make_name();
 	if (!s)
 		return reconnect();
+reconnect();
 	HTTP->import_ctrl_socket(s);
 	RetrNum=1;
 	tDownloader::reconnect();
@@ -280,6 +296,7 @@
 	ETagChanged=0;
 	OldETag=ETag;
 	ETag=NULL;
+        D_FILE.date=time(NULL);
 	tString *temp=answer->last();
 	if (!temp) return -1;
 	fsize_t rvalue=0;
--- d4x-2.5.7.1/main/face/edit.cc.orig	2006-03-20 00:10:36.000000000 +0000
+++ d4x-2.5.7.1/main/face/edit.cc	2011-02-05 18:56:06.000000000 +0000
@@ -1450,7 +1450,7 @@
 
 static void _proxy_port_changed_(GtkEntry *entry,GtkEntry *entryh){
 	const char *tmp=gtk_entry_get_text(entryh);
-	char *tmp1=index(tmp,':');
+	char *tmp1=index((char *)tmp,':');
 	if (tmp1){
 		*tmp1=0;
 		char *ns=sum_strings(tmp,":",gtk_entry_get_text(entry),NULL);
--- d4x-2.5.7.1/main/face/list.cc.orig	2006-03-20 00:29:41.000000000 +0000
+++ d4x-2.5.7.1/main/face/list.cc	2011-02-05 18:54:44.000000000 +0000
@@ -8,7 +8,7 @@
  *	but WITHOUT ANY WARRANTY; without even the implied warranty of
  *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  */
-#define GTK_DISABLE_DEPRECATED
+//#define GTK_DISABLE_DEPRECATED
 
 #include <stdio.h>
 #include <gtk/gtk.h>
--- d4x-2.5.7.1/main/sslsocket.cc.orig	2005-09-16 05:27:04.000000000 +0100
+++ d4x-2.5.7.1/main/sslsocket.cc	2011-02-06 07:13:23.000000000 +0000
@@ -23,8 +23,26 @@
 		return(SOCKET_CANT_CONNECT);
 	con_flag=0;
 	SSL_set_fd(Handler,fd);
-	if (SSL_connect(Handler)!=1)
-		return(SOCKET_CANT_CONNECT);
+	int retry = 10, rv;
+	while (retry-- > 0 && (rv = SSL_connect(Handler)) < 0)
+	{
+	    switch (SSL_get_error(Handler, rv))
+	    {
+		case SSL_ERROR_WANT_READ:
+		    if (wait_for_read (10) == 0)
+		      retry = 10;
+		     break;
+		case SSL_ERROR_WANT_WRITE:
+		    if (wait_for_write (10) == 0)
+		      retry = 10;
+		    break;
+		default:
+		    retry = 0;
+		    break;
+	    }
+	}
+	if (rv!=1)
+	    return(SOCKET_CANT_CONNECT);
 	con_flag=1;
 	return 0;
 };
@@ -34,8 +52,26 @@
 		return(SOCKET_CANT_CONNECT);
 	con_flag=0;
 	SSL_set_fd(Handler,fd);
-	if (SSL_connect(Handler)!=1)
-		return(SOCKET_CANT_CONNECT);
+	int retry = 10, rv;
+	while (retry-- > 0 && (rv = SSL_connect(Handler)) < 0)
+	{
+	    switch (SSL_get_error(Handler, rv))
+	    {
+		case SSL_ERROR_WANT_READ:
+		    if (wait_for_read (10) == 0)
+		      retry = 10;
+		     break;
+		case SSL_ERROR_WANT_WRITE:
+		    if (wait_for_write (10) == 0)
+		      retry = 10;
+		    break;
+		default:
+		    retry = 0;
+		    break;
+	    }
+	}
+	if (rv!=1)
+	    return(SOCKET_CANT_CONNECT);
 	con_flag=1;
 	return 0;
 };
@@ -43,14 +79,53 @@
 int SSLSocket::send_string(const char *what,int timeout){
 	DBC_RETVAL_IF_FAIL(what!=NULL,-1);
 	int a=strlen(what);
-	int b=SSL_write(Handler,what,a);
+	int retry = 10;
+	int b;
+	while (retry-- > 0 && (b=SSL_write(Handler,what,a)) < 0)
+	{
+	    switch (SSL_get_error(Handler, b))
+	    {
+		case SSL_ERROR_WANT_READ:
+		    if (wait_for_read (10) == 0)
+		      retry = 10;
+		     break;
+		case SSL_ERROR_WANT_WRITE:
+		    if (wait_for_write (10) == 0)
+		      retry = 10;
+		    break;
+		default:
+		    retry = 0;
+		    break;
+	    }
+	}
 	if (b<0) return -1;
 	SBytes+=a-b;
 	return a-b;
 };
 
 fsize_t SSLSocket::lowlevel_read(char *where,fsize_t len){
-	return SSL_read(Handler,where,len);
+	int rv;
+	int retry = 10;
+
+	while (retry-- > 0 && (rv = SSL_read(Handler,where,len)) < 0)
+	{
+	    switch (SSL_get_error(Handler, rv))
+	    {
+		case SSL_ERROR_WANT_READ:
+		    if (wait_for_read (10) == 0)
+		      retry = 10;
+		     break;
+		case SSL_ERROR_WANT_WRITE:
+		    if (wait_for_write (10) == 0)
+		      retry = 10;
+		    break;
+		default:
+		    retry = 0;
+		    break;
+	    }
+	}
+
+	return rv;
 };
 
 void SSLSocket::down(){
