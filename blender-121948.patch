From 76d3b11109a6049727f6bf705725c54446037960 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Robert-Andr=C3=A9=20Mauchin?= <zebob.m@gmail.com>
Date: Sat, 18 May 2024 16:12:23 +0200
Subject: [PATCH] Update Audaspace to 1.5.0 for FFmpeg 7.0

This commit:

 - imports Audaspace 1.5.0, which allows compatibility with FFmpeg 7.0
 - cherry-picks upstream commit 5efc5c45e1c6608b32d73055b6ecec5825da004c
   which is a patch I sent to fix some variable assignation in the new
   code.
 - keeps upstream bugfixes backported in a5ba4032e0dd581776704ca1f15a8264578a1f27
---
 extern/audaspace/AUTHORS                      |   4 +
 extern/audaspace/CHANGES                      |  27 +++++
 extern/audaspace/README.md                    |   2 +-
 extern/audaspace/plugins/ffmpeg/FFMPEG.cpp    |   2 +-
 extern/audaspace/plugins/ffmpeg/FFMPEG.h      |   2 +-
 .../audaspace/plugins/ffmpeg/FFMPEGReader.cpp |  95 ++-------------
 .../audaspace/plugins/ffmpeg/FFMPEGReader.h   |   2 +-
 .../audaspace/plugins/ffmpeg/FFMPEGWriter.cpp | 109 ++----------------
 .../audaspace/plugins/ffmpeg/FFMPEGWriter.h   |   2 +-
 .../plugins/pulseaudio/PulseAudioDevice.cpp   |   2 +
 .../audaspace/src/devices/OpenCloseDevice.cpp |   1 -
 11 files changed, 57 insertions(+), 191 deletions(-)

diff --git a/extern/audaspace/AUTHORS b/extern/audaspace/AUTHORS
index f1c740e2007..d9a482f976e 100644
--- a/extern/audaspace/AUTHORS
+++ b/extern/audaspace/AUTHORS
@@ -19,6 +19,10 @@ The Equalizer sound effect has been added by
 
 - Marcos Perez
 
+Some performance improvements, espeially to the JOSResampler have been made by:
+
+- Aras Pranckevičius
+
 Several people provided fixes:
 
 - Aaron Carlisle
diff --git a/extern/audaspace/CHANGES b/extern/audaspace/CHANGES
index 9682e1388a2..4218d4f52ce 100644
--- a/extern/audaspace/CHANGES
+++ b/extern/audaspace/CHANGES
@@ -1,3 +1,30 @@
+Audaspace 1.5
+
+- Performance improvements and two more quality presets for the JOS resampler.
+- Bugfixes for PulseAudio.
+- CoreAudio device is only opened on demand.
+- FFMPEG 7 support and dropped support for FFMPEG older than 6.
+- Various minor fixes and improvements.
+
+Detailed list of changes:
+
+3566597 FFMPEG Update
+c158a27 Porting bugfix from Blender.
+edb388b Bugfix for PulseAudio: buffers not cleared after pause.
+6affec8 Port fix from Blender.
+a99262e Load CoreAudio device on demand
+ae29ce2 Adding default quality parameter also to JOSResample.
+dae2044 Renaming resample quality enum values in the C API.
+8c810b5 Add resampling quality parameter to various mixdown functions, and to PySound resample
+1b9b7f9 Add ResampleQuality enum and APIs to control resampling quality
+4bfd596 Avoid std::string copies by value
+0d18fe7 JOSResampleReader performance and faster quality settings (#18)
+2a300d9 Filter design python script.
+5f745ff Bugfix for reading an animated property with a negative time value.
+04eeb56 Fix python documentation.
+631850b Update AUTHORS.
+db2ff58 Improve seeking for animated sequences
+
 Audaspace 1.4
 
 - Support for OS specific/native audio devices/backends has been added, that is PulseAudio (Linux), WASAPI (Windows) and CoreAudio (MacOS).
diff --git a/extern/audaspace/README.md b/extern/audaspace/README.md
index bfc343e2b49..d78e82253fd 100644
--- a/extern/audaspace/README.md
+++ b/extern/audaspace/README.md
@@ -32,7 +32,7 @@ The following (probably incomplete) features are supported by audaspace:
 License
 -------
 
-> Copyright © 2009-2023 Jörg Müller. All rights reserved.
+> Copyright © 2009-2024 Jörg Müller. All rights reserved.
 >
 > Licensed under the Apache License, Version 2.0 (the "License");
 > you may not use this file except in compliance with the License.
diff --git a/extern/audaspace/plugins/ffmpeg/FFMPEG.cpp b/extern/audaspace/plugins/ffmpeg/FFMPEG.cpp
index d9bfe0b50c4..6e6f70fedb3 100644
--- a/extern/audaspace/plugins/ffmpeg/FFMPEG.cpp
+++ b/extern/audaspace/plugins/ffmpeg/FFMPEG.cpp
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright 2009-2016 Jörg Müller
+ * Copyright 2009-2024 Jörg Müller
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/extern/audaspace/plugins/ffmpeg/FFMPEG.h b/extern/audaspace/plugins/ffmpeg/FFMPEG.h
index 974e3350b2d..972c8228784 100644
--- a/extern/audaspace/plugins/ffmpeg/FFMPEG.h
+++ b/extern/audaspace/plugins/ffmpeg/FFMPEG.h
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright 2009-2016 Jörg Müller
+ * Copyright 2009-2024 Jörg Müller
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/extern/audaspace/plugins/ffmpeg/FFMPEGReader.cpp b/extern/audaspace/plugins/ffmpeg/FFMPEGReader.cpp
index c0e16d6a887..0300e4f5185 100644
--- a/extern/audaspace/plugins/ffmpeg/FFMPEGReader.cpp
+++ b/extern/audaspace/plugins/ffmpeg/FFMPEGReader.cpp
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright 2009-2016 Jörg Müller
+ * Copyright 2009-2024 Jörg Müller
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,10 +27,6 @@ extern "C" {
 
 AUD_NAMESPACE_BEGIN
 
-#if LIBAVCODEC_VERSION_MAJOR < 58
-#define FFMPEG_OLD_CODE
-#endif
-
 SampleFormat FFMPEGReader::convertSampleFormat(AVSampleFormat format)
 {
 	switch(av_get_packed_sample_fmt(format))
@@ -55,54 +51,6 @@ int FFMPEGReader::decode(AVPacket& packet, Buffer& buffer)
 	int buf_size = buffer.getSize();
 	int buf_pos = 0;
 
-#ifdef FFMPEG_OLD_CODE
-	int got_frame;
-	int read_length;
-	uint8_t* orig_data = packet.data;
-	int orig_size = packet.size;
-
-	while(packet.size > 0)
-	{
-		got_frame = 0;
-
-		read_length = avcodec_decode_audio4(m_codecCtx, m_frame, &got_frame, &packet);
-		if(read_length < 0)
-			break;
-
-		if(got_frame)
-		{
-			int data_size = av_samples_get_buffer_size(nullptr, m_codecCtx->channels, m_frame->nb_samples, m_codecCtx->sample_fmt, 1);
-
-			if(buf_size - buf_pos < data_size)
-			{
-				buffer.resize(buf_size + data_size, true);
-				buf_size += data_size;
-			}
-
-			if(m_tointerleave)
-			{
-				int single_size = data_size / m_codecCtx->channels / m_frame->nb_samples;
-				for(int channel = 0; channel < m_codecCtx->channels; channel++)
-				{
-					for(int i = 0; i < m_frame->nb_samples; i++)
-					{
-						std::memcpy(((data_t*)buffer.getBuffer()) + buf_pos + ((m_codecCtx->channels * i) + channel) * single_size,
-							   m_frame->data[channel] + i * single_size, single_size);
-					}
-				}
-			}
-			else
-				std::memcpy(((data_t*)buffer.getBuffer()) + buf_pos, m_frame->data[0], data_size);
-
-			buf_pos += data_size;
-		}
-		packet.size -= read_length;
-		packet.data += read_length;
-	}
-
-	packet.data = orig_data;
-	packet.size = orig_size;
-#else
 	avcodec_send_packet(m_codecCtx, &packet);
 
 	while(true)
@@ -112,7 +60,7 @@ int FFMPEGReader::decode(AVPacket& packet, Buffer& buffer)
 		if(ret != 0)
 			break;
 
-		int data_size = av_samples_get_buffer_size(nullptr, m_codecCtx->channels, m_frame->nb_samples, m_codecCtx->sample_fmt, 1);
+		int data_size = av_samples_get_buffer_size(nullptr, m_codecCtx->ch_layout.nb_channels, m_frame->nb_samples, m_codecCtx->sample_fmt, 1);
 
 		if(buf_size - buf_pos < data_size)
 		{
@@ -122,12 +70,12 @@ int FFMPEGReader::decode(AVPacket& packet, Buffer& buffer)
 
 		if(m_tointerleave)
 		{
-			int single_size = data_size / m_codecCtx->channels / m_frame->nb_samples;
-			for(int channel = 0; channel < m_codecCtx->channels; channel++)
+			int single_size = data_size / m_codecCtx->ch_layout.nb_channels / m_frame->nb_samples;
+			for(int channel = 0; channel < m_codecCtx->ch_layout.nb_channels; channel++)
 			{
 				for(int i = 0; i < m_frame->nb_samples; i++)
 				{
-					std::memcpy(((data_t*)buffer.getBuffer()) + buf_pos + ((m_codecCtx->channels * i) + channel) * single_size,
+					std::memcpy(((data_t*)buffer.getBuffer()) + buf_pos + ((m_codecCtx->ch_layout.nb_channels * i) + channel) * single_size,
 						   m_frame->data[channel] + i * single_size, single_size);
 				}
 			}
@@ -137,7 +85,6 @@ int FFMPEGReader::decode(AVPacket& packet, Buffer& buffer)
 
 		buf_pos += data_size;
 	}
-#endif
 
 	return buf_pos;
 }
@@ -155,11 +102,7 @@ void FFMPEGReader::init(int stream)
 
 	for(unsigned int i = 0; i < m_formatCtx->nb_streams; i++)
 	{
-#ifdef FFMPEG_OLD_CODE
-		if((m_formatCtx->streams[i]->codec->codec_type == AVMEDIA_TYPE_AUDIO)
-#else
 		if((m_formatCtx->streams[i]->codecpar->codec_type == AVMEDIA_TYPE_AUDIO)
-#endif
 			&& (m_stream < 0))
 		{
 			if(stream == 0)
@@ -176,38 +119,28 @@ void FFMPEGReader::init(int stream)
 		AUD_THROW(FileException, "File couldn't be read, no audio stream found by ffmpeg.");
 
 	// get a decoder and open it
-#ifndef FFMPEG_OLD_CODE
 	const AVCodec* aCodec = avcodec_find_decoder(m_formatCtx->streams[m_stream]->codecpar->codec_id);
 
 	if(!aCodec)
 		AUD_THROW(FileException, "File couldn't be read, no decoder found with ffmpeg.");
-#endif
 
 	m_frame = av_frame_alloc();
 
 	if(!m_frame)
 		AUD_THROW(FileException, "File couldn't be read, ffmpeg frame couldn't be allocated.");
 
-#ifdef FFMPEG_OLD_CODE
-	m_codecCtx = m_formatCtx->streams[m_stream]->codec;
-
-	AVCodec* aCodec = avcodec_find_decoder(m_codecCtx->codec_id);
-#else
 	m_codecCtx = avcodec_alloc_context3(aCodec);
-#endif
 
 	if(!m_codecCtx)
 		AUD_THROW(FileException, "File couldn't be read, ffmpeg context couldn't be allocated.");
 
-#ifndef FFMPEG_OLD_CODE
 	if(avcodec_parameters_to_context(m_codecCtx, m_formatCtx->streams[m_stream]->codecpar) < 0)
 		AUD_THROW(FileException, "File couldn't be read, ffmpeg decoder parameters couldn't be copied to decoder context.");
-#endif
 
 	if(avcodec_open2(m_codecCtx, aCodec, nullptr) < 0)
 		AUD_THROW(FileException, "File couldn't be read, ffmpeg codec couldn't be opened.");
 
-	m_specs.channels = (Channels) m_codecCtx->channels;
+	m_specs.channels = (Channels) m_codecCtx->ch_layout.nb_channels;
 	m_tointerleave = av_sample_fmt_is_planar(m_codecCtx->sample_fmt);
 
 	switch(av_get_packed_sample_fmt(m_codecCtx->sample_fmt))
@@ -303,12 +236,8 @@ FFMPEGReader::~FFMPEGReader()
 {
 	if(m_frame)
 		av_frame_free(&m_frame);
-#ifdef FFMPEG_OLD_CODE
-	avcodec_close(m_codecCtx);
-#else
 	if(m_codecCtx)
 		avcodec_free_context(&m_codecCtx);
-#endif
 	avformat_close_input(&m_formatCtx);
 }
 
@@ -318,11 +247,7 @@ std::vector<StreamInfo> FFMPEGReader::queryStreams()
 
 	for(unsigned int i = 0; i < m_formatCtx->nb_streams; i++)
 	{
-#ifdef FFMPEG_OLD_CODE
-		if(m_formatCtx->streams[i]->codec->codec_type == AVMEDIA_TYPE_AUDIO)
-#else
 		if(m_formatCtx->streams[i]->codecpar->codec_type == AVMEDIA_TYPE_AUDIO)
-#endif
 		{
 			StreamInfo info;
 
@@ -340,15 +265,9 @@ std::vector<StreamInfo> FFMPEGReader::queryStreams()
 			else
 				info.duration = 0;
 
-#ifdef FFMPEG_OLD_CODE
-			info.specs.channels = Channels(m_formatCtx->streams[i]->codec->channels);
-			info.specs.rate = m_formatCtx->streams[i]->codec->sample_rate;
-			info.specs.format = convertSampleFormat(m_formatCtx->streams[i]->codec->sample_fmt);
-#else
-			info.specs.channels = Channels(m_formatCtx->streams[i]->codecpar->channels);
+			info.specs.channels = Channels(m_formatCtx->streams[i]->codecpar->ch_layout.nb_channels);
 			info.specs.rate = m_formatCtx->streams[i]->codecpar->sample_rate;
 			info.specs.format = convertSampleFormat(AVSampleFormat(m_formatCtx->streams[i]->codecpar->format));
-#endif
 
 			result.emplace_back(info);
 		}
diff --git a/extern/audaspace/plugins/ffmpeg/FFMPEGReader.h b/extern/audaspace/plugins/ffmpeg/FFMPEGReader.h
index dc8c292c0ed..30d321243f1 100644
--- a/extern/audaspace/plugins/ffmpeg/FFMPEGReader.h
+++ b/extern/audaspace/plugins/ffmpeg/FFMPEGReader.h
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright 2009-2016 Jörg Müller
+ * Copyright 2009-2024 Jörg Müller
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/extern/audaspace/plugins/ffmpeg/FFMPEGWriter.cpp b/extern/audaspace/plugins/ffmpeg/FFMPEGWriter.cpp
index 9cadfe9c092..4a9e5dd56e8 100644
--- a/extern/audaspace/plugins/ffmpeg/FFMPEGWriter.cpp
+++ b/extern/audaspace/plugins/ffmpeg/FFMPEGWriter.cpp
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright 2009-2016 Jörg Müller
+ * Copyright 2009-2024 Jörg Müller
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,10 +30,6 @@ extern "C" {
 
 AUD_NAMESPACE_BEGIN
 
-#if LIBAVCODEC_VERSION_MAJOR < 58
-#define FFMPEG_OLD_CODE
-#endif
-
 void FFMPEGWriter::encode()
 {
 	sample_t* data = m_input_buffer.getBuffer();
@@ -65,20 +61,9 @@ void FFMPEGWriter::encode()
 		if(m_input_size)
 			m_convert(reinterpret_cast<data_t*>(data), reinterpret_cast<data_t*>(data), m_input_samples * m_specs.channels);
 
-#ifdef FFMPEG_OLD_CODE
-	m_packet->data = nullptr;
-	m_packet->size = 0;
-
-	av_init_packet(m_packet);
-
-	av_frame_unref(m_frame);
-	int got_packet;
-#endif
-
 	m_frame->nb_samples = m_input_samples;
 	m_frame->format = m_codecCtx->sample_fmt;
-	m_frame->channel_layout = m_codecCtx->channel_layout;
-	m_frame->channels = m_specs.channels;
+	av_channel_layout_copy(&m_frame->ch_layout, &m_codecCtx->ch_layout);
 
 	if(avcodec_fill_audio_frame(m_frame, m_specs.channels, m_codecCtx->sample_fmt, reinterpret_cast<data_t*>(data), m_input_buffer.getSize(), 0) < 0)
 		AUD_THROW(FileException, "File couldn't be written, filling the audio frame failed with ffmpeg.");
@@ -86,24 +71,6 @@ void FFMPEGWriter::encode()
 	AVRational sample_time = { 1, static_cast<int>(m_specs.rate) };
 	m_frame->pts = av_rescale_q(m_position - m_input_samples, m_codecCtx->time_base, sample_time);
 
-#ifdef FFMPEG_OLD_CODE
-	if(avcodec_encode_audio2(m_codecCtx, m_packet, m_frame, &got_packet))
-	{
-		AUD_THROW(FileException, "File couldn't be written, audio encoding failed with ffmpeg.");
-	}
-
-	if(got_packet)
-	{
-		m_packet->flags |= AV_PKT_FLAG_KEY;
-		m_packet->stream_index = m_stream->index;
-		if(av_write_frame(m_formatCtx, m_packet) < 0)
-		{
-			av_free_packet(m_packet);
-			AUD_THROW(FileException, "Frame couldn't be writen to the file with ffmpeg.");
-		}
-		av_free_packet(m_packet);
-	}
-#else
 	if(avcodec_send_frame(m_codecCtx, m_frame) < 0)
 		AUD_THROW(FileException, "File couldn't be written, audio encoding failed with ffmpeg.");
 
@@ -114,37 +81,10 @@ void FFMPEGWriter::encode()
 		if(av_write_frame(m_formatCtx, m_packet) < 0)
 			AUD_THROW(FileException, "Frame couldn't be writen to the file with ffmpeg.");
 	}
-#endif
 }
 
 void FFMPEGWriter::close()
 {
-#ifdef FFMPEG_OLD_CODE
-	int got_packet = true;
-
-	while(got_packet)
-	{
-		m_packet->data = nullptr;
-		m_packet->size = 0;
-
-		av_init_packet(m_packet);
-
-		if(avcodec_encode_audio2(m_codecCtx, m_packet, nullptr, &got_packet))
-			AUD_THROW(FileException, "File end couldn't be written, audio encoding failed with ffmpeg.");
-
-		if(got_packet)
-		{
-			m_packet->flags |= AV_PKT_FLAG_KEY;
-			m_packet->stream_index = m_stream->index;
-			if(av_write_frame(m_formatCtx, m_packet))
-			{
-				av_free_packet(m_packet);
-				AUD_THROW(FileException, "Final frames couldn't be writen to the file with ffmpeg.");
-			}
-			av_free_packet(m_packet);
-		}
-	}
-#else
 	if(avcodec_send_frame(m_codecCtx, nullptr) < 0)
 		AUD_THROW(FileException, "File couldn't be written, audio encoding failed with ffmpeg.");
 
@@ -155,7 +95,6 @@ void FFMPEGWriter::close()
 		if(av_write_frame(m_formatCtx, m_packet) < 0)
 			AUD_THROW(FileException, "Frame couldn't be writen to the file with ffmpeg.");
 	}
-#endif
 }
 
 FFMPEGWriter::FFMPEGWriter(const std::string &filename, DeviceSpecs specs, Container format, Codec codec, unsigned int bitrate) :
@@ -237,33 +176,33 @@ FFMPEGWriter::FFMPEGWriter(const std::string &filename, DeviceSpecs specs, Conta
 		break;
 	}
 
-	uint64_t channel_layout = 0;
+	AVChannelLayout channel_layout{};
 
 	switch(m_specs.channels)
 	{
 	case CHANNELS_MONO:
-		channel_layout = AV_CH_LAYOUT_MONO;
+		channel_layout = AV_CHANNEL_LAYOUT_MONO;
 		break;
 	case CHANNELS_STEREO:
-		channel_layout = AV_CH_LAYOUT_STEREO;
+		channel_layout = AV_CHANNEL_LAYOUT_STEREO;
 		break;
 	case CHANNELS_STEREO_LFE:
-		channel_layout = AV_CH_LAYOUT_2POINT1;
+		channel_layout = AV_CHANNEL_LAYOUT_2POINT1;
 		break;
 	case CHANNELS_SURROUND4:
-		channel_layout = AV_CH_LAYOUT_QUAD;
+		channel_layout = AV_CHANNEL_LAYOUT_QUAD;
 		break;
 	case CHANNELS_SURROUND5:
-		channel_layout = AV_CH_LAYOUT_5POINT0_BACK;
+		channel_layout = AV_CHANNEL_LAYOUT_5POINT0_BACK;
 		break;
 	case CHANNELS_SURROUND51:
-		channel_layout = AV_CH_LAYOUT_5POINT1_BACK;
+		channel_layout = AV_CHANNEL_LAYOUT_5POINT1_BACK;
 		break;
 	case CHANNELS_SURROUND61:
-		channel_layout = AV_CH_LAYOUT_6POINT1_BACK;
+		channel_layout = AV_CHANNEL_LAYOUT_6POINT1_BACK;
 		break;
 	case CHANNELS_SURROUND71:
-		channel_layout = AV_CH_LAYOUT_7POINT1;
+		channel_layout = AV_CHANNEL_LAYOUT_7POINT1;
 		break;
 	default:
 		AUD_THROW(FileException, "File couldn't be written, channel layout not supported.");
@@ -284,11 +223,7 @@ FFMPEGWriter::FFMPEGWriter(const std::string &filename, DeviceSpecs specs, Conta
 
 		m_stream->id = m_formatCtx->nb_streams - 1;
 
-#ifdef FFMPEG_OLD_CODE
-		m_codecCtx = m_stream->codec;
-#else
 		m_codecCtx = avcodec_alloc_context3(codec);
-#endif
 
 		if(!m_codecCtx)
 			AUD_THROW(FileException, "File couldn't be written, context creation failed with ffmpeg.");
@@ -399,24 +334,18 @@ FFMPEGWriter::FFMPEGWriter(const std::string &filename, DeviceSpecs specs, Conta
 
 		m_specs.rate = m_codecCtx->sample_rate;
 
-#ifdef FFMPEG_OLD_CODE
-		m_codecCtx->codec_id = audio_codec;
-#endif
 
 		m_codecCtx->codec_type = AVMEDIA_TYPE_AUDIO;
 		m_codecCtx->bit_rate = bitrate;
-		m_codecCtx->channel_layout = channel_layout;
-		m_codecCtx->channels = m_specs.channels;
+		av_channel_layout_copy(&m_codecCtx->ch_layout, &channel_layout);
 		m_stream->time_base.num = m_codecCtx->time_base.num = 1;
 		m_stream->time_base.den = m_codecCtx->time_base.den = m_codecCtx->sample_rate;
 
 		if(avcodec_open2(m_codecCtx, codec, nullptr) < 0)
 			AUD_THROW(FileException, "File couldn't be written, encoder couldn't be opened with ffmpeg.");
 
-#ifndef FFMPEG_OLD_CODE
 		if(avcodec_parameters_from_context(m_stream->codecpar, m_codecCtx) < 0)
 			AUD_THROW(FileException, "File couldn't be written, codec parameters couldn't be copied to the context.");
-#endif
 
 		int samplesize = std::max(int(AUD_SAMPLE_SIZE(m_specs)), AUD_DEVICE_SAMPLE_SIZE(m_specs));
 
@@ -431,19 +360,13 @@ FFMPEGWriter::FFMPEGWriter(const std::string &filename, DeviceSpecs specs, Conta
 	}
 	catch(Exception&)
 	{
-#ifndef FFMPEG_OLD_CODE
 		if(m_codecCtx)
 			avcodec_free_context(&m_codecCtx);
-#endif
 		avformat_free_context(m_formatCtx);
 		throw;
 	}
 
-#ifdef FFMPEG_OLD_CODE
-	m_packet = new AVPacket({});
-#else
 	m_packet = av_packet_alloc();
-#endif
 
 	m_frame = av_frame_alloc();
 }
@@ -463,19 +386,11 @@ FFMPEGWriter::~FFMPEGWriter()
 
 	if(m_packet)
 	{
-#ifdef FFMPEG_OLD_CODE
-		delete m_packet;
-#else
 		av_packet_free(&m_packet);
-#endif
 	}
 
-#ifdef FFMPEG_OLD_CODE
-	avcodec_close(m_codecCtx);
-#else
 	if(m_codecCtx)
 		avcodec_free_context(&m_codecCtx);
-#endif
 
 	avio_closep(&m_formatCtx->pb);
 	avformat_free_context(m_formatCtx);
diff --git a/extern/audaspace/plugins/ffmpeg/FFMPEGWriter.h b/extern/audaspace/plugins/ffmpeg/FFMPEGWriter.h
index 7e39d8cb92b..a8e2984f31a 100644
--- a/extern/audaspace/plugins/ffmpeg/FFMPEGWriter.h
+++ b/extern/audaspace/plugins/ffmpeg/FFMPEGWriter.h
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright 2009-2016 Jörg Müller
+ * Copyright 2009-2024 Jörg Müller
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/extern/audaspace/plugins/pulseaudio/PulseAudioDevice.cpp b/extern/audaspace/plugins/pulseaudio/PulseAudioDevice.cpp
index ba0347774b5..ba98d3a0da6 100644
--- a/extern/audaspace/plugins/pulseaudio/PulseAudioDevice.cpp
+++ b/extern/audaspace/plugins/pulseaudio/PulseAudioDevice.cpp
@@ -124,11 +124,13 @@ void PulseAudioDevice::playing(bool playing)
 
 	AUD_pa_threaded_mainloop_lock(m_mainloop);
 	AUD_pa_stream_cork(m_stream, playing ? 0 : 1, nullptr, nullptr);
+
 	if(!playing)
 	{
 		AUD_pa_stream_flush(m_stream, nullptr, nullptr);
 		m_clear = true;
 	}
+
 	AUD_pa_threaded_mainloop_unlock(m_mainloop);
 }
 
diff --git a/extern/audaspace/src/devices/OpenCloseDevice.cpp b/extern/audaspace/src/devices/OpenCloseDevice.cpp
index 43645005779..063fab92dd2 100644
--- a/extern/audaspace/src/devices/OpenCloseDevice.cpp
+++ b/extern/audaspace/src/devices/OpenCloseDevice.cpp
@@ -57,7 +57,6 @@ void OpenCloseDevice::playing(bool playing)
 				open();
 				m_device_opened = true;
 			}
-
 			start();
 		}
 		else
-- 
2.30.2

