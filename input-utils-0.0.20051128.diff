diff -Nur input-utils-0.0.20051128/GNUmakefile input-utils-0.0.20051128.new/GNUmakefile
--- input-utils-0.0.20051128/GNUmakefile	2005-07-27 15:27:00.000000000 +0100
+++ input-utils-0.0.20051128.new/GNUmakefile	2009-09-14 10:22:01.000000000 +0100
@@ -7,7 +7,7 @@
 LDLIBS	+= -lm
 
 # build
-TARGETS	:= lsinput input-events input-kbd input-send input-recv lircd.conf
+TARGETS	:= lsinput input-events input-kbd lircd.conf
 HEADERS	:= EV.h REL.h KEY.h BTN.h BUS.h
 
 # default target
@@ -45,7 +45,7 @@
 
 install: build
 	$(INSTALL_DIR) $(bindir) $(mandir)/man8
-	$(INSTALL_BINARY) lsinput input-events input-kbd input-send input-recv $(bindir)
+	$(INSTALL_BINARY) lsinput input-events input-kbd $(bindir)
 	$(INSTALL_DATA) lsinput.man $(mandir)/man8/lsinput.8
 	$(INSTALL_DATA) input-kbd.man $(mandir)/man8/input-kbd.8
 	$(INSTALL_DATA) input-events.man $(mandir)/man8/input-events.8
diff -Nur input-utils-0.0.20051128/GNUmakefile.orig input-utils-0.0.20051128.new/GNUmakefile.orig
--- input-utils-0.0.20051128/GNUmakefile.orig	1970-01-01 01:00:00.000000000 +0100
+++ input-utils-0.0.20051128.new/GNUmakefile.orig	2005-07-27 15:27:00.000000000 +0100
@@ -0,0 +1,66 @@
+# config
+-include Make.config
+include mk/Variables.mk
+
+# add our flags + libs
+CFLAGS	+= -DVERSION='"$(VERSION)"'
+LDLIBS	+= -lm
+
+# build
+TARGETS	:= lsinput input-events input-kbd input-send input-recv lircd.conf
+HEADERS	:= EV.h REL.h KEY.h BTN.h BUS.h
+
+# default target
+all: build
+
+
+#################################################################
+# poor man's autoconf ;-)
+
+include mk/Autoconf.mk
+
+define make-config
+LIB		:= $(LIB)
+endef
+
+
+########################################################################
+# rules
+
+build: $(TARGETS)
+
+$(HEADERS): name.sh
+	sh name.sh $* > $@
+
+lircd.conf: lirc.sh 
+	sh lirc.sh > $@
+
+lsinput: lsinput.o input.o
+input-events: input-events.o input.o
+input-kbd: input-kbd.o input.o
+input-send: input-send.o input.o tcp.o
+input-recv: input-recv.o input.o tcp.o
+
+input.o: input.c $(HEADERS)
+
+install: build
+	$(INSTALL_DIR) $(bindir) $(mandir)/man8
+	$(INSTALL_BINARY) lsinput input-events input-kbd input-send input-recv $(bindir)
+	$(INSTALL_DATA) lsinput.man $(mandir)/man8/lsinput.8
+	$(INSTALL_DATA) input-kbd.man $(mandir)/man8/input-kbd.8
+	$(INSTALL_DATA) input-events.man $(mandir)/man8/input-events.8
+
+
+clean:
+	-rm -f *.o $(depfiles)
+
+realclean distclean: clean
+	-rm -f Make.config
+	-rm -f $(TARGETS) $(HEADERS) *~ xpm/*~ *.bak
+
+#############################################
+
+include mk/Compile.mk
+include mk/Maintainer.mk
+-include $(depfiles)
+
diff -Nur input-utils-0.0.20051128/input-events.man input-utils-0.0.20051128.new/input-events.man
--- input-utils-0.0.20051128/input-events.man	2005-07-27 15:17:04.000000000 +0100
+++ input-utils-0.0.20051128.new/input-events.man	2009-09-14 10:22:08.000000000 +0100
@@ -1,7 +1,7 @@
 .TH INPUT-EVENTS 8 "July 2005" "" ""
 .SH NAME
 
-input-events \- list input devices
+input-events \- print input events
 
 .SH SYNOPSIS
 \fBinput\-events \fR [\fB\-t\fR\ \fIsec\fR] [\fB\-g\fR]\ \fIdevnr\fR
diff -Nur input-utils-0.0.20051128/input-events.man.orig input-utils-0.0.20051128.new/input-events.man.orig
--- input-utils-0.0.20051128/input-events.man.orig	1970-01-01 01:00:00.000000000 +0100
+++ input-utils-0.0.20051128.new/input-events.man.orig	2005-07-27 15:17:04.000000000 +0100
@@ -0,0 +1,34 @@
+.TH INPUT-EVENTS 8 "July 2005" "" ""
+.SH NAME
+
+input-events \- list input devices
+
+.SH SYNOPSIS
+\fBinput\-events \fR [\fB\-t\fR\ \fIsec\fR] [\fB\-g\fR]\ \fIdevnr\fR
+
+.SH DESCRIPTION
+.PP
+\fBinput\-events\fR listens for events on kernel input device
+\fIdevnr\fR and prints them.
+
+.SH OPTIONS
+.TP
+\fIdevnr\fR
+The index of the input device to use (0 for /dev/input/event0 and so on).
+
+.TP
+\fB\-g\fR
+Grab device using EVIOCGRAB, i\&.e\&.,
+get exclusive access to the device.
+
+.TP
+\fB\-t\fR\ \fIsec\fR
+Set the timeout.
+The program will quit after \fIsec\fR seconds without activity.
+
+.SH SEE ALSO
+.PP
+lsinput(8)
+
+.SH AUTHOR
+Gerd Knorr.
diff -Nur input-utils-0.0.20051128/input-kbd.c input-utils-0.0.20051128.new/input-kbd.c
--- input-utils-0.0.20051128/input-kbd.c	2004-04-21 12:55:46.000000000 +0100
+++ input-utils-0.0.20051128.new/input-kbd.c	2009-09-14 10:22:49.000000000 +0100
@@ -36,7 +36,6 @@
 		entry.keycode  = KEY_RESERVED;
 		rc = ioctl(fd, EVIOCGKEYCODE, &entry);
 		if (rc < 0) {
-			map->size--;
 			break;
 		}
 		if (map->size >= map->alloc) {
@@ -49,7 +48,7 @@
 			map->keys++;
 	}
 	if (map->keys) {
-		fprintf(stderr,"map: %d keys, size: %d/%d\n",
+		printf("map: %d keys, size: %d/%d\n",
 			map->keys, map->size, map->alloc);
 		return map;
 	} else {
@@ -65,7 +64,7 @@
 	for (i = 0; i < map->size; i++) {
 		rc = ioctl(fh, EVIOCSKEYCODE, &map->map[i]);
 		if (0 != rc) {
-			fprintf(stderr,"ioctl EVIOCSKEYCODE(%d,%d): %s\n",
+			printf("ioctl EVIOCSKEYCODE(%d,%d): %s\n",
 				map->map[i].scancode,map->map[i].keycode,
 				strerror(errno));
 			return -1;
@@ -128,8 +127,8 @@
 		else
 			entry.keycode = i;
 
-		fprintf(stderr,"set: ");
-		kbd_key_print(stderr,entry.scancode,entry.keycode);
+		printf("set: ");
+		kbd_key_print(stdout,entry.scancode,entry.keycode);
 		map->map[entry.scancode] = entry;
 	}
 	return 0;
@@ -149,9 +148,9 @@
 		if (!test_bit(bit,bits))
 			continue;
 		if (KEY_NAME[bit]) {
-			fprintf(stderr,"bits: %s\n", KEY_NAME[bit]);
+			printf("bits: %s\n", KEY_NAME[bit]);
 		} else {
-			fprintf(stderr,"bits: unknown [%d]\n", bit);
+			printf("bits: unknown [%d]\n", bit);
 		}
 	}
 }
@@ -188,7 +187,7 @@
 
 	map = kbd_map_read(fd);
 	if (NULL == map) {
-		fprintf(stderr,"device has no map\n");
+		printf("device has no map\n");
 		close(fd);
 		return -1;
 	}
@@ -198,7 +197,7 @@
 	else {
 		fp = fopen(mapfile,"r");
 		if (NULL == fp) {
-			fprintf(stderr,"open %s: %s\n",mapfile,strerror(errno));
+			printf("open %s: %s\n",mapfile,strerror(errno));
 			close(fd);
 			return -1;
 		}
diff -Nur input-utils-0.0.20051128/input-kbd.c.orig input-utils-0.0.20051128.new/input-kbd.c.orig
--- input-utils-0.0.20051128/input-kbd.c.orig	1970-01-01 01:00:00.000000000 +0100
+++ input-utils-0.0.20051128.new/input-kbd.c.orig	2009-09-14 10:21:53.000000000 +0100
@@ -0,0 +1,259 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <time.h>
+#include <unistd.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <sys/select.h>
+
+#include "input.h"
+
+struct kbd_entry {
+	int scancode;
+	int keycode;
+};
+
+struct kbd_map {
+	struct kbd_entry  *map;
+	int               keys;
+	int               size;
+	int               alloc;
+};
+
+/* ------------------------------------------------------------------ */
+
+static struct kbd_map* kbd_map_read(int fd)
+{
+	struct kbd_entry entry;
+	struct kbd_map *map;
+	int rc;
+
+	map = malloc(sizeof(*map));
+	memset(map,0,sizeof(*map));
+	for (map->size = 0; map->size < 65536; map->size++) {
+		entry.scancode = map->size;
+		entry.keycode  = KEY_RESERVED;
+		rc = ioctl(fd, EVIOCGKEYCODE, &entry);
+		if (rc < 0) {
+			break;
+		}
+		if (map->size >= map->alloc) {
+			map->alloc += 64;
+			map->map = realloc(map->map, map->alloc * sizeof(entry));
+		}
+		map->map[map->size] = entry;
+
+		if (KEY_RESERVED != entry.keycode)
+			map->keys++;
+	}
+	if (map->keys) {
+		fprintf(stderr,"map: %d keys, size: %d/%d\n",
+			map->keys, map->size, map->alloc);
+		return map;
+	} else {
+		free(map);
+		return NULL;
+	}
+}
+
+static int kbd_map_write(int fh, struct kbd_map *map)
+{
+	int i,rc;
+
+	for (i = 0; i < map->size; i++) {
+		rc = ioctl(fh, EVIOCSKEYCODE, &map->map[i]);
+		if (0 != rc) {
+			fprintf(stderr,"ioctl EVIOCSKEYCODE(%d,%d): %s\n",
+				map->map[i].scancode,map->map[i].keycode,
+				strerror(errno));
+			return -1;
+		}
+	}
+	return 0;
+}
+
+static void kbd_key_print(FILE *fp, int scancode, int keycode)
+{
+	fprintf(fp, "0x%04x = %3d  # %s\n",
+		scancode, keycode, key_name(keycode));
+}
+
+static void kbd_map_print(FILE *fp, struct kbd_map *map, int complete)
+{
+	int i;
+
+	for (i = 0; i < map->size; i++) {
+		if (!complete  &&  KEY_RESERVED == map->map[i].keycode)
+			continue;
+		kbd_key_print(fp,map->map[i].scancode,map->map[i].keycode);
+	}
+}
+
+static int kbd_map_parse(FILE *fp, struct kbd_map *map)
+{
+	struct kbd_entry entry;
+	char line[80],scancode[80],keycode[80];
+	int i;
+
+	while (NULL != fgets(line,sizeof(line),fp)) {
+		if (2 != sscanf(line," %80s = %80s", scancode, keycode)) {
+			fprintf(stderr,"parse error: %s",line);
+			return -1;
+		}
+
+		/* parse scancode */
+		if (0 == strncasecmp(scancode,"0x",2)) {
+			entry.scancode = strtol(scancode, NULL, 16);
+		} else {
+			entry.scancode = strtol(scancode, NULL, 10);
+		}
+		if (entry.scancode <  0 ||
+		    entry.scancode >= map->size) {
+			fprintf(stderr,"scancode %d out of range (0-%d)\n",
+				entry.scancode,map->size);
+			return -1;
+		}
+
+		/* parse keycode */
+		for (i = 0; i < KEY_MAX; i++) {
+			if (!KEY_NAME[i])
+				continue;
+			if (0 == strcmp(keycode,KEY_NAME[i]))
+				break;
+		}
+		if (i == KEY_MAX)
+			entry.keycode = atoi(keycode);
+		else
+			entry.keycode = i;
+
+		fprintf(stderr,"set: ");
+		kbd_key_print(stderr,entry.scancode,entry.keycode);
+		map->map[entry.scancode] = entry;
+	}
+	return 0;
+}
+
+/* ------------------------------------------------------------------ */
+
+static void kbd_print_bits(int fd)
+{
+	BITFIELD bits[KEY_MAX/sizeof(BITFIELD)];
+	int rc,bit;
+
+	rc = ioctl(fd,EVIOCGBIT(EV_KEY,sizeof(bits)),bits);
+	if (rc < 0)
+		return;
+	for (bit = 0; bit < rc*8 && bit < KEY_MAX; bit++) {
+		if (!test_bit(bit,bits))
+			continue;
+		if (KEY_NAME[bit]) {
+			fprintf(stderr,"bits: %s\n", KEY_NAME[bit]);
+		} else {
+			fprintf(stderr,"bits: unknown [%d]\n", bit);
+		}
+	}
+}
+
+static void show_kbd(int nr)
+{
+	struct kbd_map *map;
+	int fd;
+
+	fd = device_open(nr,1);
+	if (-1 == fd)
+		return;
+	device_info(fd);
+
+	map = kbd_map_read(fd);
+	if (NULL != map) {
+		kbd_map_print(stdout,map,0);
+	} else {
+		kbd_print_bits(fd);
+	}
+
+	close(fd);
+}
+
+static int set_kbd(int nr, char *mapfile)
+{
+	struct kbd_map *map;
+	FILE *fp;
+	int fd;
+
+	fd = device_open(nr,1);
+	if (-1 == fd)
+		return -1;
+
+	map = kbd_map_read(fd);
+	if (NULL == map) {
+		fprintf(stderr,"device has no map\n");
+		close(fd);
+		return -1;
+	}
+
+	if (0 == strcmp(mapfile,"-"))
+		fp = stdin;
+	else {
+		fp = fopen(mapfile,"r");
+		if (NULL == fp) {
+			fprintf(stderr,"open %s: %s\n",mapfile,strerror(errno));
+			close(fd);
+			return -1;
+		}
+	}
+	
+	if (0 != kbd_map_parse(fp,map) ||
+	    0 != kbd_map_write(fd,map)) {
+		close(fd);
+		return -1;
+	}
+
+	close(fd);
+	return 0;
+}
+
+static int usage(char *prog, int error)
+{
+	fprintf(error ? stderr : stdout,
+		"usage: %s [ -f file ] devnr\n",
+		prog);
+	exit(error);
+}
+
+int main(int argc, char *argv[])
+{
+	int c,devnr;
+	char *mapfile = NULL;
+
+	for (;;) {
+		if (-1 == (c = getopt(argc, argv, "hf:")))
+			break;
+		switch (c) {
+		case 'f':
+			mapfile = optarg;
+			break;
+		case 'h':
+			usage(argv[0],0);
+		default:
+			usage(argv[0],1);
+		}
+	}
+
+	if (optind == argc)
+		usage(argv[0],1);
+
+	devnr = atoi(argv[optind]);
+	if (mapfile) {
+		set_kbd(devnr,mapfile);
+	} else {
+		show_kbd(devnr);
+	}
+	return 0;
+}
+
+/* ---------------------------------------------------------------------
+ * Local variables:
+ * c-basic-offset: 8
+ * End:
+ */
diff -Nur input-utils-0.0.20051128/input-recv.c input-utils-0.0.20051128.new/input-recv.c
--- input-utils-0.0.20051128/input-recv.c	2004-04-21 12:55:44.000000000 +0100
+++ input-utils-0.0.20051128.new/input-recv.c	2009-09-14 10:22:49.000000000 +0100
@@ -62,7 +62,7 @@
 		
 		rc = read(sock,&ev,sizeof(ev));
 		if (rc != sizeof(ev)) {
-			fprintf(stderr,"read ret=%d (expected %d), errno=%s\n",
+			printf("read ret=%d (expected %d), errno=%s\n",
 				rc,(int)sizeof(ev),strerror(errno));
 			exit(1);
 		}
diff -Nur input-utils-0.0.20051128/input-recv.c.orig input-utils-0.0.20051128.new/input-recv.c.orig
--- input-utils-0.0.20051128/input-recv.c.orig	1970-01-01 01:00:00.000000000 +0100
+++ input-utils-0.0.20051128.new/input-recv.c.orig	2004-04-21 12:55:44.000000000 +0100
@@ -0,0 +1,87 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <string.h>
+#include <errno.h>
+
+#include "input.h"
+#include "tcp.h"
+
+/* ------------------------------------------------------------------ */
+
+static int usage(char *prog, int error)
+{
+	fprintf(error ? stderr : stdout,
+		"usage: %s"
+		"\n",
+		prog);
+	exit(error);
+}
+
+int main(int argc, char *argv[])
+{
+	char *addr   = NULL;
+	char *port   = NULL;
+	char *host   = "localhost";
+	char *serv   = "1234";
+	struct addrinfo ask;
+	int c,sock;
+
+	memset(&ask,0,sizeof(ask));
+	ask.ai_family = PF_UNSPEC;
+	ask.ai_socktype = SOCK_STREAM;
+
+	for (;;) {
+		if (-1 == (c = getopt(argc, argv, "h")))
+			break;
+		switch (c) {
+		case 'h':
+			usage(argv[0],0);
+		default:
+			usage(argv[0],1);
+		}
+	}
+
+	tcp_verbose = 1;
+	sock = tcp_connect(&ask,addr,port,host,serv);
+	if (-1 == sock)
+		exit(1);
+
+	for (;;) {
+		struct input_event ev;
+		fd_set set;
+		int rc;
+
+		FD_ZERO(&set);
+		FD_SET(sock,&set);
+		rc = select(sock+1,&set,NULL,NULL,NULL);
+		if (1 != rc) {
+			perror("select");
+			exit(1);
+		}
+		
+		rc = read(sock,&ev,sizeof(ev));
+		if (rc != sizeof(ev)) {
+			fprintf(stderr,"read ret=%d (expected %d), errno=%s\n",
+				rc,(int)sizeof(ev),strerror(errno));
+			exit(1);
+		}
+		
+		/* convert from network byte order ... */
+		ev.time.tv_sec  = ntohl(ev.time.tv_sec);
+		ev.time.tv_usec = ntohl(ev.time.tv_usec);
+		ev.type         = ntohs(ev.type);
+		ev.code         = ntohs(ev.code);
+		ev.value        = ntohl(ev.value);
+
+		print_event(&ev);
+	}
+		
+	return 0;
+}
+
+/* ---------------------------------------------------------------------
+ * Local variables:
+ * c-basic-offset: 8
+ * End:
+ */
diff -Nur input-utils-0.0.20051128/input-send.c input-utils-0.0.20051128.new/input-send.c
--- input-utils-0.0.20051128/input-send.c	2004-04-21 12:55:44.000000000 +0100
+++ input-utils-0.0.20051128.new/input-send.c	2009-09-14 10:22:49.000000000 +0100
@@ -44,7 +44,7 @@
 			    conn->peerhost,INET6_ADDRSTRLEN,
 			    conn->peerserv,32,
 			    NI_NUMERICHOST | NI_NUMERICSERV);
-		fprintf(stderr,"connect from [%s]\n",conn->peerhost);
+		printf("connect from [%s]\n",conn->peerhost);
 	}
 	fcntl(conn->socket,F_SETFL,O_NONBLOCK);
 
@@ -55,7 +55,7 @@
 static void conn_del(struct connection  *conn)
 {
 	if (tcp_verbose)
-		fprintf(stderr,"connection from [%s] closed\n",conn->peerhost);
+		printf("connection from [%s] closed\n",conn->peerhost);
 	close(conn->socket);
 	list_del(&conn->list);
 	free(conn);
diff -Nur input-utils-0.0.20051128/input-send.c.orig input-utils-0.0.20051128.new/input-send.c.orig
--- input-utils-0.0.20051128/input-send.c.orig	1970-01-01 01:00:00.000000000 +0100
+++ input-utils-0.0.20051128.new/input-send.c.orig	2004-04-21 12:55:44.000000000 +0100
@@ -0,0 +1,234 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <string.h>
+#include <fcntl.h>
+
+#include "list.h"
+#include "input.h"
+#include "tcp.h"
+
+struct connection {
+	int                      socket;
+	struct sockaddr_storage  peer;
+	struct list_head         list;
+	char                     peerhost[INET6_ADDRSTRLEN+1];
+	char                     peerserv[33];
+};
+
+/* ------------------------------------------------------------------ */
+
+int debug   = 0;
+int timeout = 10;
+int slisten;
+int input;
+LIST_HEAD(connections);
+
+static void conn_new(void)
+{
+	struct connection  *conn;
+	int len;
+
+	conn = malloc(sizeof(conn));
+	memset(conn,0,sizeof(conn));
+	len = sizeof(conn->peer);
+	conn->socket = accept(slisten,(struct sockaddr*)&conn->peer,&len);
+	if (-1 == conn->socket) {
+		if (tcp_verbose)
+			perror("accept");
+		free(conn);
+		return;
+	}
+	if (tcp_verbose) {
+		getnameinfo((struct sockaddr*)&conn->peer,len,
+			    conn->peerhost,INET6_ADDRSTRLEN,
+			    conn->peerserv,32,
+			    NI_NUMERICHOST | NI_NUMERICSERV);
+		fprintf(stderr,"connect from [%s]\n",conn->peerhost);
+	}
+	fcntl(conn->socket,F_SETFL,O_NONBLOCK);
+
+	/* FIXME: access control */
+	list_add_tail(&conn->list,&connections);
+}
+
+static void conn_del(struct connection  *conn)
+{
+	if (tcp_verbose)
+		fprintf(stderr,"connection from [%s] closed\n",conn->peerhost);
+	close(conn->socket);
+	list_del(&conn->list);
+	free(conn);
+}
+
+static void input_bcast(struct input_event *ev)
+{
+	struct connection  *conn;
+	struct list_head   *item;
+	struct list_head   *safe;
+	int rc;
+
+	if (debug)
+		print_event(ev);
+	
+	/* convert to network byte order ... */
+	ev->time.tv_sec  = htonl(ev->time.tv_sec);
+	ev->time.tv_usec = htonl(ev->time.tv_usec);
+	ev->type         = htons(ev->type);
+	ev->code         = htons(ev->code);
+	ev->value        = htonl(ev->value);
+
+	/* send out */
+	list_for_each_safe(item,safe,&connections) {
+		conn = list_entry(item, struct connection, list);
+		rc = write(conn->socket,ev,sizeof(*ev));
+		if (rc != sizeof(*ev))
+			conn_del(conn);
+	}
+}
+
+static void loop(void)
+{
+	struct connection  *conn;
+	struct list_head   *item;
+	struct list_head   *safe;
+	fd_set             set;
+	struct timeval     tv;
+	int                max,rc;
+
+	for (;;) {
+		tv.tv_sec  = timeout;
+		tv.tv_usec = 0;
+
+		FD_ZERO(&set);
+		FD_SET(slisten,&set);
+		max = slisten;
+
+		FD_SET(input,&set);
+		if (max < input)
+			max = input;
+
+		list_for_each(item,&connections) {
+			conn = list_entry(item, struct connection, list);
+			FD_SET(conn->socket,&set);
+			if (max < conn->socket)
+				max = conn->socket;
+		}
+
+		rc = select(max+1,&set,NULL,NULL,&tv);
+		if (rc < 0) {
+			/* Huh? */
+			perror("select");
+			exit(1);
+		}
+		if (0 == rc) {
+			/* timeout */
+			continue;
+		}
+
+		list_for_each_safe(item,safe,&connections) {
+			conn = list_entry(item, struct connection, list);
+			if (FD_ISSET(conn->socket,&set)) {
+				char dummy[16];
+				rc = read(conn->socket,dummy,sizeof(dummy));
+				if (rc <= 0)
+					conn_del(conn);
+			}
+		}
+
+		if (FD_ISSET(input,&set)) {
+			struct input_event ev;
+			rc = read(input,&ev,sizeof(ev));
+			if (rc != sizeof(ev))
+				exit(1);
+			input_bcast(&ev);
+		}
+
+		if (FD_ISSET(slisten,&set))
+			conn_new();
+	}
+}
+
+/* ------------------------------------------------------------------ */
+
+static void daemonize(void)
+{
+        switch (fork()) {
+        case -1:
+		perror("fork");
+		exit(1);
+        case 0:
+		close(0); close(1); close(2);
+		setsid();
+		open("/dev/null",O_RDWR); dup(0); dup(0);
+		break;
+        default:
+		exit(0);
+        }
+}
+
+static int usage(char *prog, int error)
+{
+	fprintf(error ? stderr : stdout,
+		"usage: %s"
+		" [ -t <sec> ] [ -g ]"
+		" devnr\n",
+		prog);
+	exit(error);
+}
+
+int main(int argc, char *argv[])
+{
+	int grab     =  0;
+	char *addr   = NULL;
+	char *port   = "1234";
+	int c,devnr;
+	struct addrinfo ask;
+
+	memset(&ask,0,sizeof(ask));
+	ask.ai_family = PF_UNSPEC;
+	ask.ai_socktype = SOCK_STREAM;
+
+	for (;;) {
+		if (-1 == (c = getopt(argc, argv, "hdgt:")))
+			break;
+		switch (c) {
+		case 'd':
+			debug = 1;
+			tcp_verbose = 1;
+			break;
+		case 't':
+			timeout = atoi(optarg);
+			break;
+		case 'g':
+			grab = 1;
+			break;
+		case 'h':
+			usage(argv[0],0);
+		default:
+			usage(argv[0],1);
+		}
+	}
+
+	if (optind == argc)
+		usage(argv[0],1);
+	devnr = atoi(argv[optind]);
+	input = device_open(devnr,debug);
+	if (-1 == input)
+		exit(1);
+
+	slisten = tcp_listen(&ask,addr,port);
+	if (-1 == slisten)
+		exit(1);
+
+	if (!debug)
+		daemonize();
+	loop();
+	return 0;
+}
+
+/* ---------------------------------------------------------------------
+ * Local variables:
+ * c-basic-offset: 8
+ * End:
+ */
diff -Nur input-utils-0.0.20051128/input.c input-utils-0.0.20051128.new/input.c
--- input-utils-0.0.20051128/input.c	2004-04-21 12:55:44.000000000 +0100
+++ input-utils-0.0.20051128.new/input.c	2009-09-14 10:22:56.000000000 +0100
@@ -44,7 +44,7 @@
 		return -1;
 	}
 	if (verbose)
-		fprintf(stderr,"%s\n",filename);
+		printf("%s\n",filename);
 
 	if (-1 == ioctl(fd,EVIOCGVERSION,&version)) {
 		perror("ioctl EVIOCGVERSION");
@@ -69,7 +69,7 @@
 
 	rc = ioctl(fd,EVIOCGID,&id);
 	if (rc >= 0)
-		fprintf(stderr,
+		printf(
 			"   bustype : %s\n"
 			"   vendor  : 0x%x\n"
 			"   product : 0x%x\n"
@@ -78,23 +78,23 @@
 			id.vendor, id.product, id.version);
 	rc = ioctl(fd,EVIOCGNAME(sizeof(buf)),buf);
 	if (rc >= 0)
-		fprintf(stderr,"   name    : \"%.*s\"\n",rc,buf);
+		printf("   name    : \"%.*s\"\n",rc,buf);
 	rc = ioctl(fd,EVIOCGPHYS(sizeof(buf)),buf);
 	if (rc >= 0)
-		fprintf(stderr,"   phys    : \"%.*s\"\n",rc,buf);
+		printf("   phys    : \"%.*s\"\n",rc,buf);
 	rc = ioctl(fd,EVIOCGUNIQ(sizeof(buf)),buf);
 	if (rc >= 0)
-		fprintf(stderr,"   uniq    : \"%.*s\"\n",rc,buf);
+		printf("   uniq    : \"%.*s\"\n",rc,buf);
 	rc = ioctl(fd,EVIOCGBIT(0,sizeof(bits)),bits);
 	if (rc >= 0) {
-		fprintf(stderr,"   bits ev :");
+		printf("   bits ev :");
 		for (bit = 0; bit < rc*8 && bit < EV_MAX; bit++) {
 			if (test_bit(bit,bits))
-				fprintf(stderr," %s", EV_NAME[bit]);
+				printf(" %s", EV_NAME[bit]);
 		}
-		fprintf(stderr,"\n");
+		printf("\n");
 	}
-	fprintf(stderr,"\n");
+	printf("\n");
 }
 
 /* ------------------------------------------------------------------ */
@@ -106,23 +106,24 @@
 
 	t = event->time.tv_sec;
 	strftime(ts,sizeof(ts),"%H:%M:%S",localtime(&t));
-	fprintf(stderr,"%s.%06ld: %s",ts,event->time.tv_usec,
+	printf("%s.%06ld: %s",ts,event->time.tv_usec,
 		EV_NAME[event->type]);
 	switch (event->type) {
 	case EV_KEY:
-		fprintf(stderr," %s %s",
+		printf(" %s (0x%x) %s",
 			KEY_NAME[event->code],
+			event->code,
 			event->value ? "pressed" : "released");
 		break;
 	case EV_REL:
-		fprintf(stderr," %s %d",
+		printf(" %s %d",
 			REL_NAME[event->code], event->value);
 		break;
 	default:
-		fprintf(stderr," code=%u value=%d",
+		printf(" code=%u value=%d",
 			(unsigned int)event->code, event->value);
 	}
-	fprintf(stderr,"\n");
+	printf("\n");
 }
 
 /* ---------------------------------------------------------------------
diff -Nur input-utils-0.0.20051128/input.c.orig input-utils-0.0.20051128.new/input.c.orig
--- input-utils-0.0.20051128/input.c.orig	1970-01-01 01:00:00.000000000 +0100
+++ input-utils-0.0.20051128.new/input.c.orig	2009-09-14 10:22:49.000000000 +0100
@@ -0,0 +1,132 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <time.h>
+#include <unistd.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <inttypes.h>
+
+#include "input.h"
+
+/* ------------------------------------------------------------------ */
+
+char *EV_NAME[EV_MAX] = {
+#include "EV.h"
+};
+
+char *REL_NAME[REL_MAX] = {
+#include "REL.h"
+};
+
+char *KEY_NAME[KEY_MAX] = {
+#include "KEY.h"
+#include "BTN.h"
+};
+
+char *BUS_NAME[] = {
+#include "BUS.h"
+};
+
+/* ------------------------------------------------------------------ */
+
+int device_open(int nr, int verbose)
+{
+	char filename[32];
+	int fd, version;
+
+	snprintf(filename,sizeof(filename),
+		 "/dev/input/event%d",nr);
+	fd = open(filename,O_RDONLY);
+	if (-1 == fd) {
+		fprintf(stderr,"open %s: %s\n",
+			filename,strerror(errno));
+		return -1;
+	}
+	if (verbose)
+		printf("%s\n",filename);
+
+	if (-1 == ioctl(fd,EVIOCGVERSION,&version)) {
+		perror("ioctl EVIOCGVERSION");
+		close(fd);
+		return -1;
+	}
+	if (EV_VERSION != version) {
+		fprintf(stderr, "protocol version mismatch (expected %d, got %d)\n",
+			EV_VERSION, version);
+		close(fd);
+		return -1;
+	}
+	return fd;
+}
+
+void device_info(int fd)
+{
+	struct input_id id;
+	BITFIELD bits[32];
+	char buf[32];
+	int rc,bit;
+
+	rc = ioctl(fd,EVIOCGID,&id);
+	if (rc >= 0)
+		printf(
+			"   bustype : %s\n"
+			"   vendor  : 0x%x\n"
+			"   product : 0x%x\n"
+			"   version : %d\n",
+			BUS_NAME[id.bustype],
+			id.vendor, id.product, id.version);
+	rc = ioctl(fd,EVIOCGNAME(sizeof(buf)),buf);
+	if (rc >= 0)
+		printf("   name    : \"%.*s\"\n",rc,buf);
+	rc = ioctl(fd,EVIOCGPHYS(sizeof(buf)),buf);
+	if (rc >= 0)
+		printf("   phys    : \"%.*s\"\n",rc,buf);
+	rc = ioctl(fd,EVIOCGUNIQ(sizeof(buf)),buf);
+	if (rc >= 0)
+		printf("   uniq    : \"%.*s\"\n",rc,buf);
+	rc = ioctl(fd,EVIOCGBIT(0,sizeof(bits)),bits);
+	if (rc >= 0) {
+		printf("   bits ev :");
+		for (bit = 0; bit < rc*8 && bit < EV_MAX; bit++) {
+			if (test_bit(bit,bits))
+				printf(" %s", EV_NAME[bit]);
+		}
+		printf("\n");
+	}
+	printf("\n");
+}
+
+/* ------------------------------------------------------------------ */
+
+void print_event(struct input_event *event)
+{
+	char ts[32];
+	time_t t;
+
+	t = event->time.tv_sec;
+	strftime(ts,sizeof(ts),"%H:%M:%S",localtime(&t));
+	printf("%s.%06ld: %s",ts,event->time.tv_usec,
+		EV_NAME[event->type]);
+	switch (event->type) {
+	case EV_KEY:
+		printf(" %s %s",
+			KEY_NAME[event->code],
+			event->value ? "pressed" : "released");
+		break;
+	case EV_REL:
+		printf(" %s %d",
+			REL_NAME[event->code], event->value);
+		break;
+	default:
+		printf(" code=%u value=%d",
+			(unsigned int)event->code, event->value);
+	}
+	printf("\n");
+}
+
+/* ---------------------------------------------------------------------
+ * Local variables:
+ * c-basic-offset: 8
+ * End:
+ */
diff -Nur input-utils-0.0.20051128/input.h input-utils-0.0.20051128.new/input.h
--- input-utils-0.0.20051128/input.h	2004-04-21 12:55:44.000000000 +0100
+++ input-utils-0.0.20051128.new/input.h	2009-09-14 10:22:41.000000000 +0100
@@ -1,7 +1,7 @@
 #include <inttypes.h>
 
 #include <sys/ioctl.h>
-#include "linux-input.h"
+#include <linux/input.h>
 
 #define ev_name(code)  ((code) < EV_MAX  && EV_NAME[code]  ? EV_NAME[code]  : "???")
 #define rel_name(code) ((code) < REL_MAX && REL_NAME[code] ? REL_NAME[code] : "???")
diff -Nur input-utils-0.0.20051128/input.h.orig input-utils-0.0.20051128.new/input.h.orig
--- input-utils-0.0.20051128/input.h.orig	1970-01-01 01:00:00.000000000 +0100
+++ input-utils-0.0.20051128.new/input.h.orig	2004-04-21 12:55:44.000000000 +0100
@@ -0,0 +1,30 @@
+#include <inttypes.h>
+
+#include <sys/ioctl.h>
+#include "linux-input.h"
+
+#define ev_name(code)  ((code) < EV_MAX  && EV_NAME[code]  ? EV_NAME[code]  : "???")
+#define rel_name(code) ((code) < REL_MAX && REL_NAME[code] ? REL_NAME[code] : "???")
+#define key_name(code) ((code) < KEY_MAX && KEY_NAME[code] ? KEY_NAME[code] : "???")
+
+#define BITFIELD uint32_t
+
+extern char *EV_NAME[EV_MAX];
+extern char *REL_NAME[REL_MAX];
+extern char *KEY_NAME[KEY_MAX];
+extern char *BUS_NAME[];
+
+static __inline__ int test_bit(int nr, BITFIELD * addr)
+{
+	BITFIELD mask;
+
+	addr += nr >> 5;
+	mask = 1 << (nr & 0x1f);
+	return ((mask & *addr) != 0);
+}
+
+/* ------------------------------------------------------------------ */
+
+int device_open(int nr, int verbose);
+void device_info(int fd);
+void print_event(struct input_event *event);
diff -Nur input-utils-0.0.20051128/lirc.sh input-utils-0.0.20051128.new/lirc.sh
--- input-utils-0.0.20051128/lirc.sh	2005-11-28 14:07:00.000000000 +0000
+++ input-utils-0.0.20051128.new/lirc.sh	2009-09-14 10:22:41.000000000 +0100
@@ -1,5 +1,5 @@
 #!/bin/sh
-INPUT="linux-input.h"
+INPUT="/usr/include/linux/input.h"
 cat <<EOF
 begin remote
 	name linux-input-layer
diff -Nur input-utils-0.0.20051128/lirc.sh.orig input-utils-0.0.20051128.new/lirc.sh.orig
--- input-utils-0.0.20051128/lirc.sh.orig	1970-01-01 01:00:00.000000000 +0100
+++ input-utils-0.0.20051128.new/lirc.sh.orig	2005-11-28 14:07:00.000000000 +0000
@@ -0,0 +1,19 @@
+#!/bin/sh
+INPUT="linux-input.h"
+cat <<EOF
+begin remote
+	name linux-input-layer
+	bits 32
+	begin codes
+EOF
+awk "
+	/_MAX/			{ next };
+	/KEY_RESERVED/		{ next };
+	/#define (KEY|BTN)_/	{ gsub(/KEY_/,\"\",\$2);
+				  printf(\"\t\t%-20s 0x%04x\n\",
+					 \$2,0x10000+strtonum(\$3)) } 
+" < $INPUT
+cat <<EOF
+	end codes
+end remote
+EOF
diff -Nur input-utils-0.0.20051128/lsinput.c input-utils-0.0.20051128.new/lsinput.c
--- input-utils-0.0.20051128/lsinput.c	2004-04-21 12:55:44.000000000 +0100
+++ input-utils-0.0.20051128.new/lsinput.c	2009-09-14 10:21:46.000000000 +0100
@@ -1,5 +1,6 @@
 #include <stdio.h>
 #include <stdlib.h>
+#include <sys/stat.h>
 #include <unistd.h>
 #include <fcntl.h>
 
@@ -10,14 +11,19 @@
 static void list_devices(void)
 {
 	int i,fd;
+        char filename[32];
+        struct stat statbuf;
 
 	for (i = 0; i < 32; i++) {
-		/* try to open */
-		fd = device_open(i,1);
-		if (-1 == fd)
-			return;
-		device_info(fd);
-		close(fd);
+                snprintf(filename,sizeof(filename), "/dev/input/event%d",i);
+                if (stat(filename, &statbuf) == 0) {
+                        /* try to open */
+                        fd = device_open(i,1);
+                        if (-1 == fd)
+                                return;
+                        device_info(fd);
+                        close(fd);
+                }
 	}
 	return;
 }
diff -Nur input-utils-0.0.20051128/lsinput.c.orig input-utils-0.0.20051128.new/lsinput.c.orig
--- input-utils-0.0.20051128/lsinput.c.orig	1970-01-01 01:00:00.000000000 +0100
+++ input-utils-0.0.20051128.new/lsinput.c.orig	2004-04-21 12:55:44.000000000 +0100
@@ -0,0 +1,35 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <fcntl.h>
+
+#include "input.h"
+
+/* ------------------------------------------------------------------ */
+
+static void list_devices(void)
+{
+	int i,fd;
+
+	for (i = 0; i < 32; i++) {
+		/* try to open */
+		fd = device_open(i,1);
+		if (-1 == fd)
+			return;
+		device_info(fd);
+		close(fd);
+	}
+	return;
+}
+
+int main(int argc, char *argv[])
+{
+	list_devices();
+	exit(0);
+}
+
+/* ---------------------------------------------------------------------
+ * Local variables:
+ * c-basic-offset: 8
+ * End:
+ */
diff -Nur input-utils-0.0.20051128/mk/Variables.mk input-utils-0.0.20051128.new/mk/Variables.mk
--- input-utils-0.0.20051128/mk/Variables.mk	2004-04-21 12:55:47.000000000 +0100
+++ input-utils-0.0.20051128.new/mk/Variables.mk	2009-09-14 10:22:19.000000000 +0100
@@ -22,7 +22,7 @@
 CXX		?= g++
 MOC             ?= $(if $(QTDIR),$(QTDIR)/bin/moc,moc)
 INSTALL		?= install
-INSTALL_BINARY  := $(INSTALL) -s
+INSTALL_BINARY  := $(INSTALL)
 INSTALL_SCRIPT  := $(INSTALL)
 INSTALL_DATA	:= $(INSTALL) -m 644
 INSTALL_DIR	:= $(INSTALL) -d
diff -Nur input-utils-0.0.20051128/mk/Variables.mk.orig input-utils-0.0.20051128.new/mk/Variables.mk.orig
--- input-utils-0.0.20051128/mk/Variables.mk.orig	1970-01-01 01:00:00.000000000 +0100
+++ input-utils-0.0.20051128.new/mk/Variables.mk.orig	2004-04-21 12:55:47.000000000 +0100
@@ -0,0 +1,33 @@
+# common variables ...
+########################################################################
+
+# package + version
+empty	:=
+space	:= $(empty) $(empty)
+PWD	:= $(shell pwd)
+DIR	:= $(patsubst $(dir $(PWD))%,%,$(PWD))
+PACKAGE	:= $(word 1,$(subst -,$(space),$(DIR)))
+VERSION	:= $(word 2,$(subst -,$(space),$(DIR)))
+TARBALL	:= $(PACKAGE)_$(VERSION).tar.gz
+
+# directories
+DESTDIR	=
+prefix	?= /usr/local
+bindir	=  $(DESTDIR)$(prefix)/bin
+mandir	=  $(DESTDIR)$(prefix)/share/man
+locdir  =  $(DESTDIR)$(prefix)/share/locale
+
+# programs
+CC		?= gcc
+CXX		?= g++
+MOC             ?= $(if $(QTDIR),$(QTDIR)/bin/moc,moc)
+INSTALL		?= install
+INSTALL_BINARY  := $(INSTALL) -s
+INSTALL_SCRIPT  := $(INSTALL)
+INSTALL_DATA	:= $(INSTALL) -m 644
+INSTALL_DIR	:= $(INSTALL) -d
+
+# cflags
+CFLAGS	?= -g -O2
+CFLAGS	+= -Wall -Wmissing-prototypes -Wstrict-prototypes \
+	   -Wpointer-arith -Wunused
diff -Nur input-utils-0.0.20051128/name.sh input-utils-0.0.20051128.new/name.sh
--- input-utils-0.0.20051128/name.sh	2004-04-21 12:55:44.000000000 +0100
+++ input-utils-0.0.20051128.new/name.sh	2009-09-14 10:22:41.000000000 +0100
@@ -1,7 +1,7 @@
 #!/bin/sh
 
 TYPE="$1"
-INPUT="linux-input.h"
+INPUT="/usr/include/linux/input.h"
 
 awk "
 	/EV_VERSION/	{ next };
diff -Nur input-utils-0.0.20051128/name.sh.orig input-utils-0.0.20051128.new/name.sh.orig
--- input-utils-0.0.20051128/name.sh.orig	1970-01-01 01:00:00.000000000 +0100
+++ input-utils-0.0.20051128.new/name.sh.orig	2004-04-21 12:55:44.000000000 +0100
@@ -0,0 +1,10 @@
+#!/bin/sh
+
+TYPE="$1"
+INPUT="linux-input.h"
+
+awk "
+	/EV_VERSION/	{ next };
+	/_MAX/		{ next };
+	/#define $1_/	{ printf(\"\t[ %-16s ] = \\\"%s\\\",\n\", \$2, \$2); }
+" < $INPUT
\ No newline at end of file
