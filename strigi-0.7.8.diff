--- strigi-0.7.8/libstreamanalyzer/plugins/endplugins/ffmpegendanalyzer.cpp.orig	2013-02-05 21:34:52.000000000 +0000
+++ strigi-0.7.8/libstreamanalyzer/plugins/endplugins/ffmpegendanalyzer.cpp	2017-12-19 22:12:32.079569907 +0000
@@ -355,7 +355,7 @@
 #endif
 
   if(fc->bit_rate)
-    ar.addValue(factory->bitrateProperty, fc->bit_rate);
+    ar.addValue(factory->bitrateProperty, (int32_t) fc->bit_rate);
   else if (fc->duration!= no_bitrate && fc->duration > 0) {
     cout<<"Trying to estimate bitrate\n";
     int64_t size;
@@ -486,7 +486,7 @@
           outs << stream.r_frame_rate.num / stream.r_frame_rate.den;
           ar.addTriplet(streamuri, frameRatePropertyName, outs.str());
         }
-        if (codec.pix_fmt != PIX_FMT_NONE) {}//FIXME pixel format
+        if (codec.pix_fmt != AV_PIX_FMT_NONE) {}//FIXME pixel format
       }
       
     }
--- strigi-0.7.8/libstreamanalyzer/plugins/endplugins/ffmpegendanalyzer.cpp.orig	2018-04-23 21:32:41.721915533 +0100
+++ strigi-0.7.8/libstreamanalyzer/plugins/endplugins/ffmpegendanalyzer.cpp	2018-04-23 21:37:38.258901385 +0100
@@ -412,8 +412,8 @@
         if (size_t len = strlen(p->name)) {
           ar.addTriplet(streamuri, codecPropertyName, string(p->name, len));
         }
-      } else if (size_t len = strlen(codec.codec_name)) {
-        ar.addTriplet(streamuri, codecPropertyName, string(codec.codec_name, len));
+//      } else if (size_t len = strlen(codec.codec_name)) {
+//        ar.addTriplet(streamuri, codecPropertyName, string(codec.codec_name, len));
       }
 /*
 00792     } else if (enc->codec_id == CODEC_ID_MPEG2TS) {
--- strigi-0.7.8/libstreamanalyzer/plugins/indexers/clucenengindexer/cluceneindexreader.cpp.orig	2013-02-05 21:34:52.000000000 +0000
+++ strigi-0.7.8/libstreamanalyzer/plugins/indexers/clucenengindexer/cluceneindexreader.cpp	2018-12-21 10:17:08.315873213 +0000
@@ -321,7 +321,7 @@
         string size = value;
         doc.size = atoi(size.c_str());
     } else {
-        doc.properties.insert(make_pair<const string, string>(
+        doc.properties.insert(make_pair(
             wchartoutf8(name), value));
     }
 }
--- strigi-0.7.8/libstreamanalyzer/plugins/endplugins/jpegendanalyzer.cpp.orig	2013-02-05 21:34:52.000000000 +0000
+++ strigi-0.7.8/libstreamanalyzer/plugins/endplugins/jpegendanalyzer.cpp	2018-12-21 10:32:40.724828725 +0000
@@ -29,6 +29,7 @@
 #include <strigi/textutils.h>
 #include <exiv2/exif.hpp>
 #include <exiv2/image.hpp>
+#include <exiv2/version.hpp>
 #include <exiv2/jpgimage.hpp>
 #include <exiv2/error.hpp>
 #include <math.h>
--- strigi-0.7.8/libstreamanalyzer/cmake/FindExiv2.cmake.orig	2013-02-05 21:34:52.000000000 +0000
+++ strigi-0.7.8/libstreamanalyzer/cmake/FindExiv2.cmake	2018-12-21 10:29:35.661837555 +0000
@@ -67,6 +67,18 @@
   string(REGEX MATCH "#define EXIV2_PATCH_VERSION +\\( *([0-9]+) *\\)"  _dummy "${EXIV2_VERSION_CONTENT}")
   set(EXIV2_VERSION_PATCH "${CMAKE_MATCH_1}")
 
+  if(EXIV2_VERSION_MAJOR STREQUAL "")
+    file(READ ${EXIV2_INCLUDE_DIR}/exiv2/exv_conf.h EXIV2_VERSION_CONTENT)
+    string(REGEX MATCH "#define EXIV2_MAJOR_VERSION +\\( *([0-9]+) *\\)"  _dummy "${EXIV2_VERSION_CONTENT}")
+    set(EXIV2_VERSION_MAJOR "${CMAKE_MATCH_1}")
+
+    string(REGEX MATCH "#define EXIV2_MINOR_VERSION +\\( *([0-9]+) *\\)"  _dummy "${EXIV2_VERSION_CONTENT}")
+    set(EXIV2_VERSION_MINOR "${CMAKE_MATCH_1}")
+
+    string(REGEX MATCH "#define EXIV2_PATCH_VERSION +\\( *([0-9]+) *\\)"  _dummy "${EXIV2_VERSION_CONTENT}")
+    set(EXIV2_VERSION_PATCH "${CMAKE_MATCH_1}")
+  endif(EXIV2_VERSION_MAJOR STREQUAL "")
+
   set(EXIV2_VERSION "${EXIV2_VERSION_MAJOR}.${EXIV2_VERSION_MINOR}.${EXIV2_VERSION_PATCH}" CACHE STRING "Version number of Exiv2" FORCE)
 endif(EXIV2_INCLUDE_DIR  AND NOT  EXIV2_VERSION)
 
