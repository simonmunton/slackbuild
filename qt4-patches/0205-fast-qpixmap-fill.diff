Trolltech task ID : None
bugs.kde.org number : None
applied: yes
author: Fredrik HÃ¶glund <fredrik@kde.org>
os: unix

Since there's no way to specify that a QPixmap should have an alpha channel
when it's created, it's quite common to call pixmap.fill(Qt::transparent)
immediately after creating it, to force Qt to recreate it with an alpha
channel. Unfortunately QPixmap::fill() does this by creating a QImage,
filling it with the specified color, and then converting it to a QPixmap.

This patch avoids the expensive image->pixmap conversion by simply discarding
the old pixmap, creating a new one with the correct format, and doing the
fill server side.

Index: src/gui/image/qpixmap_x11.cpp
===================================================================
--- src/gui/image/qpixmap_x11.cpp	(revision 755504)
+++ src/gui/image/qpixmap_x11.cpp	(working copy)
@@ -440,8 +440,28 @@
         return;
     if (fillColor.alpha() != 255) {
 #ifndef QT_NO_XRENDER
-        if (data->picture && data->d == 32) {
+        if (X11->use_xrender) {
             detach();
+            if (!data->picture || data->d != 32) {
+                if (data->picture)
+                    XRenderFreePicture(X11->display, data->picture);
+                if (data->mask_picture)
+                    XRenderFreePicture(X11->display, data->mask_picture);
+                if (data->x11_mask)
+                    XFreePixmap(X11->display, data->x11_mask);
+                if (data->hd)
+                     XFreePixmap(X11->display, data->hd);
+                if (data->hd2)
+                    XFreePixmap(X11->display, data->hd2);
+                XRenderPictFormat *format = XRenderFindStandardFormat(X11->display, PictStandardARGB32);
+                data->hd = XCreatePixmap(X11->display, RootWindow(X11->display, data->xinfo.screen()),
+                                         width(), height(), 32);
+                data->picture = XRenderCreatePicture(X11->display, data->hd, format, 0, 0);
+                data->mask_picture = 0;
+                data->x11_mask = 0;
+                data->hd2 = 0;
+                data->d = 32;
+            }
             ::Picture src  = X11->getSolidFill(data->xinfo.screen(), fillColor);
             XRenderComposite(X11->display, PictOpSrc, src, 0, data->picture,
                              0, 0, width(), height(),
