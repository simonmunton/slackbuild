#!/bin/bash
#
. build_funcs

TARNAME=suil
TARNAMEEXTRA=
TARSEP="-"
TARDIR=${SOURCE}/s
#TAR_EXT=.tar.gz
VERSION=0.10.10
VERSIONEXTRA=
BUILD=1

WEBPAGE="http://drobilla.net/software/suil/"

#TAR_PROG=
#TAR_OPTS=
#PKGNAME=
#PKGVERSION=
#BUILD_SUFFIX=
#ARCH=noarch


FULL_TARNAME=${TARDIR}/${TARNAME}${TARNAMEEXTRA}${TARSEP}${VERSION}${VERSIONEXTRA}${TAR_EXT}

pre_unpack

PKG=/tmp/package-${PKGNAME}

if [ ! -f ${FULL_TARNAME} ]
then
  echo Can\'t find ${FULL_TARNAME}
  exit
fi

if [ ! -d ${TARNAME}-${VERSION} ]
then 
${TAR_PROG} ${TAR_OPTS} ${FULL_TARNAME}
#mv ${TARNAME}-${VERSION} ${TARNAME}-${VERSION}

if [ ! -d ${TARNAME}-${VERSION} ]
then 
  echo "${TARNAME}-${VERSION} directory not found"
  exit
fi

(cd ${TARNAME}-${VERSION}
 #patch -p1 < ${CWD}/
)
fi

pre_configure

cd ${TARNAME}-${VERSION}

fix_perms

PKGCFLAGS="-O2 -march=i686 ${CPUOPT}=i686"

if [ ${DO_CONFIGURE} == "yes" ]
then
CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
./waf configure --prefix=/usr \
            --libdir=/usr/lib${LIBDIRSUFFIX} \
	    --mandir=/usr/man \
	    --no-qt4

#cmake -DCMAKE_C_FLAGS:STRING="${SLKCFLAGS}" \
#      -DCMAKE_CXX_FLAGS:STRING="${SLKCFLAGS}" \
#      -DCMAKE_BUILD_TYPE=Release \
#      -DCMAKE_INSTALL_PREFIX=/usr \
#      -DMAN_INSTALL_DIR=/usr/man \
#      -DLIB_SUFFIX=${LIBDIRSUFFIX} \
#      -DSYSCONF_INSTALL_DIR=/etc \
#      .

fi

if [ ${DO_MAKE} == "yes" ]
then
./waf ${NUM_JOBS} || exit
fi

if [ ${DO_INSTALL} != "yes" ]
then
  exit
fi

./waf install --destdir=${PKG}

strip_binaries

fix_links

compress_manpages

compress_info

cp -a \
  AUTHORS COPYING* INSTALL NEWS PLANS README* TODO \
  ${PKG}/usr/doc/${TARNAME}-${VERSION}

fix_docs

#-----handy-ruler-for-slack-desc-width-------------------------------|
make_slack_desc << EOF "library for loading and wrapping LV2 plugin UIs"
Suil is a lightweight C library for loading and wrapping LV2 plugin 
UIs.

Suil makes it possible to load a UI of any toolkit in a host using 
any other toolkit (assuming the toolkits are both supported by Suil). 
Hosts do not need to build against or link to foreign toolkit 
libraries to use UIs written with that toolkit; all the necessary 
magic is performed by dynamically loaded modules. The API is designed 
such that hosts do not need to explicitly support specific toolkits 
at all  if Suil supports a particular toolkit, then UIs in that 
toolkit will work in all hosts that use Suil automatically.

EOF

post_install

cd ${PKG}
su -c "chown -R root:root ${PKG}; \
find . -type d -exec chmod 755 {} \; ; \
makepkg -l y -c n ${PKGDIR}${PKGNAME}-${PKGVERSION}-${ARCH}-${BUILD}${BUILD_SUFFIX}.tgz; \
chown -R ${USERNAME}:${GROUP} ${PKG}"
