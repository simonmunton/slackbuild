#!/bin/bash
#
. build_funcs

TARNAME=7z
TARNAMEEXTRA=
TARSEP=""
TARDIR=~/Source/7
#TAR_EXT=.tar.gz
VERSION=2408
VERSIONEXTRA=-src
BUILD=1

WEBPAGE="https://www.7-zip.org/"

#TAR_PROG=
#TAR_OPTS=
#PKGNAME=
#PKGVERSION=
#BUILD_SUFFIX=
#ARCH=noarch


FULL_TARNAME=${TARDIR}/${TARNAME}${TARNAMEEXTRA}${TARSEP}${VERSION}${VERSIONEXTRA}${TAR_EXT}

pre_unpack

PKG=/tmp/package-${PKGNAME}

if [ ! -f ${FULL_TARNAME} ]
then
  echo Can\'t find ${FULL_TARNAME}
  exit
fi

if [ ! -d ${TARNAME}-${VERSION} ]
then
mkdir ${TARNAME}-${VERSION}
cd ${TARNAME}-${VERSION}

${TAR_PROG} ${TAR_OPTS} ${FULL_TARNAME}
#mv ${TARNAME}-${VERSION} ${TARNAME}-${VERSION}

cd ..

if [ ! -d ${TARNAME}-${VERSION} ]
then
  echo "${TARNAME}-${VERSION} directory not found"
  exit
fi

(cd ${TARNAME}-${VERSION}
 chmod -R +w *
 chmod -x DOC/*
 patch -p1 < ${CWD}/7z-0002-Use-getcwd-3-POSIX-extension-to-avoid-PATH_MAX-macro.patch
 patch -p1 < ${CWD}/7z-0003-Disable-local-echo-display-when-in-input-passwords-C.patch
 patch -p1 < ${CWD}/7z-0004-Use-system-locale-to-select-codepage-for-legacy-zip-.patch
)
fi

pre_configure

cd ${TARNAME}-${VERSION}

fix_perms

PKGCFLAGS="-O2 -march=i686 ${CPUOPT}=i686"

if [ ${DO_CONFIGURE} == "yes" ]
then
if [ -f ../configure ]
then
CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
../configure --prefix=/usr \
            --sysconfdir=/etc \
            --libdir=/usr/lib${LIBDIRSUFFIX} \
            --localstatedir=/var/lib \
	    --mandir=/usr/man
elif [ -f ../CMakeLists.txt ]
then
cmake -DCMAKE_C_FLAGS:STRING="${SLKCFLAGS}" \
      -DCMAKE_CXX_FLAGS:STRING="${SLKCFLAGS}" \
      -DCMAKE_BUILD_TYPE=Release \
      -DCMAKE_INSTALL_PREFIX=/usr \
      -DMAN_INSTALL_DIR=/usr/man \
      -DLIB_SUFFIX=${LIBDIRSUFFIX} \
      -DSYSCONF_INSTALL_DIR=/etc \
      ..
elif [ -f ../meson.build ]
then
  meson --prefix=/usr . ..
fi

fi

if [ ${DO_MAKE} == "yes" ]
then
if [ -f ../meson.build ]
then
  ninja || exit
else
  make ${NUM_JOBS} -C CPP/7zip/Bundles/Alone2 -f ../../cmpl_gcc.mak || exit
  make ${NUM_JOBS} -C CPP/7zip/Bundles/Format7zF -f ../../cmpl_gcc.mak || exit
  make ${NUM_JOBS} -C CPP/7zip/UI/Console -f ../../cmpl_gcc.mak || exit
  make ${NUM_JOBS} -C CPP/7zip/Bundles/SFXCon -f ../../cmpl_gcc.mak || exit
  make ${NUM_JOBS} -C CPP/7zip/Bundles/Alone -f ../../cmpl_gcc.mak || exit
  make ${NUM_JOBS} -C CPP/7zip/Bundles/Alone7z -f ../../cmpl_gcc.mak || exit

#  make ${NUM_JOBS} || exit
fi
fi

if [ ${DO_INSTALL} != "yes" ]
then
  exit
fi

if [ -f ../meson.build ]
then
  DESTDIR=${PKG} ninja install
else

  mkdir -p ${PKG}/usr/{bin,lib${LIBDIRSUFFIX},man/man1}

  install -Dm755 CPP/7zip/Bundles/Alone2/b/g/7zz ${PKG}/usr/bin
  install -Dm755 CPP/7zip/Bundles/Alone/b/g/7za ${PKG}/usr/bin
  install -Dm755 CPP/7zip/Bundles/Alone7z/b/g/7zr ${PKG}/usr/bin
  install -Dm755 CPP/7zip/Bundles/Format7zF/b/g/7z.so ${PKG}/usr/lib${LIBDIRSUFFIX}
  install -Dm755 CPP/7zip/UI/Console/b/g/7z ${PKG}/usr/bin
  install -Dm755 CPP/7zip/Bundles/SFXCon/b/g/7zCon ${PKG}/usr/bin

  cp ${CWD}/7z{,a,r,z}.1 ${PKG}/usr/man/man1

#  make install DESTDIR=${PKG}
fi

strip_binaries

fix_links

compress_manpages

compress_info

cp -a \
  DOC/* \
  AUTHORS COPYING* INSTALL NEWS PLANS README* TODO \
  ${PKG}/usr/doc/${TARNAME}-${VERSION}

fix_docs

#-----handy-ruler-for-slack-desc-width-------------------------------|
make_slack_desc << EOF "Compression method of 7z format in 7-Zip program"
LZMA is a compression algorithm, based on the famous Lempel Ziv
compression method.
The main characteristics of the algorithm are very good compression,
fast decompression, use of lot of RAM for compression and low usage
of RAM for decompression.
LZMA provides high compression ratio and very fast decompression, so
it is very suitable for embedded applications. For example, it can be
used for ROM (firmware) compression.

EOF

post_install

cd ${PKG}
su -c "chown -R root:root ${PKG}; \
find . -type d -exec chmod 755 {} \; ; \
makepkg -l y -c n ${PKGDIR}${PKGNAME}-${PKGVERSION}-${ARCH}-${BUILD}${BUILD_SUFFIX}.tgz; \
chown -R ${USERNAME}:${GROUP} ${PKG}"
