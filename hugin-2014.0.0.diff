diff -r 483c40467492 src/tools/ParseExp.cpp
--- a/src/tools/ParseExp.cpp	Wed Oct 08 20:25:50 2014 +0200
+++ b/src/tools/ParseExp.cpp	Mon Jan 12 20:43:36 2015 +0000
@@ -34,6 +34,7 @@
 #include <limits>
 #include <iterator>
 
+#define BOOST_SPIRIT_USE_PHOENIX_V3 1
 #include <boost/spirit/version.hpp>
 #if !defined(SPIRIT_VERSION) || SPIRIT_VERSION < 0x2010
 #error "At least Spirit version 2.1 required"
@@ -50,11 +51,9 @@
 //power function
 struct lazy_pow_
 {
-    template <typename X, typename Y>
-    struct result { typedef X type; };
+    typedef double result_type;
 
-    template <typename X, typename Y>
-    X operator()(X x, Y y) const
+    double operator()(double x, double y) const
     {
         return std::pow(x, y);
     }
@@ -63,11 +62,9 @@
 // modulus for double values
 struct lazy_mod_
 {
-    template <typename X, typename Y>
-    struct result { typedef X type; };
+    typedef double result_type;
 
-    template <typename X, typename Y>
-    X operator()(X x, Y y) const
+    double operator()(double x, double y) const
     {
         return std::fmod(x,y);
     }
@@ -76,37 +73,33 @@
 // if statement
 struct lazy_if_
 {
-    template <typename X, typename Y, typename Z>
-    struct result { typedef Y type; };
+    typedef double result_type;
 
-    template <typename X, typename Y, typename Z>
-    X operator()(X x, Y y, Z z) const
+    double operator()(double x, double y, double z) const
     {
-        return x ? y : z;
+        return (std::fabs(x)>1e-5) ? y : z;
     }
 };
 
 // wrapper for unary function
 struct lazy_ufunc_
 {
-    template <typename F, typename A1>
-    struct result { typedef A1 type; };
+    typedef double result_type;
 
-    template <typename F, typename A1>
-    A1 operator()(F f, A1 a1) const
+    double operator()(double (*f)(double), double a1) const
     {
         return f(a1);
     }
 };
 
 // convert rad into deg
-double deg(const double d)
+const double deg(const double d)
 {
     return d*180.0/boost::math::constants::pi<double>();
 };
 
 // convert deg into rad
-double rad(const double d)
+const double rad(const double d)
 {
     return d*boost::math::constants::pi<double>()/180;
 };
@@ -229,7 +222,6 @@
     };
 };
 
-//template <typename ParserType, typename Iterator>
 bool parse(std::string::const_iterator &iter,
            std::string::const_iterator end,
            const grammar &g,
@@ -243,14 +235,6 @@
     return iter==end;
 }
 
-// the function which exposes the interface to external
-// version without pre-defined constants 
-bool ParseExpression(const std::string& expression, double& result)
-{
-    ConstantMap constants;
-    return ParseExpression(expression, result, constants);
-};
-    
 // version with pre-defined constants
 bool ParseExpression(const std::string& expression, double& result, const ConstantMap& constants)
 {
diff -r 483c40467492 src/tools/ParseExp.h
--- a/src/tools/ParseExp.h	Wed Oct 08 20:25:50 2014 +0200
+++ b/src/tools/ParseExp.h	Mon Jan 12 20:43:41 2015 +0000
@@ -33,8 +33,7 @@
 {
 typedef std::map<const char*, double> ConstantMap;
 
-bool ParseExpression(const std::string& expression, double& result);
-bool ParseExpression(const std::string& expression, double& result, const ConstantMap& constants);
+bool ParseExpression(const std::string& expression, double& result, const ConstantMap& constants=ConstantMap());
 
 };
 
diff -r e2bc1c33f588 -r e07f6341d007 src/hugin1/hugin/TextureManager.h
--- a/src/hugin1/hugin/TextureManager.h	Wed Nov 05 18:47:34 2014 +0100
+++ b/src/hugin1/hugin/TextureManager.h	Thu Nov 13 20:23:58 2014 +0100
@@ -42,6 +42,10 @@
 #include <map>
 #include <boost/version.hpp>
 #if BOOST_VERSION>=105400
+#if BOOST_VERSION==105700
+// workaround for missing include in boost/signals2/trackable.hpp in version 1.57
+#include <boost/weak_ptr.hpp>
+#endif
 #include <boost/signals2/trackable.hpp>
 namespace boostSignal=boost::signals2;
 #else
