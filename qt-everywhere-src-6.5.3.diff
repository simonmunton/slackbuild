--- qt-everywhere-src-6.5.3/qtbase/src/plugins/sqldrivers/mysql/qsql_mysql_p.h.orig	2023-09-21 20:24:26.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtbase/src/plugins/sqldrivers/mysql/qsql_mysql_p.h	2023-09-29 16:30:42.650996630 +0100
@@ -21,7 +21,7 @@
 #include <QtCore/qt_windows.h>
 #endif
 
-#include <mysql.h>
+#include <mysql/mysql.h>
 
 #ifdef QT_PLUGIN
 #define Q_EXPORT_SQLDRIVER_MYSQL
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/autocxx_bindgen/v0_60/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/autocxx_bindgen/v0_60/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,78 +1,141 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
-authors = [
-  "Jyun-Yan You <jyyou.tw@gmail.com>",
-  "Emilio Cobos Álvarez <emilio@crisal.io>",
-  "Nick Fitzgerald <fitzgen@gmail.com>",
-  "The Servo project developers",
-  "Adrian Taylor <ade@hohum.me.uk>",
-]
-description = "Automatically generates Rust FFI bindings to C and C++ libraries. Version adjusted for cxx."
-keywords = ["bindings", "ffi", "code-generation"]
-categories = ["external-ffi-bindings", "development-tools::ffi"]
-license = "BSD-3-Clause"
+edition = "2018"
 name = "autocxx-bindgen"
-readme = "README.md"
-repository = "https://github.com/adetaylor/rust-bindgen"
-documentation = "https://docs.rs/bindgen"
-homepage = "https://rust-lang.github.io/rust-bindgen/"
 version = "0.60.3"
-edition = "2018"
+authors = [
+    "Jyun-Yan You <jyyou.tw@gmail.com>",
+    "Emilio Cobos Álvarez <emilio@crisal.io>",
+    "Nick Fitzgerald <fitzgen@gmail.com>",
+    "The Servo project developers",
+    "Adrian Taylor <ade@hohum.me.uk>",
+]
 build = "build.rs"
-
 include = [
-  "LICENSE",
-  "README.md",
-  "Cargo.toml",
-  "build.rs",
-  "src/*.rs",
-  "src/**/*.rs",
+    "LICENSE",
+    "README.md",
+    "Cargo.toml",
+    "build.rs",
+    "src/*.rs",
+    "src/**/*.rs",
 ]
+description = "Automatically generates Rust FFI bindings to C and C++ libraries. Version adjusted for cxx."
+homepage = "https://rust-lang.github.io/rust-bindgen/"
+documentation = "https://docs.rs/bindgen"
+readme = "README.md"
+keywords = [
+    "bindings",
+    "ffi",
+    "code-generation",
+]
+categories = [
+    "external-ffi-bindings",
+    "development-tools::ffi",
+]
+license = "BSD-3-Clause"
+repository = "https://github.com/adetaylor/rust-bindgen"
 
 [lib]
 path = "src/lib.rs"
 
-[dev-dependencies]
-diff = "0.1"
-clap = "3"
-shlex = "1"
-tempfile = "3"
-
-[dependencies]
-bitflags = "1.0.3"
-cexpr = "0.6"
-# This kinda sucks: https://github.com/rust-lang/cargo/issues/1982
-clap = { version = "3", optional = true }
-clang-sys = { version = "1", features = ["clang_6_0"] }
-lazycell = "1"
-lazy_static = "1"
-peeking_take_while = "0.1.2"
-quote = { version = "1", default-features = false }
-regex = { version = "1.0", default-features = false , features = [ "std", "unicode"]}
-which = { version = "4.2.5", optional = true, default-features = false }
-shlex = "1"
-rustc-hash = "1.0.1"
-proc-macro2 = { version = "1", default-features = false }
-itertools = "0.10.0"
+[dependencies.bitflags]
+version = "1.0.3"
 
-[dependencies.env_logger]
+[dependencies.cexpr]
+version = "0.6"
+
+[dependencies.clang-sys]
+version = "1"
+features = ["clang_6_0"]
+
+[dependencies.clap]
+version = "3"
 optional = true
+
+[dependencies.env_logger]
 version = "0.9.0"
+optional = true
+
+[dependencies.itertools]
+version = "0.10.0"
+
+[dependencies.lazy_static]
+version = "1"
+
+[dependencies.lazycell]
+version = "1"
 
 [dependencies.log]
-optional = true
 version = "0.4"
+optional = true
+
+[dependencies.peeking_take_while]
+version = "0.1.2"
+
+[dependencies.proc-macro2]
+version = "1"
+default-features = false
+
+[dependencies.quote]
+version = "1"
+default-features = false
+
+[dependencies.regex]
+version = "1.0"
+features = [
+    "std",
+    "unicode",
+]
+default-features = false
+
+[dependencies.rustc-hash]
+version = "1.0.1"
+
+[dependencies.shlex]
+version = "1"
+
+[dependencies.which]
+version = "4.2.5"
+optional = true
+default-features = false
+
+[dev-dependencies.clap]
+version = "3"
+
+[dev-dependencies.diff]
+version = "0.1"
+
+[dev-dependencies.shlex]
+version = "1"
+
+[dev-dependencies.tempfile]
+version = "3"
 
 [features]
-default = ["logging", "clap", "runtime", "which-rustfmt"]
-logging = ["env_logger", "log"]
-static = ["clang-sys/static"]
+default = [
+    "logging",
+    "clap",
+    "runtime",
+    "which-rustfmt",
+]
+logging = [
+    "env_logger",
+    "log",
+]
 runtime = ["clang-sys/runtime"]
-# Dynamically discover a `rustfmt` binary using the `which` crate
-which-rustfmt = ["which"]
-
-# These features only exist for CI testing -- don't use them if you're not hacking
-# on bindgen!
+static = ["clang-sys/static"]
 testing_only_docs = []
 testing_only_extra_assertions = []
-testing_only_libclang_9 = []
 testing_only_libclang_5 = []
+testing_only_libclang_9 = []
+which-rustfmt = ["which"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/regex_syntax/v0_6/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/regex_syntax/v0_6/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,28 +1,36 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
 name = "regex-syntax"
-version = "0.6.27"  #:version
+version = "0.6.27"
 authors = ["The Rust Project Developers"]
+description = "A regular expression parser."
+homepage = "https://github.com/rust-lang/regex"
+documentation = "https://docs.rs/regex-syntax"
+readme = "README.md"
 license = "MIT OR Apache-2.0"
 repository = "https://github.com/rust-lang/regex"
-documentation = "https://docs.rs/regex-syntax"
-homepage = "https://github.com/rust-lang/regex"
-description = "A regular expression parser."
-workspace = ".."
-edition = "2018"
 
-# Features are documented in the "Crate features" section of the crate docs:
-# https://docs.rs/regex-syntax/*/#crate-features
 [features]
 default = ["unicode"]
-
 unicode = [
-  "unicode-age",
-  "unicode-bool",
-  "unicode-case",
-  "unicode-gencat",
-  "unicode-perl",
-  "unicode-script",
-  "unicode-segment",
+    "unicode-age",
+    "unicode-bool",
+    "unicode-case",
+    "unicode-gencat",
+    "unicode-perl",
+    "unicode-script",
+    "unicode-segment",
 ]
 unicode-age = []
 unicode-bool = []
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/link_cplusplus/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/link_cplusplus/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,27 +1,36 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
+edition = "2018"
 name = "link-cplusplus"
 version = "1.0.5"
 authors = ["David Tolnay <dtolnay@gmail.com>"]
 links = "cplusplus"
-edition = "2018"
-license = "MIT OR Apache-2.0"
 description = "Link libstdc++ or libc++ automatically or manually"
-repository = "https://github.com/dtolnay/link-cplusplus"
 documentation = "https://docs.rs/link-cplusplus"
 readme = "README.md"
-
-[build-dependencies]
-cc = "1.0"
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/dtolnay/link-cplusplus"
+[package.metadata.docs.rs]
+targets = ["x86_64-unknown-linux-gnu"]
+# Removed for Chromium build.
+#[build-dependencies.cc]
+#version = "1.0"
 
 [features]
-default = [] # automatic
-"libstdc++" = [] # force libstdc++
-"libc++" = [] # force libc++
-nothing = [] # link nothing, determined somewhere else
-
-# deprecated aliases
-libstdcxx = ["libstdc++"]
+default = []
+"libc++" = []
 libcxx = ["libc++"]
-
-[package.metadata.docs.rs]
-targets = ["x86_64-unknown-linux-gnu"]
+"libstdc++" = []
+libstdcxx = ["libstdc++"]
+nothing = []
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/glob/v0_3/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/glob/v0_3/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,16 +1,24 @@
-[package]
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
 
+[package]
 name = "glob"
 version = "0.3.0"
 authors = ["The Rust Project Developers"]
-license = "MIT/Apache-2.0"
+description = "Support for matching file paths against Unix shell style patterns.\n"
 homepage = "https://github.com/rust-lang/glob"
-repository = "https://github.com/rust-lang/glob"
 documentation = "https://docs.rs/glob/0.3.0"
-description = """
-Support for matching file paths against Unix shell style patterns.
-"""
 categories = ["filesystem"]
-
-[dev-dependencies]
-tempdir = "0.3"
+license = "MIT/Apache-2.0"
+repository = "https://github.com/rust-lang/glob"
+[dev-dependencies.tempdir]
+version = "0.3"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/strum_macros/v0_24/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/strum_macros/v0_24/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,29 +1,45 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
 name = "strum_macros"
 version = "0.24.0"
-edition = "2018"
 authors = ["Peter Glotfelty <peter.glotfelty@microsoft.com>"]
-license = "MIT"
-
 description = "Helpful macros for working with enums and strings"
+homepage = "https://github.com/Peternator7/strum"
+documentation = "https://docs.rs/strum"
+readme = "../README.md"
 keywords = ["enum", "string", "macros", "proc-macros"]
 categories = ["development-tools::procedural-macro-helpers", "parsing"]
-
-documentation = "https://docs.rs/strum"
-homepage = "https://github.com/Peternator7/strum"
+license = "MIT"
 repository = "https://github.com/Peternator7/strum"
-readme = "../README.md"
 
 [lib]
-proc-macro = true
 name = "strum_macros"
+proc-macro = true
+[dependencies.heck]
+version = "0.4"
+
+[dependencies.proc-macro2]
+version = "1.0"
+
+[dependencies.quote]
+version = "1.0"
 
-[dependencies]
-heck = "0.4"
-proc-macro2 = "1.0"
-quote = "1.0"
-rustversion = "1.0"
-syn = { version = "1.0", features = ["parsing", "extra-traits"] }
+[dependencies.rustversion]
+version = "1.0"
 
-[dev-dependencies]
-strum = "0.23"
+[dependencies.syn]
+version = "1.0"
+features = ["parsing", "extra-traits"]
+[dev-dependencies.strum]
+version = "0.23"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/rustversion/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/rustversion/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,21 +1,31 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
+rust-version = "1.31"
 name = "rustversion"
 version = "1.0.6"
 authors = ["David Tolnay <dtolnay@gmail.com>"]
-edition = "2018"
-rust-version = "1.31"
-license = "MIT OR Apache-2.0"
+build = "build/build.rs"
 description = "Conditional compilation according to rustc compiler version"
-repository = "https://github.com/dtolnay/rustversion"
 documentation = "https://docs.rs/rustversion"
 readme = "README.md"
-build = "build/build.rs"
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/dtolnay/rustversion"
+[package.metadata.docs.rs]
+targets = ["x86_64-unknown-linux-gnu"]
 
 [lib]
 proc-macro = true
-
-[dev-dependencies]
-trybuild = { version = "1.0.49", features = ["diff"] }
-
-[package.metadata.docs.rs]
-targets = ["x86_64-unknown-linux-gnu"]
+[dev-dependencies.trybuild]
+version = "1.0.49"
+features = ["diff"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/adler/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/adler/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,68 +1,64 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
 name = "adler"
 version = "1.0.2"
 authors = ["Jonas Schievink <jonasschievink@gmail.com>"]
 description = "A simple clean-room implementation of the Adler-32 checksum"
 documentation = "https://docs.rs/adler/"
-repository = "https://github.com/jonas-schievink/adler.git"
+readme = "README.md"
 keywords = ["checksum", "integrity", "hash", "adler32", "zlib"]
 categories = ["algorithms"]
-readme = "README.md"
 license = "0BSD OR MIT OR Apache-2.0"
-
-[[bench]]
-name = "bench"
-harness = false
-
-[dependencies]
-# Internal features, only used when building as part of libstd, not part of the
-# stable interface of this crate.
-core = { version = '1.0.0', optional = true, package = 'rustc-std-workspace-core' }
-compiler_builtins = { version = '0.1.2', optional = true }
-
-[dev-dependencies]
-criterion = "0.3.2"
-
-[features]
-# Disable default features to enable `#![no_std]` support.
-default = ["std"]
-std = []
-
-# Internal feature, only used when building as part of libstd, not part of the
-# stable interface of this crate.
-rustc-dep-of-std = ['core', 'compiler_builtins']
-
-
+repository = "https://github.com/jonas-schievink/adler.git"
 [package.metadata.docs.rs]
-rustdoc-args = [ "--cfg=docsrs" ]
+rustdoc-args = ["--cfg=docsrs"]
 
-# cargo-release configuration
 [package.metadata.release]
-tag-message = "{{version}}"
 no-dev-version = true
 pre-release-commit-message = "Release {{version}}"
+tag-message = "{{version}}"
 
-# Change the changelog's `Unreleased` section to refer to this release and
-# prepend a new `Unreleased` section
 [[package.metadata.release.pre-release-replacements]]
-file    = "CHANGELOG.md"
-search  = "## Unreleased\n"
-replace = """
-## Unreleased
-
-No changes.
+file = "CHANGELOG.md"
+replace = "## Unreleased\n\nNo changes.\n\n## [{{version}} - {{date}}](https://github.com/jonas-schievink/adler/releases/tag/v{{version}})\n"
+search = "## Unreleased\n"
 
-## [{{version}} - {{date}}](https://github.com/jonas-schievink/adler/releases/tag/v{{version}})
-"""
-
-# Bump the version inside the example manifest in `README.md`
 [[package.metadata.release.pre-release-replacements]]
-file    = "README.md"
-search  = 'adler = "[a-z0-9\\.-]+"'
-replace = 'adler = "{{version}}"'
+file = "README.md"
+replace = "adler = \"{{version}}\""
+search = "adler = \"[a-z0-9\\\\.-]+\""
 
-# Bump the version referenced by the `html_root_url` attribute in `lib.rs`
 [[package.metadata.release.pre-release-replacements]]
-file    = "src/lib.rs"
-search  = "https://docs.rs/adler/[a-z0-9\\.-]+"
+file = "src/lib.rs"
 replace = "https://docs.rs/adler/{{version}}"
+search = "https://docs.rs/adler/[a-z0-9\\.-]+"
+
+[[bench]]
+name = "bench"
+harness = false
+[dependencies.compiler_builtins]
+version = "0.1.2"
+optional = true
+
+[dependencies.core]
+version = "1.0.0"
+optional = true
+package = "rustc-std-workspace-core"
+[dev-dependencies.criterion]
+version = "0.3.2"
+
+[features]
+default = ["std"]
+rustc-dep-of-std = ["core", "compiler_builtins"]
+std = []
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/winapi_util/v0_1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/winapi_util/v0_1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,31 +1,30 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
+edition = "2018"
 name = "winapi-util"
-version = "0.1.5"  #:version
+version = "0.1.5"
 authors = ["Andrew Gallant <jamslam@gmail.com>"]
 description = "A dumping ground for high level safe wrappers over winapi."
-documentation = "https://docs.rs/winapi-util"
 homepage = "https://github.com/BurntSushi/winapi-util"
-repository = "https://github.com/BurntSushi/winapi-util"
+documentation = "https://docs.rs/winapi-util"
 readme = "README.md"
 keywords = ["windows", "winapi", "util", "win"]
-license = "Unlicense/MIT"
 categories = ["os::windows-apis", "external-ffi-bindings"]
-edition = "2018"
-
-[target.'cfg(windows)'.dependencies.winapi]
-version = "0.3"
-features = [
-  "std",
-  "consoleapi",
-  "errhandlingapi",
-  "fileapi",
-  "minwindef",
-  "processenv",
-  "winbase",
-  "wincon",
-  "winerror",
-  "winnt",
-]
-
+license = "Unlicense/MIT"
+repository = "https://github.com/BurntSushi/winapi-util"
 [package.metadata.docs.rs]
 targets = ["x86_64-pc-windows-msvc"]
+[target."cfg(windows)".dependencies.winapi]
+version = "0.3"
+features = ["std", "consoleapi", "errhandlingapi", "fileapi", "minwindef", "processenv", "winbase", "wincon", "winerror", "winnt"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/cfg_if/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/cfg_if/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,25 +1,36 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
+edition = "2018"
 name = "cfg-if"
 version = "1.0.0"
 authors = ["Alex Crichton <alex@alexcrichton.com>"]
-license = "MIT/Apache-2.0"
-readme = "README.md"
-repository = "https://github.com/alexcrichton/cfg-if"
+description = "A macro to ergonomically define an item depending on a large number of #[cfg]\nparameters. Structured like an if-else chain, the first matching branch is the\nitem that gets emitted.\n"
 homepage = "https://github.com/alexcrichton/cfg-if"
 documentation = "https://docs.rs/cfg-if"
-description = """
-A macro to ergonomically define an item depending on a large number of #[cfg]
-parameters. Structured like an if-else chain, the first matching branch is the
-item that gets emitted.
-"""
-edition = "2018"
-
-[badges]
-travis-ci = { repository = "alexcrichton/cfg-if" }
+readme = "README.md"
+license = "MIT/Apache-2.0"
+repository = "https://github.com/alexcrichton/cfg-if"
+[dependencies.compiler_builtins]
+version = "0.1.2"
+optional = true
 
-[dependencies]
-core = { version = "1.0.0", optional = true, package = 'rustc-std-workspace-core' }
-compiler_builtins = { version = '0.1.2', optional = true }
+[dependencies.core]
+version = "1.0.0"
+optional = true
+package = "rustc-std-workspace-core"
 
 [features]
-rustc-dep-of-std = ['core', 'compiler_builtins']
+rustc-dep-of-std = ["core", "compiler_builtins"]
+[badges.travis-ci]
+repository = "alexcrichton/cfg-if"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/serde/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/serde/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,55 +1,43 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
 name = "serde"
-version = "1.0.130" # remember to update html_root_url and serde_derive dependency
+version = "1.0.130"
 authors = ["Erick Tryzelaar <erick.tryzelaar@gmail.com>", "David Tolnay <dtolnay@gmail.com>"]
-license = "MIT OR Apache-2.0"
+build = "build.rs"
+include = ["build.rs", "src/**/*.rs", "crates-io.md", "README.md", "LICENSE-APACHE", "LICENSE-MIT"]
 description = "A generic serialization/deserialization framework"
 homepage = "https://serde.rs"
-repository = "https://github.com/serde-rs/serde"
 documentation = "https://docs.serde.rs/serde/"
+readme = "crates-io.md"
 keywords = ["serde", "serialization", "no_std"]
 categories = ["encoding"]
-readme = "crates-io.md"
-include = ["build.rs", "src/**/*.rs", "crates-io.md", "README.md", "LICENSE-APACHE", "LICENSE-MIT"]
-build = "build.rs"
-
-[dependencies]
-serde_derive = { version = "=1.0.130", optional = true, path = "../serde_derive" }
-
-[dev-dependencies]
-serde_derive = { version = "1.0", path = "../serde_derive" }
-
-[package.metadata.playground]
-features = ["derive", "rc"]
-
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/serde-rs/serde"
 [package.metadata.docs.rs]
 targets = ["x86_64-unknown-linux-gnu"]
 
-
-### FEATURES #################################################################
+[package.metadata.playground]
+features = ["derive", "rc"]
+[dependencies.serde_derive]
+version = "=1.0.130"
+optional = true
+[dev-dependencies.serde_derive]
+version = "1.0"
 
 [features]
+alloc = []
 default = ["std"]
-
-# Provide derive(Serialize, Deserialize) macros.
 derive = ["serde_derive"]
-
-# Provide impls for common standard library types like Vec<T> and HashMap<K, V>.
-# Requires a dependency on the Rust standard library.
+rc = []
 std = []
-
-# Provide impls for types that require unstable functionality. For tracking and
-# discussion of unstable functionality please refer to this issue:
-#
-#    https://github.com/serde-rs/serde/issues/812
 unstable = []
-
-# Provide impls for types in the Rust core allocation and collections library
-# including String, Box<T>, Vec<T>, and Cow<T>. This is a subset of std but may
-# be enabled without depending on all of std.
-alloc = []
-
-# Opt into impls for Rc<T> and Arc<T>. Serializing and deserializing these types
-# does not preserve identity and may result in multiple copies of the same data.
-# Be sure that this is what you want before enabling this feature.
-rc = []
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/cxx/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/cxx/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,50 +1,85 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
-name = "cxx"
-version = "1.0.68" # remember to update html_root_url
-authors = ["David Tolnay <dtolnay@gmail.com>"]
 edition = "2018"
 rust-version = "1.48"
+name = "cxx"
+version = "1.0.68"
+authors = ["David Tolnay <dtolnay@gmail.com>"]
 links = "cxxbridge1"
-license = "MIT OR Apache-2.0"
+exclude = [
+    "/demo",
+    "/gen",
+    "/syntax",
+    "/third-party",
+]
 description = "Safe interop between Rust and C++"
-repository = "https://github.com/dtolnay/cxx"
-documentation = "https://docs.rs/cxx"
 homepage = "https://cxx.rs"
+documentation = "https://docs.rs/cxx"
 readme = "README.md"
-exclude = ["/demo", "/gen", "/syntax", "/third-party"]
 keywords = ["ffi"]
-categories = ["development-tools::ffi", "api-bindings"]
+categories = [
+    "development-tools::ffi",
+    "api-bindings",
+]
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/dtolnay/cxx"
 
-[features]
-default = ["std", "cxxbridge-flags/default"] # c++11
-"c++14" = ["cxxbridge-flags/c++14"]
-"c++17" = ["cxxbridge-flags/c++17"]
-"c++20" = ["cxxbridge-flags/c++20"]
-alloc = []
-std = ["alloc"]
+[package.metadata.docs.rs]
+targets = ["x86_64-unknown-linux-gnu"]
+rustdoc-args = [
+    "--cfg",
+    "doc_cfg",
+]
 
-[dependencies]
-cxxbridge-macro = { version = "=1.0.68", path = "macro" }
-link-cplusplus = "1.0"
-
-[build-dependencies]
-cc = "1.0.49"
-cxxbridge-flags = { version = "=1.0.68", path = "flags", default-features = false }
-
-[dev-dependencies]
-cxx-build = { version = "=1.0.68", path = "gen/build" }
-cxx-gen = { version = "0.7", path = "gen/lib" }
-cxx-test-suite = { version = "0", path = "tests/ffi" }
-rustversion = "1.0"
-trybuild = { version = "1.0.52", features = ["diff"] }
+[dependencies.cxxbridge-macro]
+version = "=1.0.68"
 
-[workspace]
-members = ["demo", "flags", "gen/build", "gen/cmd", "gen/lib", "macro", "tests/ffi"]
+[dependencies.link-cplusplus]
+version = "1.0"
 
-[package.metadata.docs.rs]
-targets = ["x86_64-unknown-linux-gnu"]
-rustdoc-args = ["--cfg", "doc_cfg"]
+[dev-dependencies.cxx-build]
+version = "=1.0.68"
+
+[dev-dependencies.cxx-gen]
+version = "0.7"
+
+[dev-dependencies.cxx-test-suite]
+version = "0"
+
+[dev-dependencies.rustversion]
+version = "1.0"
 
-[patch.crates-io]
-cxx = { path = "." }
-cxx-build = { path = "gen/build" }
+[dev-dependencies.trybuild]
+version = "1.0.52"
+features = ["diff"]
+
+# Removed for Chromium build.
+# [build-dependencies.cc]
+# version = "1.0.49"
+
+# [build-dependencies.cxxbridge-flags]
+# version = "=1.0.68"
+# default-features = false
+
+[features]
+alloc = []
+# Removed for Chromium build.
+# "c++14" = ["cxxbridge-flags/c++14"]
+# "c++17" = ["cxxbridge-flags/c++17"]
+# "c++20" = ["cxxbridge-flags/c++20"]
+default = [
+    "std",
+    # Removed for Chromium build.
+    # "cxxbridge-flags/default",
+]
+std = ["alloc"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/small_ctor/v0_1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/small_ctor/v0_1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,12 +1,23 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
 name = "small_ctor"
 version = "0.1.0"
-edition = "2018"
 authors = ["Armin Ronacher <armin.ronacher@active-4.com>"]
-license = "Apache-2.0"
 description = "A minimal, dependency free version of the ctor crate"
-repository = "https://github.com/mitsuhiko/small-ctor"
 keywords = ["ctor", "attribute", "constructor"]
+license = "Apache-2.0"
+repository = "https://github.com/mitsuhiko/small-ctor"
 
 [lib]
 name = "small_ctor"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/hashbrown/v0_11/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/hashbrown/v0_11/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,59 +1,84 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
+edition = "2018"
 name = "hashbrown"
 version = "0.11.2"
 authors = ["Amanieu d'Antras <amanieu@gmail.com>"]
+exclude = [".travis.yml", "bors.toml", "/ci/*"]
 description = "A Rust port of Google's SwissTable hash map"
-license = "Apache-2.0/MIT"
-repository = "https://github.com/rust-lang/hashbrown"
 readme = "README.md"
 keywords = ["hash", "no_std", "hashmap", "swisstable"]
 categories = ["data-structures", "no-std"]
-exclude = [".travis.yml", "bors.toml", "/ci/*"]
-edition = "2018"
+license = "Apache-2.0/MIT"
+repository = "https://github.com/rust-lang/hashbrown"
+[package.metadata.docs.rs]
+features = ["nightly", "rayon", "serde", "raw"]
+[dependencies.ahash]
+version = "0.7.0"
+optional = true
+default-features = false
+
+[dependencies.alloc]
+version = "1.0.0"
+optional = true
+package = "rustc-std-workspace-alloc"
+
+[dependencies.bumpalo]
+version = "3.5.0"
+optional = true
+
+[dependencies.compiler_builtins]
+version = "0.1.2"
+optional = true
+
+[dependencies.core]
+version = "1.0.0"
+optional = true
+package = "rustc-std-workspace-core"
+
+[dependencies.rayon]
+version = "1.0"
+optional = true
+
+[dependencies.serde]
+version = "1.0.25"
+optional = true
+default-features = false
+[dev-dependencies.doc-comment]
+version = "0.3.1"
+
+[dev-dependencies.fnv]
+version = "1.0.7"
+
+[dev-dependencies.lazy_static]
+version = "1.4"
+
+[dev-dependencies.rand]
+version = "0.7.3"
+features = ["small_rng"]
 
-[dependencies]
-# For the default hasher
-ahash = { version = "0.7.0", default-features = false, optional = true }
-
-# For external trait impls
-rayon = { version = "1.0", optional = true }
-serde = { version = "1.0.25", default-features = false, optional = true }
-
-# When built as part of libstd
-core = { version = "1.0.0", optional = true, package = "rustc-std-workspace-core" }
-compiler_builtins = { version = "0.1.2", optional = true }
-alloc = { version = "1.0.0", optional = true, package = "rustc-std-workspace-alloc" }
-
-# Optional support for bumpalo
-bumpalo = { version = "3.5.0", optional = true }
-
-[dev-dependencies]
-lazy_static = "1.4"
-rand = { version = "0.7.3", features = ["small_rng"] }
-rayon = "1.0"
-fnv = "1.0.7"
-serde_test = "1.0"
-doc-comment = "0.3.1"
+[dev-dependencies.rayon]
+version = "1.0"
 
-[features]
-default = ["ahash", "inline-more"]
+[dev-dependencies.serde_test]
+version = "1.0"
 
+[features]
 ahash-compile-time-rng = ["ahash/compile-time-rng"]
+default = ["ahash", "inline-more"]
+inline-more = []
 nightly = []
-rustc-internal-api = []
-rustc-dep-of-std = [
-    "nightly",
-    "core",
-    "compiler_builtins",
-    "alloc",
-    "rustc-internal-api",
-]
 raw = []
-
-# Enables usage of `#[inline]` on far more functions than by default in this
-# crate. This may lead to a performance increase but often comes at a compile
-# time cost.
-inline-more = []
-
-[package.metadata.docs.rs]
-features = ["nightly", "rayon", "serde", "raw"]
+rustc-dep-of-std = ["nightly", "core", "compiler_builtins", "alloc", "rustc-internal-api"]
+rustc-internal-api = []
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/proc_macro_error_attr/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/proc_macro_error_attr/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,23 +1,33 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
+edition = "2018"
 name = "proc-macro-error-attr"
 version = "1.0.4"
 authors = ["CreepySkeleton <creepy-skeleton@yandex.ru>"]
-edition = "2018"
+build = "build.rs"
 description = "Attribute macro for proc-macro-error crate"
 license = "MIT OR Apache-2.0"
 repository = "https://gitlab.com/CreepySkeleton/proc-macro-error"
-
-build = "build.rs"
-
-[lib]
-proc-macro = true
-
 [package.metadata.docs.rs]
 targets = ["x86_64-unknown-linux-gnu"]
 
-[dependencies]
-quote = "1"
-proc-macro2 = "1"
+[lib]
+proc-macro = true
+[dependencies.proc-macro2]
+version = "1"
 
-[build-dependencies]
-version_check = "0.9"
+[dependencies.quote]
+version = "1"
+[build-dependencies.version_check]
+version = "0.9"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/cxx_gen/v0_7/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/cxx_gen/v0_7/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,21 +1,48 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
+rust-version = "1.48"
 name = "cxx-gen"
 version = "0.7.68"
 authors = ["Adrian Taylor <adetaylor@chromium.org>"]
-edition = "2018"
-rust-version = "1.48"
-license = "MIT OR Apache-2.0"
-description = "C++ code generator for integrating `cxx` crate into higher level tools."
-repository = "https://github.com/dtolnay/cxx"
 exclude = ["build.rs"]
+description = "C++ code generator for integrating `cxx` crate into higher level tools."
 keywords = ["ffi"]
 categories = ["development-tools::ffi"]
-
-[dependencies]
-codespan-reporting = "0.11"
-proc-macro2 = { version = "1.0.26", default-features = false, features = ["span-locations"] }
-quote = { version = "1.0", default-features = false }
-syn = { version = "1.0.70", default-features = false, features = ["parsing", "printing", "clone-impls", "full"] }
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/dtolnay/cxx"
 
 [package.metadata.docs.rs]
 targets = ["x86_64-unknown-linux-gnu"]
+
+[dependencies.codespan-reporting]
+version = "0.11"
+
+[dependencies.proc-macro2]
+version = "1.0.26"
+features = ["span-locations"]
+default-features = false
+
+[dependencies.quote]
+version = "1.0"
+default-features = false
+
+[dependencies.syn]
+version = "1.0.70"
+features = [
+    "parsing",
+    "printing",
+    "clone-impls",
+    "full",
+]
+default-features = false
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/aho_corasick/v0_7/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/aho_corasick/v0_7/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,40 +1,43 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
+edition = "2018"
 name = "aho-corasick"
-version = "0.7.18"  #:version
+version = "0.7.18"
 authors = ["Andrew Gallant <jamslam@gmail.com>"]
+exclude = ["/aho-corasick-debug", "/ci/*", "/.travis.yml", "/appveyor.yml"]
+autotests = false
 description = "Fast multiple substring searching."
 homepage = "https://github.com/BurntSushi/aho-corasick"
-repository = "https://github.com/BurntSushi/aho-corasick"
 readme = "README.md"
 keywords = ["string", "search", "text", "aho", "multi"]
-license = "Unlicense/MIT"
 categories = ["text-processing"]
-autotests = false
-exclude = [
-  "/aho-corasick-debug", "/ci/*", "/.travis.yml", "/appveyor.yml",
-]
-edition = "2018"
+license = "Unlicense/MIT"
+repository = "https://github.com/BurntSushi/aho-corasick"
+[profile.bench]
+debug = true
 
-[workspace]
-members = ["aho-corasick-debug", "bench"]
+[profile.release]
+debug = true
 
 [lib]
 name = "aho_corasick"
+[dependencies.memchr]
+version = "2.4.0"
+default-features = false
+
+[dev-dependencies]
 
 [features]
 default = ["std"]
 std = ["memchr/std"]
-
-[dependencies]
-memchr = { version = "2.4.0", default-features = false }
-
-[dev-dependencies]
-# TODO: Re-enable this once the MSRV is 1.43 or greater.
-# See: https://github.com/BurntSushi/aho-corasick/issues/62
-# doc-comment = "0.3.1"
-
-[profile.release]
-debug = true
-
-[profile.bench]
-debug = true
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/serde_json_lenient/v0_1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/serde_json_lenient/v0_1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,93 +1,98 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
+rust-version = "1.31"
 name = "serde_json_lenient"
-version = "0.1.4" # remember to update html_root_url
+version = "0.1.4"
 authors = [
     "Adrian Taylor <adetaylor@chromium.org>",
     "Michael Bolin <bolinfest@gmail.com>",
     "Erick Tryzelaar <erick.tryzelaar@gmail.com>",
     "David Tolnay <dtolnay@gmail.com>",
 ]
-license = "MIT/Apache-2.0"
+include = [
+    "build.rs",
+    "src/**/*.rs",
+    "README.md",
+    "LICENSE-APACHE",
+    "LICENSE-MIT",
+]
 description = "A lenient JSON serialization file format"
-repository = "https://github.com/google/serde_json_lenient"
 documentation = "https://docs.rs/serde_json_lenient/latest/"
-keywords = ["json", "serde", "serialization"]
-categories = ["encoding"]
 readme = "README.md"
-include = ["build.rs", "src/**/*.rs", "README.md", "LICENSE-APACHE", "LICENSE-MIT"]
-edition = "2018"
-rust-version = "1.31"
-
-[dependencies]
-serde = { version = "1.0.100", default-features = false }
-indexmap = { version = "1.5", optional = true }
-itoa = { version = "0.4.3", default-features = false }
-ryu = "1.0"
-
-[dev-dependencies]
-automod = "1.0"
-rustversion = "1.0"
-serde_bytes = "0.11"
-serde_derive = "1.0"
-serde_stacker = "0.1"
-trybuild = { version = "1.0.49", features = ["diff"] }
-
-[workspace]
-members = ["tests/crate"]
+keywords = [
+    "json",
+    "serde",
+    "serialization",
+]
+categories = ["encoding"]
+license = "MIT/Apache-2.0"
+repository = "https://github.com/google/serde_json_lenient"
 
 [package.metadata.docs.rs]
-features = ["raw_value", "unbounded_depth"]
+features = [
+    "raw_value",
+    "unbounded_depth",
+]
 targets = ["x86_64-unknown-linux-gnu"]
-rustdoc-args = ["--cfg", "docsrs"]
+rustdoc-args = [
+    "--cfg",
+    "docsrs",
+]
 
 [package.metadata.playground]
 features = ["raw_value"]
 
+[dependencies.indexmap]
+version = "1.5"
+optional = true
 
-### FEATURES #################################################################
+[dependencies.itoa]
+version = "0.4.3"
+default-features = false
 
-[features]
-default = ["std"]
+[dependencies.ryu]
+version = "1.0"
 
-std = ["serde/std"]
+[dependencies.serde]
+version = "1.0.100"
+default-features = false
 
-# Provide integration for heap-allocated collections without depending on the
-# rest of the Rust standard library.
-# NOTE: Disabling both `std` *and* `alloc` features is not supported yet.
-# Available on Rust 1.36+.
-alloc = ["serde/alloc"]
+[dev-dependencies.automod]
+version = "1.0"
 
-# Make serde_json::Map use a representation which maintains insertion order.
-# This allows data to be read into a Value and written back to a JSON string
-# while preserving the order of map keys in the input.
-preserve_order = ["indexmap"]
+[dev-dependencies.rustversion]
+version = "1.0"
 
-# Use sufficient precision when parsing fixed precision floats from JSON to
-# ensure that they maintain accuracy when round-tripped through JSON. This comes
-# at an approximately 2x performance cost for parsing floats compared to the
-# default best-effort precision.
-#
-# Unlike arbitrary_precision, this feature makes f64 -> JSON -> f64 produce
-# output identical to the input.
-float_roundtrip = []
+[dev-dependencies.serde_bytes]
+version = "0.11"
 
-# Use an arbitrary precision number representation for serde_json_lenient::Number. This
-# allows JSON numbers of arbitrary size/precision to be read into a Number and
-# written back to a JSON string without loss of precision.
-#
-# Unlike float_roundtrip, this feature makes JSON -> serde_json::Number -> JSON
-# produce output identical to the input.
-arbitrary_precision = []
+[dev-dependencies.serde_derive]
+version = "1.0"
 
-# Provide a RawValue type that can hold unprocessed JSON during deserialization.
-raw_value = []
+[dev-dependencies.serde_stacker]
+version = "0.1"
 
-# Provide a method disable_recursion_limit to parse arbitrarily deep JSON
-# structures without any consideration for overflowing the stack. When using
-# this feature, you will want to provide some other way to protect against stack
-# overflows, such as by wrapping your Deserializer in the dynamically growing
-# stack adapter provided by the serde_stacker crate. Additionally you will need
-# to be careful around other recursive operations on the parsed result which may
-# overflow the stack after deserialization has completed, including, but not
-# limited to, Display and Debug and Drop impls.
+[dev-dependencies.trybuild]
+version = "1.0.49"
+features = ["diff"]
+
+[features]
+alloc = ["serde/alloc"]
+arbitrary_precision = []
+default = ["std"]
+float_roundtrip = []
+preserve_order = ["indexmap"]
+raw_value = []
+std = ["serde/std"]
 unbounded_depth = []
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/memchr/v2/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/memchr/v2/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,57 +1,59 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
 name = "memchr"
-version = "2.4.1"  #:version
+version = "2.4.1"
 authors = ["Andrew Gallant <jamslam@gmail.com>", "bluss"]
+exclude = ["/bench", "/.github", "/fuzz"]
 description = "Safe interface to memchr."
-documentation = "https://docs.rs/memchr/"
 homepage = "https://github.com/BurntSushi/memchr"
-repository = "https://github.com/BurntSushi/memchr"
+documentation = "https://docs.rs/memchr/"
 readme = "README.md"
 keywords = ["memchr", "char", "scan", "strchr", "string"]
 license = "Unlicense/MIT"
-exclude = ["/bench", "/.github", "/fuzz"]
-edition = "2018"
+repository = "https://github.com/BurntSushi/memchr"
+[profile.bench]
+debug = true
 
-[workspace]
-members = ["bench"]
+[profile.release]
+debug = true
+
+[profile.test]
+opt-level = 3
+debug = true
 
 [lib]
 name = "memchr"
 bench = false
+[dependencies.compiler_builtins]
+version = "0.1.2"
+optional = true
+
+[dependencies.core]
+version = "1.0.0"
+optional = true
+package = "rustc-std-workspace-core"
+
+[dependencies.libc]
+version = "0.2.18"
+optional = true
+default-features = false
+[dev-dependencies.quickcheck]
+version = "1.0.3"
+default-features = false
 
 [features]
 default = ["std"]
-
-# The 'std' feature permits the memchr crate to use the standard library. This
-# permits this crate to use runtime CPU feature detection to automatically
-# accelerate searching via vector instructions. Without the standard library,
-# this automatic detection is not possible.
+rustc-dep-of-std = ["core", "compiler_builtins"]
 std = []
-# The 'use_std' feature is DEPRECATED. It will be removed in memchr 3. Until
-# then, it is alias for the 'std' feature.
 use_std = ["std"]
-
-# Internal feature, only used when building as part of libstd, not part of the
-# stable interface of this crate.
-rustc-dep-of-std = ['core', 'compiler_builtins']
-
-[dependencies]
-libc = { version = "0.2.18", default-features = false, optional = true }
-
-# Internal feature, only used when building as part of libstd, not part of the
-# stable interface of this crate.
-core = { version = '1.0.0', optional = true, package = 'rustc-std-workspace-core' }
-compiler_builtins = { version = '0.1.2', optional = true }
-
-[dev-dependencies]
-quickcheck = { version = "1.0.3", default-features = false }
-
-[profile.release]
-debug = true
-
-[profile.bench]
-debug = true
-
-[profile.test]
-opt-level = 3
-debug = true
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/autocxx_gen/v0_22/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/autocxx_gen/v0_22/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,41 +1,75 @@
-# Copyright 2020 Google LLC
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
 #
-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
-# https://www.apache.org/licenses/LICENSE-2.0> or the MIT license
-# <LICENSE-MIT or https://opensource.org/licenses/MIT>, at your
-# option. This file may not be copied, modified, or distributed
-# except according to those terms.
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
 
 [package]
+edition = "2021"
 name = "autocxx-gen"
 version = "0.22.4"
 authors = ["Adrian Taylor <adetaylor@chromium.org>"]
-edition = "2021"
-license = "MIT OR Apache-2.0"
 description = "Safe autogenerated interop between Rust and C++"
-repository = "https://github.com/google/autocxx"
+readme = "README.md"
 keywords = ["ffi"]
-categories = ["development-tools::ffi", "api-bindings"]
+categories = [
+    "development-tools::ffi",
+    "api-bindings",
+]
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/google/autocxx"
+resolver = "2"
 
-[features]
-runtime = [ "autocxx-engine/runtime" ]
-static = [ "autocxx-engine/static" ]
+[dependencies.autocxx-engine]
+version = "=0.22.4"
+
+[dependencies.clap]
+version = "3.1.2"
+features = ["cargo"]
 
-[dependencies]
-autocxx-engine = { version="=0.22.4", path="../../engine" }
-clap = { version = "3.1.2", features = ["cargo"] }
-proc-macro2 = "1.0"
-env_logger = "0.9.0"
-miette = { version="4.3", features=["fancy"]}
-pathdiff = "0.2.1"
-indexmap = "1.8"
-
-[dev-dependencies]
-assert_cmd = "1.0.3"
-tempfile = "3.1"
-autocxx-integration-tests = { path = "../../integration-tests", version="=0.22.4" }
-# This is necessary for building the projects created
-# by the trybuild test system...
-autocxx = { path="../.." }
-cxx = "1.0.68"
-itertools = "0.10.3"
\ No newline at end of file
+[dependencies.env_logger]
+version = "0.9.0"
+
+[dependencies.indexmap]
+version = "1.8"
+
+[dependencies.miette]
+version = "4.3"
+features = ["fancy"]
+
+[dependencies.pathdiff]
+version = "0.2.1"
+
+[dependencies.proc-macro2]
+version = "1.0"
+
+# Removed for Chromium: autocxx-integration-tests transitively depends on cc
+# which is not allowed. See https://crbug.com/1336017. For now we simply remove
+# the tests.
+#
+# TODO(https://crbug.com/1336017): remove the dependency on cc and restore these
+# tests.
+#
+# [dev-dependencies.assert_cmd]
+# version = "1.0.3"
+# 
+# [dev-dependencies.autocxx-integration-tests]
+# version = "=0.22.4"
+# 
+# [dev-dependencies.cxx]
+# version = "1.0.68"
+# 
+# [dev-dependencies.itertools]
+# version = "0.10.3"
+# 
+# [dev-dependencies.tempfile]
+# version = "3.1"
+
+[features]
+runtime = ["autocxx-engine/runtime"]
+static = ["autocxx-engine/static"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/fastrand/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/fastrand/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,28 +1,43 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
+rust-version = "1.34"
 name = "fastrand"
-# When publishing a new version:
-# - Update CHANGELOG.md
-# - Create "v1.x.y" git tag
 version = "1.7.0"
 authors = ["Stjepan Glavina <stjepang@gmail.com>"]
-edition = "2018"
-rust-version = "1.34"
+exclude = ["/.*"]
 description = "A simple and fast random number generator"
-license = "Apache-2.0 OR MIT"
-repository = "https://github.com/smol-rs/fastrand"
 keywords = ["simple", "fast", "rand", "random", "wyrand"]
 categories = ["algorithms"]
-exclude = ["/.*"]
+license = "Apache-2.0 OR MIT"
+repository = "https://github.com/smol-rs/fastrand"
+[dev-dependencies.getrandom]
+version = "0.2"
+
+[dev-dependencies.rand]
+version = "0.8"
 
-[target.'cfg(target_arch = "wasm32")'.dependencies]
-instant = "0.1"
+[dev-dependencies.wyhash]
+version = "0.5"
+[target."cfg(target_arch = \"wasm32\")".dependencies.instant]
+version = "0.1"
+[target."cfg(target_arch = \"wasm32\")".dev-dependencies.getrandom]
+version = "0.2"
+features = ["js"]
 
-[target.'cfg(target_arch = "wasm32")'.dev-dependencies]
-instant = { version = "0.1", features = ["wasm-bindgen"] }
-wasm-bindgen-test = "0.3"
-getrandom = { version = "0.2", features = ["js"] }
+[target."cfg(target_arch = \"wasm32\")".dev-dependencies.instant]
+version = "0.1"
+features = ["wasm-bindgen"]
 
-[dev-dependencies]
-rand = "0.8"
-wyhash = "0.5"
-getrandom = "0.2"
+[target."cfg(target_arch = \"wasm32\")".dev-dependencies.wasm-bindgen-test]
+version = "0.3"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/syn/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/syn/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,11 +1,20 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
+rust-version = "1.31"
 name = "syn"
-version = "1.0.99" # don't forget to update html_root_url and syn.json
+version = "1.0.99"
 authors = ["David Tolnay <dtolnay@gmail.com>"]
-categories = ["development-tools::procedural-macro-helpers", "parser-implementations"]
-description = "Parser for Rust source code"
-documentation = "https://docs.rs/syn"
-edition = "2018"
 include = [
     "/benches/**",
     "/build.rs",
@@ -16,74 +25,120 @@
     "/src/**",
     "/tests/**",
 ]
-keywords = ["macros", "syn"]
-license = "MIT OR Apache-2.0"
+description = "Parser for Rust source code"
+documentation = "https://docs.rs/syn"
 readme = "README.md"
+keywords = [
+    "macros",
+    "syn",
+]
+categories = [
+    "development-tools::procedural-macro-helpers",
+    "parser-implementations",
+]
+license = "MIT OR Apache-2.0"
 repository = "https://github.com/dtolnay/syn"
-rust-version = "1.31"
 
-[features]
-default = ["derive", "parsing", "printing", "clone-impls", "proc-macro"]
-derive = []
-full = []
-parsing = []
-printing = ["quote"]
-visit = []
-visit-mut = []
-fold = []
-clone-impls = []
-extra-traits = []
-proc-macro = ["proc-macro2/proc-macro", "quote/proc-macro"]
-test = ["syn-test-suite/all-features"]
+[package.metadata.docs.rs]
+all-features = true
+targets = ["x86_64-unknown-linux-gnu"]
+rustdoc-args = [
+    "--cfg",
+    "doc_cfg",
+]
 
-[dependencies]
-proc-macro2 = { version = "1.0.39", default-features = false }
-quote = { version = "1.0", optional = true, default-features = false }
-unicode-ident = "1.0"
-
-[dev-dependencies]
-anyhow = "1.0"
-automod = "1.0"
-flate2 = "1.0"
-insta = "1.0"
-rayon = "1.0"
-ref-cast = "1.0"
-regex = "1.0"
-reqwest = { version = "0.11", features = ["blocking"] }
-syn-test-suite = { version = "0", path = "tests/features" }
-tar = "0.4.16"
-termcolor = "1.0"
-walkdir = "2.1"
+[package.metadata.playground]
+features = [
+    "full",
+    "visit",
+    "visit-mut",
+    "fold",
+    "extra-traits",
+]
 
 [[bench]]
 name = "rust"
 harness = false
-required-features = ["full", "parsing"]
+required-features = [
+    "full",
+    "parsing",
+]
 
 [[bench]]
 name = "file"
-required-features = ["full", "parsing"]
+required-features = [
+    "full",
+    "parsing",
+]
 
-[package.metadata.docs.rs]
-all-features = true
-targets = ["x86_64-unknown-linux-gnu"]
-rustdoc-args = ["--cfg", "doc_cfg"]
+[dependencies.proc-macro2]
+version = "1.0.39"
+default-features = false
 
-[package.metadata.playground]
-features = ["full", "visit", "visit-mut", "fold", "extra-traits"]
+[dependencies.quote]
+version = "1.0"
+optional = true
+default-features = false
+
+[dependencies.unicode-ident]
+version = "1.0"
+
+[dev-dependencies.anyhow]
+version = "1.0"
+
+[dev-dependencies.automod]
+version = "1.0"
+
+[dev-dependencies.flate2]
+version = "1.0"
+
+[dev-dependencies.insta]
+version = "1.0"
+
+[dev-dependencies.rayon]
+version = "1.0"
+
+[dev-dependencies.ref-cast]
+version = "1.0"
+
+[dev-dependencies.regex]
+version = "1.0"
+
+[dev-dependencies.reqwest]
+version = "0.11"
+features = ["blocking"]
+
+[dev-dependencies.syn-test-suite]
+version = "0"
 
-[workspace]
-members = [
-    "dev",
-    "examples/dump-syntax",
-    "examples/heapsize/example",
-    "examples/heapsize/heapsize",
-    "examples/heapsize/heapsize_derive",
-    "examples/lazy-static/example",
-    "examples/lazy-static/lazy-static",
-    "examples/trace-var/example",
-    "examples/trace-var/trace-var",
-    "json",
-    "tests/crates",
-    "tests/features",
+[dev-dependencies.tar]
+version = "0.4.16"
+
+[dev-dependencies.termcolor]
+version = "1.0"
+
+[dev-dependencies.walkdir]
+version = "2.1"
+
+[features]
+clone-impls = []
+default = [
+    "derive",
+    "parsing",
+    "printing",
+    "clone-impls",
+    "proc-macro",
 ]
+derive = []
+extra-traits = []
+fold = []
+full = []
+parsing = []
+printing = ["quote"]
+proc-macro = [
+    "proc-macro2/proc-macro",
+    "quote/proc-macro",
+]
+test = ["syn-test-suite/all-features"]
+visit = []
+visit-mut = []
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/indexmap/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/indexmap/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,79 +1,81 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
-name = "indexmap"
 edition = "2018"
+name = "indexmap"
 version = "1.8.1"
-authors = [
-"bluss",
-"Josh Stone <cuviper@gmail.com>"
-]
+authors = ["bluss", "Josh Stone <cuviper@gmail.com>"]
+build = "build.rs"
+description = "A hash table with consistent order and fast iteration.\n\nThe indexmap is a hash table where the iteration order of the key-value\npairs is independent of the hash values of the keys. It has the usual\nhash table functionality, it preserves insertion order except after\nremovals, and it allows lookup of its elements by either hash table key\nor numerical index. A corresponding hash set type is also provided.\n\nThis crate was initially published under the name ordermap, but it was renamed to\nindexmap.\n"
 documentation = "https://docs.rs/indexmap/"
-repository = "https://github.com/bluss/indexmap"
-license = "Apache-2.0/MIT"
-description = """
-A hash table with consistent order and fast iteration.
-
-The indexmap is a hash table where the iteration order of the key-value
-pairs is independent of the hash values of the keys. It has the usual
-hash table functionality, it preserves insertion order except after
-removals, and it allows lookup of its elements by either hash table key
-or numerical index. A corresponding hash set type is also provided.
-
-This crate was initially published under the name ordermap, but it was renamed to
-indexmap.
-"""
-
 keywords = ["hashmap", "no_std"]
 categories = ["data-structures", "no-std"]
+license = "Apache-2.0/MIT"
+repository = "https://github.com/bluss/indexmap"
+[package.metadata.docs.rs]
+features = ["serde-1", "rayon"]
 
-build = "build.rs"
+[package.metadata.release]
+no-dev-version = true
+tag-name = "{{version}}"
+[profile.bench]
+debug = true
 
 [lib]
 bench = false
-
-[build-dependencies]
-autocfg = "1"
-[dependencies]
-serde = { version = "1.0", optional = true, default-features = false }
-rayon = { version = "1.4.1", optional = true }
-
-# Internal feature, only used when building as part of rustc,
-# not part of the stable interface of this crate.
-rustc-rayon = { version = "0.3", optional = true }
-
 [dependencies.hashbrown]
 version = "0.11"
-default-features = false
 features = ["raw"]
+default-features = false
 
-[dev-dependencies]
-itertools = "0.10"
-rand = {version = "0.8", features = ["small_rng"] }
-quickcheck = { version = "1.0", default-features = false }
-fnv = "1.0"
-lazy_static = "1.3"
-fxhash = "0.2.1"
-serde_derive = "1.0"
+[dependencies.rayon]
+version = "1.4.1"
+optional = true
+
+[dependencies.rustc-rayon]
+version = "0.3"
+optional = true
+
+[dependencies.serde]
+version = "1.0"
+optional = true
+default-features = false
+[dev-dependencies.fnv]
+version = "1.0"
 
-[features]
-# Serialization with serde 1.0
-serde-1 = ["serde"]
+[dev-dependencies.fxhash]
+version = "0.2.1"
 
-# Force the use of `std`, bypassing target detection.
-std = []
+[dev-dependencies.itertools]
+version = "0.10"
 
-# for testing only, of course
-test_low_transition_point = []
-test_debug = []
+[dev-dependencies.lazy_static]
+version = "1.3"
 
-[profile.bench]
-debug = true
-
-[package.metadata.release]
-no-dev-version = true
-tag-name = "{{version}}"
+[dev-dependencies.quickcheck]
+version = "1.0"
+default-features = false
 
-[package.metadata.docs.rs]
-features = ["serde-1", "rayon"]
+[dev-dependencies.rand]
+version = "0.8"
+features = ["small_rng"]
+
+[dev-dependencies.serde_derive]
+version = "1.0"
+[build-dependencies.autocfg]
+version = "1"
 
-[workspace]
-members = ["test-nostd", "test-serde"]
+[features]
+serde-1 = ["serde"]
+std = []
+test_debug = []
+test_low_transition_point = []
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/proc_macro_error/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/proc_macro_error/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -38,10 +38,10 @@
 optional = true
 default-features = false
 [dev-dependencies.serde_derive]
-version = "=1.0.107"
+version = "1.0.107"
 
 [dev-dependencies.toml]
-version = "=0.5.2"
+version = "0.5.2"
 
 [dev-dependencies.trybuild]
 version = "1.0.19"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/camino/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/camino/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,33 +1,58 @@
-[workspace]
-members = [".", "camino-examples"]
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
 
 [package]
+edition = "2018"
 name = "camino"
-description = "UTF-8 paths"
 version = "1.0.9"
-license = "MIT OR Apache-2.0"
-readme = "README.md"
-keywords = ["paths", "utf8", "unicode", "filesystem"]
-categories = ["development-tools", "filesystem", "os"]
-repository = "https://github.com/camino-rs/camino"
-documentation = "https://docs.rs/camino"
 authors = [
     "Without Boats <saoirse@without.boats>",
     "Ashley Williams <ashley666ashley@gmail.com>",
     "Steve Klabnik <steve@steveklabnik.com>",
     "Rain <rain@sunshowers.io>",
 ]
-edition = "2018"
-exclude = [".cargo/**/*", ".github/**/*"]
+exclude = [
+    ".cargo/**/*",
+    ".github/**/*",
+]
+description = "UTF-8 paths"
+documentation = "https://docs.rs/camino"
+readme = "README.md"
+keywords = [
+    "paths",
+    "utf8",
+    "unicode",
+    "filesystem",
+]
+categories = [
+    "development-tools",
+    "filesystem",
+    "os",
+]
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/camino-rs/camino"
 
 [package.metadata.docs.rs]
 all-features = true
 rustdoc-args = ["--cfg=doc_cfg"]
 
-[dependencies]
-proptest = { version = "1.0.0", optional = true }
-serde = { version = "1", features = ["derive"], optional = true }
+[dependencies.proptest]
+version = "1.0.0"
+optional = true
+
+[dependencies.serde]
+version = "1"
+features = ["derive"]
+optional = true
 
 [features]
-serde1 = ["serde"]
 proptest1 = ["proptest"]
+serde1 = ["serde"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/pathdiff/v0_2/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/pathdiff/v0_2/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,16 +1,26 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
-name = "pathdiff"
 edition = "2018"
+name = "pathdiff"
 version = "0.2.1"
 authors = ["Manish Goregaokar <manishsmail@gmail.com>"]
 description = "Library for diffing paths to obtain relative paths"
 documentation = "https://docs.rs/pathdiff/"
-repository = "https://github.com/Manishearth/pathdiff"
 keywords = ["path", "relative"]
 license = "MIT/Apache-2.0"
-
+repository = "https://github.com/Manishearth/pathdiff"
 [package.metadata.docs.rs]
 all-features = true
-
-[dependencies]
-camino = { version = "1.0.5", optional = true }
+[dependencies.camino]
+version = "1.0.5"
+optional = true
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/remove_dir_all/v0_5/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/remove_dir_all/v0_5/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,23 +1,28 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
+name = "remove_dir_all"
+version = "0.5.3"
 authors = ["Aaronepower <theaaronepower@gmail.com>"]
+include = ["Cargo.toml", "LICENCE-APACHE", "LICENCE-MIT", "src/**/*", "README.md"]
 description = "A safe, reliable implementation of remove_dir_all for Windows"
-include = [
-    "Cargo.toml",
-    "LICENCE-APACHE",
-    "LICENCE-MIT",
-    "src/**/*",
-    "README.md"
-]
-license = "MIT/Apache-2.0"
-name = "remove_dir_all"
 readme = "README.md"
-repository = "https://github.com/XAMPPRocky/remove_dir_all.git"
-version = "0.5.3"
 keywords = ["utility", "filesystem", "remove_dir", "windows"]
 categories = ["filesystem"]
-
-[target.'cfg(windows)'.dependencies]
-winapi = { version = "0.3", features = ["std", "errhandlingapi", "winerror", "fileapi", "winbase"]}
-
-[dev-dependencies]
-doc-comment = "0.3"
+license = "MIT/Apache-2.0"
+repository = "https://github.com/XAMPPRocky/remove_dir_all.git"
+[dev-dependencies.doc-comment]
+version = "0.3"
+[target."cfg(windows)".dependencies.winapi]
+version = "0.3"
+features = ["std", "errhandlingapi", "winerror", "fileapi", "winbase"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/clap_lex/v0_1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/clap_lex/v0_1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,39 +1,84 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
 name = "clap_lex"
 version = "0.1.1"
-edition = "2018"
 include = [
-	"src/**/*",
-	"Cargo.toml",
-	"LICENSE-*",
-	"README.md"
+    "src/**/*",
+    "Cargo.toml",
+    "LICENSE-*",
+    "README.md",
 ]
 description = "Minimal, flexible command line parser"
-repository = "https://github.com/clap-rs/clap/tree/master/clap_lex"
 documentation = "https://docs.rs/clap_lex"
+readme = "README.md"
 keywords = [
-	"argument",
-	"cli",
-	"arg",
-	"parser",
-	"parse"
+    "argument",
+    "cli",
+    "arg",
+    "parser",
+    "parse",
 ]
 categories = ["command-line-interface"]
 license = "MIT OR Apache-2.0"
-readme = "README.md"
+repository = "https://github.com/clap-rs/clap/tree/master/clap_lex"
 
-[package.metadata.release]
-pre-release-replacements = [
-  {file="CHANGELOG.md", search="Unreleased", replace="{{version}}", min=1},
-  {file="CHANGELOG.md", search="\\.\\.\\.HEAD", replace="...{{tag_name}}", exactly=1},
-  {file="CHANGELOG.md", search="ReleaseDate", replace="{{date}}", min=1},
-  {file="CHANGELOG.md", search="<!-- next-header -->", replace="<!-- next-header -->\n## [Unreleased] - ReleaseDate\n", exactly=1},
-  {file="CHANGELOG.md", search="<!-- next-url -->", replace="<!-- next-url -->\n[Unreleased]: https://github.com/clap-rs/clap/compare/{{tag_name}}...HEAD", exactly=1},
-  {file="README.md", search="github.com/clap-rs/clap/blob/[^/]+/", replace="github.com/clap-rs/clap/blob/{{tag_name}}/", exactly=4, prerelease = true},
-]
+[[package.metadata.release.pre-release-replacements]]
+file = "CHANGELOG.md"
+search = "Unreleased"
+replace = "{{version}}"
+min = 1
+
+[[package.metadata.release.pre-release-replacements]]
+file = "CHANGELOG.md"
+search = '\.\.\.HEAD'
+replace = "...{{tag_name}}"
+exactly = 1
+
+[[package.metadata.release.pre-release-replacements]]
+file = "CHANGELOG.md"
+search = "ReleaseDate"
+replace = "{{date}}"
+min = 1
+
+[[package.metadata.release.pre-release-replacements]]
+file = "CHANGELOG.md"
+search = "<!-- next-header -->"
+replace = """
+<!-- next-header -->
+## [Unreleased] - ReleaseDate
+"""
+exactly = 1
+
+[[package.metadata.release.pre-release-replacements]]
+file = "CHANGELOG.md"
+search = "<!-- next-url -->"
+replace = """
+<!-- next-url -->
+[Unreleased]: https://github.com/clap-rs/clap/compare/{{tag_name}}...HEAD"""
+exactly = 1
+
+[[package.metadata.release.pre-release-replacements]]
+file = "README.md"
+search = "github.com/clap-rs/clap/blob/[^/]+/"
+replace = "github.com/clap-rs/clap/blob/{{tag_name}}/"
+exactly = 4
+prerelease = true
 
 [lib]
 bench = false
 
-[dependencies]
-os_str_bytes = { version = "6.0", default-features = false, features = ["raw_os_str"] }
+[dependencies.os_str_bytes]
+version = "6.0"
+features = ["raw_os_str"]
+default-features = false
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/toml/v0_5/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/toml/v0_5/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,36 +1,49 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
 name = "toml"
 version = "0.5.9"
 authors = ["Alex Crichton <alex@alexcrichton.com>"]
-license = "MIT/Apache-2.0"
-readme = "README.md"
-keywords = ["encoding"]
-repository = "https://github.com/alexcrichton/toml-rs"
-homepage = "https://github.com/alexcrichton/toml-rs"
-documentation = "https://docs.rs/toml"
 description = """
 A native Rust encoder and decoder of TOML-formatted files and streams. Provides
 implementations of the standard Serialize/Deserialize traits for TOML data to
 facilitate deserializing and serializing Rust structures.
 """
-categories = ["config", "encoding", "parser-implementations"]
-edition = "2018"
+homepage = "https://github.com/alexcrichton/toml-rs"
+documentation = "https://docs.rs/toml"
+readme = "README.md"
+keywords = ["encoding"]
+categories = [
+    "config",
+    "encoding",
+    "parser-implementations",
+]
+license = "MIT/Apache-2.0"
+repository = "https://github.com/alexcrichton/toml-rs"
+
+[dependencies.indexmap]
+version = "1.0"
+optional = true
 
-[workspace]
-members = ['test-suite']
+[dependencies.serde]
+version = "1.0.97"
 
-[dependencies]
-serde = "1.0.97"
-indexmap = { version = "1.0", optional = true }
-
-[dev-dependencies]
-serde_derive = "1.0"
-serde_json = "1.0"
+[dev-dependencies.serde_derive]
+version = "1.0"
+
+[dev-dependencies.serde_json]
+version = "1.0"
 
 [features]
 default = []
-
-# Use indexmap rather than BTreeMap as the map type of toml::Value.
-# This allows data to be read into a Value and written back to a TOML string
-# while preserving the order of map keys in the input.
 preserve_order = ["indexmap"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/object/v0_27/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/object/v0_27/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,94 +1,76 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
+edition = "2018"
 name = "object"
 version = "0.27.1"
-edition = "2018"
 exclude = ["/.github", "/testfiles"]
+description = "A unified interface for reading and writing object file formats."
 keywords = ["object", "elf", "mach-o", "pe", "coff"]
 license = "Apache-2.0/MIT"
 repository = "https://github.com/gimli-rs/object"
-description = "A unified interface for reading and writing object file formats."
-
 [package.metadata.docs.rs]
-features = ['doc']
-
-[dependencies]
-crc32fast = { version = "1.2", optional = true }
-flate2 = { version = "1", optional = true }
-indexmap = { version = "1.1", optional = true }
-wasmparser = { version = "0.57", optional = true }
-memchr = { version = "2.4.1", default-features = false }
-
-# Internal feature, only used when building as part of libstd, not part of the
-# stable interface of this crate.
-core = { version = '1.0.0', optional = true, package = 'rustc-std-workspace-core' }
-compiler_builtins = { version = '0.1.2', optional = true }
-alloc = { version = '1.0.0', optional = true, package = 'rustc-std-workspace-alloc' }
+features = ["doc"]
+[dependencies.alloc]
+version = "1.0.0"
+optional = true
+package = "rustc-std-workspace-alloc"
+
+[dependencies.compiler_builtins]
+version = "0.1.2"
+optional = true
+
+[dependencies.core]
+version = "1.0.0"
+optional = true
+package = "rustc-std-workspace-core"
+
+[dependencies.crc32fast]
+version = "1.2"
+optional = true
+
+[dependencies.flate2]
+version = "1"
+optional = true
+
+[dependencies.indexmap]
+version = "1.1"
+optional = true
+
+[dependencies.memchr]
+version = "2.4.1"
+default-features = false
+
+[dependencies.wasmparser]
+version = "0.57"
+optional = true
 
 [features]
-#=======================================
-# Read/write features.
-
-# Core read support. You will need to enable some file formats too.
-read_core = []
-# Read support for all file formats (including unaligned files).
-read = ["read_core", "archive", "coff", "elf", "macho", "pe", "unaligned"]
-# Core write support. You will need to enable some file formats too.
-write_core = ["crc32fast", "indexmap/std", "std"]
-# Write support for all file formats.
-write = ["write_core", "coff", "elf", "macho", "pe"]
-
-#=======================================
-# Misc features.
-
-# Enable things that require libstd.
-# Currently, this provides an `Error` implementation.
-std = ["memchr/std"]
-# Enable decompression of compressed sections.
-# This feature is not required if you want to do your own decompression.
-compression = ["flate2", "std"]
-# Treat all types as unaligned.
-# Normally types use the alignment required by the specifications, but
-# sometimes files do not strictly follow the specifications.
-# This may be useful to enable when processing files for architectures
-# that have no alignment constraints.
-unaligned = []
-
-#=======================================
-# File format features.
+all = ["read", "write", "std", "compression", "wasm"]
 archive = []
+cargo-all = []
 coff = []
+compression = ["flate2", "std"]
+default = ["read", "compression"]
+doc = ["read_core", "write_core", "std", "compression", "archive", "coff", "elf", "macho", "pe", "wasm"]
 elf = []
 macho = []
 pe = ["coff"]
+read = ["read_core", "archive", "coff", "elf", "macho", "pe", "unaligned"]
+read_core = []
+rustc-dep-of-std = ["core", "compiler_builtins", "alloc", "memchr/rustc-dep-of-std"]
+std = ["memchr/std"]
+unaligned = []
 wasm = ["wasmparser"]
-
-#=======================================
-# By default, support all read features.
-default = ["read", "compression"]
-
-#=======================================
-# Umbrella feature for enabling all user-facing features of this crate. Does not
-# enable internal features like `rustc-dep-of-std`.
-all = ["read", "write", "std", "compression", "wasm"]
-
-# Use of --all-features is not supported.
-# This is a dummy feature to detect when --all-features is used.
-cargo-all = []
-
-#=======================================
-# Documentation should be generated with everything in "all" except for "unaligned".
-doc = [
-  "read_core", "write_core",
-  "std", "compression",
-  "archive", "coff", "elf", "macho", "pe", "wasm",
-]
-
-#=======================================
-# Internal feature, only used when building as part of libstd, not part of the
-# stable interface of this crate.
-rustc-dep-of-std = ['core', 'compiler_builtins', 'alloc', 'memchr/rustc-dep-of-std']
-
-[workspace]
-members = ["crates/examples"]
-default-members = [".", "crates/examples"]
-#resolver = "2"
+write = ["write_core", "coff", "elf", "macho", "pe"]
+write_core = ["crc32fast", "indexmap/std", "std"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/cexpr/v0_6/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/cexpr/v0_6/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,19 +1,29 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
 name = "cexpr"
 version = "0.6.0"
-edition = "2018"
 authors = ["Jethro Beekman <jethro@jbeekman.nl>"]
-license = "Apache-2.0/MIT"
 description = "A C expression parser and evaluator"
 documentation = "https://docs.rs/cexpr/"
+keywords = ["C", "expression", "parser"]
+license = "Apache-2.0/MIT"
 repository = "https://github.com/jethrogb/rust-cexpr"
-keywords = ["C","expression","parser"]
-
-[badges]
-travis-ci = { repository = "jethrogb/rust-cexpr" }
-
-[dependencies]
-nom = { version = "7", default-features = false, features = ["std"] }
-
-[dev-dependencies]
-clang-sys = ">= 0.13.0, < 0.29.0"
+[dependencies.nom]
+version = "7"
+features = ["std"]
+default-features = false
+[dev-dependencies.clang-sys]
+version = ">= 0.13.0, < 0.29.0"
+[badges.travis-ci]
+repository = "jethrogb/rust-cexpr"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/miniz_oxide/v0_4/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/miniz_oxide/v0_4/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,37 +1,53 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
+edition = "2018"
 name = "miniz_oxide"
-authors = ["Frommi <daniil.liferenko@gmail.com>", "oyvindln <oyvindln@users.noreply.github.com>"]
 version = "0.4.4"
-license = "MIT OR Zlib OR Apache-2.0"
+authors = ["Frommi <daniil.liferenko@gmail.com>", "oyvindln <oyvindln@users.noreply.github.com>"]
+build = "build.rs"
+exclude = ["benches/*", "tests/*"]
+description = "DEFLATE compression and decompression library rewritten in Rust based on miniz"
+homepage = "https://github.com/Frommi/miniz_oxide/tree/master/miniz_oxide"
+documentation = "https://docs.rs/miniz_oxide"
 readme = "Readme.md"
 keywords = ["zlib", "miniz", "deflate", "encoding"]
 categories = ["compression"]
+license = "MIT OR Zlib OR Apache-2.0"
 repository = "https://github.com/Frommi/miniz_oxide/tree/master/miniz_oxide"
-homepage = "https://github.com/Frommi/miniz_oxide/tree/master/miniz_oxide"
-documentation = "https://docs.rs/miniz_oxide"
-description = "DEFLATE compression and decompression library rewritten in Rust based on miniz"
-edition = "2018"
-exclude = ["benches/*", "tests/*"]
-build = "build.rs"
 
 [lib]
 name = "miniz_oxide"
+[dependencies.adler]
+version = "1.0"
+default-features = false
 
-[build-dependencies]
-autocfg = "1.0"
+[dependencies.alloc]
+version = "1.0.0"
+optional = true
+package = "rustc-std-workspace-alloc"
 
-[dependencies]
-adler = { version = "1.0", default-features = false }
+[dependencies.compiler_builtins]
+version = "0.1.2"
+optional = true
 
-# Internal feature, only used when building as part of libstd, not part of the
-# stable interface of this crate.
-core = { version = '1.0.0', optional = true, package = 'rustc-std-workspace-core' }
-alloc = { version = '1.0.0', optional = true, package = 'rustc-std-workspace-alloc' }
-compiler_builtins = { version = '0.1.2', optional = true }
+[dependencies.core]
+version = "1.0.0"
+optional = true
+package = "rustc-std-workspace-core"
+[build-dependencies.autocfg]
+version = "1.0"
 
 [features]
-# Internal feature, only used when building as part of libstd, not part of the
-# stable interface of this crate.
-rustc-dep-of-std = ['core', 'alloc', 'compiler_builtins', 'adler/rustc-dep-of-std']
-# This feature has no effect (See Frommi/miniz_oxide#95)
 no_extern_crate_alloc = []
+rustc-dep-of-std = ["core", "alloc", "compiler_builtins", "adler/rustc-dep-of-std"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/regex/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/regex/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,194 +1,149 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
 name = "regex"
-version = "1.6.0"  #:version
+version = "1.6.0"
 authors = ["The Rust Project Developers"]
-license = "MIT OR Apache-2.0"
-readme = "README.md"
-repository = "https://github.com/rust-lang/regex"
-documentation = "https://docs.rs/regex"
-homepage = "https://github.com/rust-lang/regex"
+exclude = [
+    "/scripts/*",
+    "/.github/*",
+]
+autotests = false
 description = """
 An implementation of regular expressions for Rust. This implementation uses
 finite automata and guarantees linear time matching on all inputs.
 """
+homepage = "https://github.com/rust-lang/regex"
+documentation = "https://docs.rs/regex"
+readme = "README.md"
 categories = ["text-processing"]
-autotests = false
-exclude = ["/scripts/*", "/.github/*"]
-edition = "2018"
-
-[workspace]
-members = [
-  "bench", "regex-capi", "regex-debug", "regex-syntax",
-]
-
-[lib]
-# There are no benchmarks in the library code itself
-bench = false
-# Doc tests fail when some features aren't present. The easiest way to work
-# around this is to disable automatic doc testing, but explicitly test them
-# with `cargo test --doc`.
-doctest = false
-
-# Features are documented in the "Crate features" section of the crate docs:
-# https://docs.rs/regex/*/#crate-features
-[features]
-default = ["std", "perf", "unicode", "regex-syntax/default"]
-
-# ECOSYSTEM FEATURES
-
-# The 'std' feature permits the regex crate to use the standard library. This
-# is intended to support future use cases where the regex crate may be able
-# to compile without std, and instead just rely on 'core' and 'alloc' (for
-# example). Currently, this isn't supported, and removing the 'std' feature
-# will prevent regex from compiling.
-std = []
-# The 'use_std' feature is DEPRECATED. It will be removed in regex 2. Until
-# then, it is an alias for the 'std' feature.
-use_std = ["std"]
-
-
-# PERFORMANCE FEATURES
-
-# Enables all performance features.
-perf = ["perf-cache", "perf-dfa", "perf-inline", "perf-literal"]
-# Enables fast caching. (If disabled, caching is still used, but is slower.)
-# Currently, this feature has no effect. It used to remove the thread_local
-# dependency and use a slower internal cache, but now the default cache has
-# been improved and thread_local is no longer a dependency at all.
-perf-cache = []
-# Enables use of a lazy DFA when possible.
-perf-dfa = []
-# Enables aggressive use of inlining.
-perf-inline = []
-# Enables literal optimizations.
-perf-literal = ["aho-corasick", "memchr"]
-
-
-# UNICODE DATA FEATURES
-
-# Enables all Unicode features. This expands if new Unicode features are added.
-unicode = [
-  "unicode-age",
-  "unicode-bool",
-  "unicode-case",
-  "unicode-gencat",
-  "unicode-perl",
-  "unicode-script",
-  "unicode-segment",
-  "regex-syntax/unicode",
-]
-# Enables use of the `Age` property, e.g., `\p{Age:3.0}`.
-unicode-age = ["regex-syntax/unicode-age"]
-# Enables use of a smattering of boolean properties, e.g., `\p{Emoji}`.
-unicode-bool = ["regex-syntax/unicode-bool"]
-# Enables Unicode-aware case insensitive matching, e.g., `(?i)β`.
-unicode-case = ["regex-syntax/unicode-case"]
-# Enables Unicode general categories, e.g., `\p{Letter}` or `\pL`.
-unicode-gencat = ["regex-syntax/unicode-gencat"]
-# Enables Unicode-aware Perl classes corresponding to `\w`, `\s` and `\d`.
-unicode-perl = ["regex-syntax/unicode-perl"]
-# Enables Unicode scripts and script extensions, e.g., `\p{Greek}`.
-unicode-script = ["regex-syntax/unicode-script"]
-# Enables Unicode segmentation properties, e.g., `\p{gcb=Extend}`.
-unicode-segment = ["regex-syntax/unicode-segment"]
-
-
-# UNSTABLE FEATURES (requires Rust nightly)
-
-# A blanket feature that governs whether unstable features are enabled or not.
-# Unstable features are disabled by default, and typically rely on unstable
-# features in rustc itself.
-unstable = ["pattern"]
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/rust-lang/regex"
 
-# Enable to use the unstable pattern traits defined in std. This is enabled
-# by default if the unstable feature is enabled.
-pattern = []
+[profile.bench]
+debug = true
 
-# For very fast prefix literal matching.
-[dependencies.aho-corasick]
-version = "0.7.18"
-optional = true
+[profile.release]
+debug = true
 
-# For skipping along search text quickly when a leading byte is known.
-[dependencies.memchr]
-version = "2.4.0"
-optional = true
+[profile.test]
+debug = true
 
-# For parsing regular expressions.
-[dependencies.regex-syntax]
-path = "regex-syntax"
-version = "0.6.27"
-default-features = false
+[lib]
+doctest = false
+bench = false
 
-[dev-dependencies]
-# For examples.
-lazy_static = "1"
-# For property based tests.
-quickcheck = { version = "1.0.3", default-features = false }
-# For generating random test data.
-rand = { version = "0.8.3", default-features = false, features = ["getrandom", "small_rng"] }
-# To check README's example
-# TODO: Re-enable this once the MSRV is 1.43 or greater.
-# See: https://github.com/rust-lang/regex/issues/684
-# See: https://github.com/rust-lang/regex/issues/685
-# doc-comment = "0.3"
-
-# Run the test suite on the default behavior of Regex::new.
-# This includes a mish mash of NFAs and DFAs, which are chosen automatically
-# based on the regex. We test both of the NFA implementations by forcing their
-# usage with the test definitions below. (We can't test the DFA implementations
-# in the same way since they can't be used for every regex tested.)
 [[test]]
-path = "tests/test_default.rs"
 name = "default"
+path = "tests/test_default.rs"
 
-# The same as the default tests, but run on bytes::Regex.
 [[test]]
-path = "tests/test_default_bytes.rs"
 name = "default-bytes"
+path = "tests/test_default_bytes.rs"
 
-# Run the test suite on the NFA algorithm over Unicode codepoints.
 [[test]]
-path = "tests/test_nfa.rs"
 name = "nfa"
+path = "tests/test_nfa.rs"
 
-# Run the test suite on the NFA algorithm over bytes that match UTF-8 only.
 [[test]]
-path = "tests/test_nfa_utf8bytes.rs"
 name = "nfa-utf8bytes"
+path = "tests/test_nfa_utf8bytes.rs"
 
-# Run the test suite on the NFA algorithm over arbitrary bytes.
 [[test]]
-path = "tests/test_nfa_bytes.rs"
 name = "nfa-bytes"
+path = "tests/test_nfa_bytes.rs"
 
-# Run the test suite on the backtracking engine over Unicode codepoints.
 [[test]]
-path = "tests/test_backtrack.rs"
 name = "backtrack"
+path = "tests/test_backtrack.rs"
 
-# Run the test suite on the backtracking engine over bytes that match UTF-8
-# only.
 [[test]]
-path = "tests/test_backtrack_utf8bytes.rs"
 name = "backtrack-utf8bytes"
+path = "tests/test_backtrack_utf8bytes.rs"
 
-# Run the test suite on the backtracking engine over arbitrary bytes.
 [[test]]
-path = "tests/test_backtrack_bytes.rs"
 name = "backtrack-bytes"
+path = "tests/test_backtrack_bytes.rs"
 
-# Run all backends against each regex found on crates.io and make sure
-# that they all do the same thing.
 [[test]]
-path = "tests/test_crates_regex.rs"
 name = "crates-regex"
+path = "tests/test_crates_regex.rs"
 
-[profile.release]
-debug = true
+[dependencies.aho-corasick]
+version = "0.7.18"
+optional = true
 
-[profile.bench]
-debug = true
+[dependencies.memchr]
+version = "2.4.0"
+optional = true
 
-[profile.test]
-debug = true
+[dependencies.regex-syntax]
+version = "0.6.27"
+default-features = false
+
+[dev-dependencies.lazy_static]
+version = "1"
+
+[dev-dependencies.quickcheck]
+version = "1.0.3"
+default-features = false
+
+[dev-dependencies.rand]
+version = "0.8.3"
+features = [
+    "getrandom",
+    "small_rng",
+]
+default-features = false
+
+[features]
+default = [
+    "std",
+    "perf",
+    "unicode",
+    "regex-syntax/default",
+]
+pattern = []
+perf = [
+    "perf-cache",
+    "perf-dfa",
+    "perf-inline",
+    "perf-literal",
+]
+perf-cache = []
+perf-dfa = []
+perf-inline = []
+perf-literal = [
+    "aho-corasick",
+    "memchr",
+]
+std = []
+unicode = [
+    "unicode-age",
+    "unicode-bool",
+    "unicode-case",
+    "unicode-gencat",
+    "unicode-perl",
+    "unicode-script",
+    "unicode-segment",
+    "regex-syntax/unicode",
+]
+unicode-age = ["regex-syntax/unicode-age"]
+unicode-bool = ["regex-syntax/unicode-bool"]
+unicode-case = ["regex-syntax/unicode-case"]
+unicode-gencat = ["regex-syntax/unicode-gencat"]
+unicode-perl = ["regex-syntax/unicode-perl"]
+unicode-script = ["regex-syntax/unicode-script"]
+unicode-segment = ["regex-syntax/unicode-segment"]
+unstable = ["pattern"]
+use_std = ["std"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/unindent/v0_1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/unindent/v0_1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,14 +1,25 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
+edition = "2018"
 name = "unindent"
-version = "0.1.7" # remember to update html_root_url
+version = "0.1.7"
 authors = ["David Tolnay <dtolnay@gmail.com>"]
-license = "MIT OR Apache-2.0"
 description = "Remove a column of leading whitespace from a string"
-repository = "https://github.com/dtolnay/indoc"
 documentation = "https://docs.rs/unindent"
-keywords = ["heredoc", "nowdoc", "multiline", "string", "literal"]
 readme = "README.md"
-edition = "2018"
-
+keywords = ["heredoc", "nowdoc", "multiline", "string", "literal"]
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/dtolnay/indoc"
 [package.metadata.docs.rs]
 targets = ["x86_64-unknown-linux-gnu"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/backtrace/v0_3/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/backtrace/v0_3/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,103 +1,28 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
 name = "backtrace"
 version = "0.3.64"
 authors = ["The Rust Project Developers"]
 build = "build.rs"
-license = "MIT/Apache-2.0"
-readme = "README.md"
-repository = "https://github.com/rust-lang/backtrace-rs"
-homepage = "https://github.com/rust-lang/backtrace-rs"
-documentation = "https://docs.rs/backtrace"
-description = """
-A library to acquire a stack trace (backtrace) at runtime in a Rust program.
-"""
 autoexamples = true
 autotests = true
-edition = "2018"
-
-[workspace]
-members = ['crates/cpp_smoke_test', 'crates/as-if-std']
-exclude = [
-   'crates/without_debuginfo',
-   'crates/macos_frames_test',
-   'crates/line-tables-only',
-   'crates/debuglink',
-]
-
-[dependencies]
-cfg-if = "1.0"
-rustc-demangle = "0.1.4"
-libc = { version = "0.2.94", default-features = false }
-
-# Optionally enable the ability to serialize a `Backtrace`, controlled through
-# the `serialize-*` features below.
-serde = { version = "1.0", optional = true, features = ['derive'] }
-rustc-serialize = { version = "0.3", optional = true }
-
-# Optionally demangle C++ frames' symbols in backtraces.
-cpp_demangle = { default-features = false, version = "0.3.0", optional = true }
-
-
-# Optional dependencies enabled through the `gimli-symbolize` feature, do not
-# use these features directly.
-addr2line = { version = "0.17.0", default-features = false }
-miniz_oxide = { version = "0.4.0", default-features = false }
-[dependencies.object]
-version = "0.27.0"
-default-features = false
-features = ['read_core', 'elf', 'macho', 'pe', 'unaligned', 'archive']
-
-[target.'cfg(windows)'.dependencies]
-winapi = { version = "0.3.9", optional = true }
-
-[build-dependencies]
-# Only needed for Android, but cannot be target dependent
-# https://github.com/rust-lang/cargo/issues/4932
-cc = "1.0.67"
-
-[dev-dependencies]
-dylib-dep = { path = "crates/dylib-dep" }
-libloading = "0.7"
-
-[features]
-# By default libstd support and gimli-symbolize is used to symbolize addresses.
-default = ["std"]
-
-# Include std support. This enables types like `Backtrace`.
-std = []
-
-#=======================================
-# Methods of serialization
-#
-# Various features used for enabling rustc-serialize or syntex codegen.
-serialize-rustc = ["rustc-serialize"]
-serialize-serde = ["serde"]
-
-#=======================================
-# Deprecated/internal features
-#
-# Only here for backwards compatibility purposes or for internal testing
-# purposes. New code should use none of these features.
-coresymbolication = []
-dbghelp = []
-dladdr = []
-gimli-symbolize = []
-kernel32 = []
-libbacktrace = []
-libunwind = []
-unix-backtrace = []
-verify-winapi = [
-  'winapi/dbghelp',
-  'winapi/handleapi',
-  'winapi/libloaderapi',
-  'winapi/memoryapi',
-  'winapi/minwindef',
-  'winapi/processthreadsapi',
-  'winapi/synchapi',
-  'winapi/tlhelp32',
-  'winapi/winbase',
-  'winapi/winnt',
-]
+description = "A library to acquire a stack trace (backtrace) at runtime in a Rust program.\n"
+homepage = "https://github.com/rust-lang/backtrace-rs"
+documentation = "https://docs.rs/backtrace"
+readme = "README.md"
+license = "MIT/Apache-2.0"
+repository = "https://github.com/rust-lang/backtrace-rs"
 
 [[example]]
 name = "backtrace"
@@ -118,14 +43,74 @@
 [[test]]
 name = "smoke"
 required-features = ["std"]
-edition = '2018'
+edition = "2018"
 
 [[test]]
 name = "accuracy"
 required-features = ["std"]
-edition = '2018'
+edition = "2018"
 
 [[test]]
 name = "concurrent-panics"
-required-features = ["std"]
 harness = false
+required-features = ["std"]
+[dependencies.addr2line]
+version = "0.17.0"
+default-features = false
+
+[dependencies.cfg-if]
+version = "1.0"
+
+[dependencies.cpp_demangle]
+version = "0.3.0"
+optional = true
+default-features = false
+
+[dependencies.libc]
+version = "0.2.94"
+default-features = false
+
+[dependencies.miniz_oxide]
+version = "0.4.0"
+default-features = false
+
+[dependencies.object]
+version = "0.27.0"
+features = ["read_core", "elf", "macho", "pe", "unaligned", "archive"]
+default-features = false
+
+[dependencies.rustc-demangle]
+version = "0.1.4"
+
+[dependencies.rustc-serialize]
+version = "0.3"
+optional = true
+
+[dependencies.serde]
+version = "1.0"
+features = ["derive"]
+optional = true
+[dev-dependencies.libloading]
+version = "0.7"
+
+# Disabled for Chromium
+#[build-dependencies.cc]
+#version = "1.0.67"
+
+[features]
+coresymbolication = []
+dbghelp = []
+default = ["std"]
+dladdr = []
+gimli-symbolize = []
+kernel32 = []
+libbacktrace = []
+libunwind = []
+serialize-rustc = ["rustc-serialize"]
+serialize-serde = ["serde"]
+std = []
+unix-backtrace = []
+verify-winapi = ["winapi/dbghelp", "winapi/handleapi", "winapi/libloaderapi", "winapi/memoryapi", "winapi/minwindef", "winapi/processthreadsapi", "winapi/synchapi", "winapi/tlhelp32", "winapi/winbase", "winapi/winnt"]
+[target."cfg(windows)".dependencies.winapi]
+version = "0.3.9"
+optional = true
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/cxxbridge_macro/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/cxxbridge_macro/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,39 +1,78 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
+rust-version = "1.48"
 name = "cxxbridge-macro"
 version = "1.0.68"
 authors = ["David Tolnay <dtolnay@gmail.com>"]
-edition = "2018"
-rust-version = "1.48"
-license = "MIT OR Apache-2.0"
+exclude = [
+    "build.rs",
+    "README.md",
+]
 description = "Implementation detail of the `cxx` crate."
-repository = "https://github.com/dtolnay/cxx"
 homepage = "https://cxx.rs"
-exclude = ["build.rs", "README.md"]
+readme = "README.md"
 keywords = ["ffi"]
 categories = ["development-tools::ffi"]
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/dtolnay/cxx"
+
+[package.metadata.docs.rs]
+targets = ["x86_64-unknown-linux-gnu"]
 
 [lib]
 proc-macro = true
 
-[features]
-# incomplete features that are not covered by a compatibility guarantee:
-experimental-async-fn = []
-experimental-enum-variants-from-header = ["clang-ast", "flate2", "memmap", "serde", "serde_json"]
-
-[dependencies]
-proc-macro2 = "1.0"
-quote = "1.0.4"
-syn = { version = "1.0.70", features = ["full"] }
-
-# optional dependencies:
-clang-ast = { version = "0.1", optional = true }
-flate2 = { version = "1.0", optional = true }
-memmap = { version = "0.7", optional = true }
-serde = { version = "1.0", optional = true, features = ["derive"] }
-serde_json = { version = "1.0", optional = true }
+[dependencies.clang-ast]
+version = "0.1"
+optional = true
+
+[dependencies.flate2]
+version = "1.0"
+optional = true
+
+[dependencies.memmap]
+version = "0.7"
+optional = true
+
+[dependencies.proc-macro2]
+version = "1.0"
+
+[dependencies.quote]
+version = "1.0.4"
+
+[dependencies.serde]
+version = "1.0"
+features = ["derive"]
+optional = true
+
+[dependencies.serde_json]
+version = "1.0"
+optional = true
+
+[dependencies.syn]
+version = "1.0.70"
+features = ["full"]
 
-[dev-dependencies]
-cxx = { version = "1.0", path = ".." }
+[dev-dependencies.cxx]
+version = "1.0"
 
-[package.metadata.docs.rs]
-targets = ["x86_64-unknown-linux-gnu"]
+[features]
+experimental-async-fn = []
+experimental-enum-variants-from-header = [
+    "clang-ast",
+    "flate2",
+    "memmap",
+    "serde",
+    "serde_json",
+]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/minimal_lexical/v0_2/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/minimal_lexical/v0_2/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,37 +1,33 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
+name = "minimal-lexical"
+version = "0.2.1"
 authors = ["Alex Huszagh <ahuszagh@gmail.com>"]
+exclude = ["assets/*", "ci/*", "docs/*", "etc/*", "fuzz/*", "examples/*", "scripts/*"]
 autoexamples = false
-categories = ["parsing", "no-std"]
 description = "Fast float parsing conversion routines."
 documentation = "https://docs.rs/minimal-lexical"
-edition = "2018"
+readme = "README.md"
 keywords = ["parsing", "no_std"]
+categories = ["parsing", "no-std"]
 license = "MIT/Apache-2.0"
-name = "minimal-lexical"
-readme = "README.md"
 repository = "https://github.com/Alexhuszagh/minimal-lexical"
-version = "0.2.1"
-exclude = [
-    "assets/*",
-    "ci/*",
-    "docs/*",
-    "etc/*",
-    "fuzz/*",
-    "examples/*",
-    "scripts/*"
-]
 
 [features]
-default = ["std"]
-# Use the standard library.
-std = []
-# Reduce code size at the cost of performance.
-compact = []
-# Use the system allocator.
 alloc = []
-# Add support for nightly-only features.
-nightly = []
-
-# Internal only features.
-# Enable the lint checks.
+compact = []
+default = ["std"]
 lint = []
+nightly = []
+std = []
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/once_cell/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/once_cell/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,52 +1,29 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
 name = "once_cell"
 version = "1.10.0"
 authors = ["Aleksey Kladov <aleksey.kladov@gmail.com>"]
-license = "MIT OR Apache-2.0"
-edition = "2018"
-
+exclude = ["*.png", "*.svg", "/Cargo.lock.msrv", "rustfmt.toml"]
 description = "Single assignment cells and lazy values."
-readme = "README.md"
 documentation = "https://docs.rs/once_cell"
-
-repository = "https://github.com/matklad/once_cell"
+readme = "README.md"
 keywords = ["lazy", "static"]
 categories = ["rust-patterns", "memory-management"]
-
-exclude = ["*.png", "*.svg", "/Cargo.lock.msrv", "rustfmt.toml"]
-
-[workspace]
-members = ["xtask"]
-
-[dependencies]
-# Uses parking_lot to implement once_cell::sync::OnceCell.
-# This makes not speed difference, but makes each OnceCell<T>
-# for up to 16 bytes smaller, depending on the size of the T.
-parking_lot = { version = "0.12", optional = true, default_features = false }
-
-# To be used in order to enable the race feature on targets
-# that do not have atomics
-# *Warning:* This can be unsound. Please read the README of
-# [atomic-polyfill](https://github.com/embassy-rs/atomic-polyfill)
-# and make sure you understand all the implications
-atomic-polyfill = { version = "0.1", optional = true }
-
-[dev-dependencies]
-lazy_static = "1.0.0"
-crossbeam-utils = "0.7.2"
-regex =  "1.2.0"
-
-[features]
-default = ["std"]
-# Enables `once_cell::sync` module.
-std = ["alloc"]
-# Enables `once_cell::race::OnceBox` type.
-alloc = ["race"]
-# Enables `once_cell::race` module.
-race = []
-# Enables semver-exempt APIs of this crate.
-# At the moment, this feature is unused.
-unstable = []
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/matklad/once_cell"
+[package.metadata.docs.rs]
+all-features = true
 
 [[example]]
 name = "bench"
@@ -75,6 +52,26 @@
 [[example]]
 name = "test_synchronization"
 required-features = ["std"]
+[dependencies.atomic-polyfill]
+version = "0.1"
+optional = true
+
+[dependencies.parking_lot]
+version = "0.12"
+optional = true
+default_features = false
+[dev-dependencies.crossbeam-utils]
+version = "0.7.2"
 
-[package.metadata.docs.rs]
-all-features = true
+[dev-dependencies.lazy_static]
+version = "1.0.0"
+
+[dev-dependencies.regex]
+version = "1.2.0"
+
+[features]
+alloc = ["race"]
+default = ["std"]
+race = []
+std = ["alloc"]
+unstable = []
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/codespan_reporting/v0_11/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/codespan_reporting/v0_11/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,30 +1,58 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
+edition = "2018"
 name = "codespan-reporting"
 version = "0.11.1"
-readme = "../README.md"
-license = "Apache-2.0"
 authors = ["Brendan Zabarauskas <bjzaba@yahoo.com.au>"]
+exclude = ["assets/**"]
 description = "Beautiful diagnostic reporting for text-based programming languages"
 homepage = "https://github.com/brendanzab/codespan"
-repository = "https://github.com/brendanzab/codespan"
 documentation = "https://docs.rs/codespan-reporting"
-exclude = ["assets/**"]
-edition = "2018"
+readme = "../README.md"
+license = "Apache-2.0"
+repository = "https://github.com/brendanzab/codespan"
+[dependencies.serde]
+version = "1"
+features = ["derive"]
+optional = true
+
+[dependencies.termcolor]
+version = "1"
+
+[dependencies.unicode-width]
+version = "0.1"
+[dev-dependencies.anyhow]
+version = "1"
+
+[dev-dependencies.insta]
+version = "1.6.3"
+
+[dev-dependencies.lazy_static]
+version = "1.4"
 
-[dependencies]
-serde = { version = "1", optional = true, features = ["derive"] }
-termcolor = "1"
-unicode-width = "0.1"
-
-[dev-dependencies]
-anyhow = "1"
-insta = "1.6.3"
-lazy_static = "1.4"
-peg = "0.6"
-rustyline = "6"
-structopt = "0.3"
-unindent = "0.1"
+[dev-dependencies.peg]
+version = "0.6"
+
+[dev-dependencies.rustyline]
+version = "6"
+
+[dev-dependencies.structopt]
+version = "0.3"
+
+[dev-dependencies.unindent]
+version = "0.1"
 
 [features]
-serialization = ["serde", "serde/rc"]
 ascii-only = []
+serialization = ["serde", "serde/rc"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/clang_sys/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/clang_sys/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,23 +1,45 @@
-[package]
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
 
+[package]
 name = "clang-sys"
-authors = ["Kyle Mayes <kyle@mayeses.com>"]
-
 version = "1.3.0"
-
-readme = "README.md"
-license = "Apache-2.0"
-
+authors = ["Kyle Mayes <kyle@mayeses.com>"]
+build = "build.rs"
+links = "clang"
 description = "Rust bindings for libclang."
-
 documentation = "https://docs.rs/clang-sys"
+readme = "README.md"
+license = "Apache-2.0"
 repository = "https://github.com/KyleMayes/clang-sys"
+[package.metadata.docs.rs]
+features = ["clang_11_0", "runtime"]
+[dependencies.glob]
+version = "0.3"
 
-links = "clang"
-build = "build.rs"
+[dependencies.libc]
+version = "0.2.39"
+default-features = false
+
+[dependencies.libloading]
+version = "0.7"
+optional = true
+[build-dependencies.glob]
+version = "0.3"
 
 [features]
-
+clang_10_0 = ["clang_9_0"]
+clang_11_0 = ["clang_10_0"]
+clang_12_0 = ["clang_11_0"]
+clang_13_0 = ["clang_12_0"]
 clang_3_5 = []
 clang_3_6 = ["clang_3_5"]
 clang_3_7 = ["clang_3_6"]
@@ -29,24 +51,5 @@
 clang_7_0 = ["clang_6_0"]
 clang_8_0 = ["clang_7_0"]
 clang_9_0 = ["clang_8_0"]
-clang_10_0 = ["clang_9_0"]
-clang_11_0 = ["clang_10_0"]
-clang_12_0 = ["clang_11_0"]
-clang_13_0 = ["clang_12_0"]
-
 runtime = ["libloading"]
 static = []
-
-[dependencies]
-
-glob = "0.3"
-libc = { version = "0.2.39", default-features = false }
-libloading = { version = "0.7", optional = true }
-
-[build-dependencies]
-
-glob = "0.3"
-
-[package.metadata.docs.rs]
-
-features = ["clang_11_0", "runtime"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/bindgen/v0_60/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/bindgen/v0_60/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,34 +1,48 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
-authors = [
-  "Jyun-Yan You <jyyou.tw@gmail.com>",
-  "Emilio Cobos Álvarez <emilio@crisal.io>",
-  "Nick Fitzgerald <fitzgen@gmail.com>",
-  "The Servo project developers",
-]
-description = "Automatically generates Rust FFI bindings to C and C++ libraries."
-keywords = ["bindings", "ffi", "code-generation"]
-categories = ["external-ffi-bindings", "development-tools::ffi"]
-license = "BSD-3-Clause"
+edition = "2018"
 name = "bindgen"
-readme = "README.md"
-repository = "https://github.com/rust-lang/rust-bindgen"
-documentation = "https://docs.rs/bindgen"
-homepage = "https://rust-lang.github.io/rust-bindgen/"
 version = "0.60.1"
-edition = "2018"
+authors = [
+    "Jyun-Yan You <jyyou.tw@gmail.com>",
+    "Emilio Cobos Álvarez <emilio@crisal.io>",
+    "Nick Fitzgerald <fitzgen@gmail.com>",
+    "The Servo project developers",
+]
 build = "build.rs"
-
 include = [
-  "LICENSE",
-  "README.md",
-  "Cargo.toml",
-  "build.rs",
-  "src/*.rs",
-  "src/**/*.rs",
+    "LICENSE",
+    "README.md",
+    "Cargo.toml",
+    "build.rs",
+    "src/*.rs",
+    "src/**/*.rs",
 ]
-
-[badges]
-travis-ci = { repository = "rust-lang/rust-bindgen" }
+description = "Automatically generates Rust FFI bindings to C and C++ libraries."
+homepage = "https://rust-lang.github.io/rust-bindgen/"
+documentation = "https://docs.rs/bindgen"
+readme = "README.md"
+keywords = [
+    "bindings",
+    "ffi",
+    "code-generation",
+]
+categories = [
+    "external-ffi-bindings",
+    "development-tools::ffi",
+]
+license = "BSD-3-Clause"
+repository = "https://github.com/rust-lang/rust-bindgen"
 
 [lib]
 path = "src/lib.rs"
@@ -39,47 +53,94 @@
 doc = false
 required-features = ["clap"]
 
-[dev-dependencies]
-diff = "0.1"
-clap = "3"
-shlex = "1"
-tempfile = "3"
-
-[dependencies]
-bitflags = "1.0.3"
-cexpr = "0.6"
-# This kinda sucks: https://github.com/rust-lang/cargo/issues/1982
-clap = { version = "3", optional = true }
-clang-sys = { version = "1", features = ["clang_6_0"] }
-lazycell = "1"
-lazy_static = "1"
-peeking_take_while = "0.1.2"
-quote = { version = "1", default-features = false }
-regex = { version = "1.0", default-features = false , features = [ "std", "unicode"]}
-which = { version = "4.2.1", optional = true, default-features = false }
-shlex = "1"
-rustc-hash = "1.0.1"
-proc-macro2 = { version = "1", default-features = false }
+[dependencies.bitflags]
+version = "1.0.3"
 
-[dependencies.env_logger]
+[dependencies.cexpr]
+version = "0.6"
+
+[dependencies.clang-sys]
+version = "1"
+features = ["clang_6_0"]
+
+[dependencies.clap]
+version = "3"
 optional = true
+
+[dependencies.env_logger]
 version = "0.9.0"
+optional = true
+
+[dependencies.lazy_static]
+version = "1"
+
+[dependencies.lazycell]
+version = "1"
 
 [dependencies.log]
-optional = true
 version = "0.4"
+optional = true
+
+[dependencies.peeking_take_while]
+version = "0.1.2"
+
+[dependencies.proc-macro2]
+version = "1"
+default-features = false
+
+[dependencies.quote]
+version = "1"
+default-features = false
+
+[dependencies.regex]
+version = "1.0"
+features = [
+    "std",
+    "unicode",
+]
+default-features = false
+
+[dependencies.rustc-hash]
+version = "1.0.1"
+
+[dependencies.shlex]
+version = "1"
+
+[dependencies.which]
+version = "4.2.1"
+optional = true
+default-features = false
+
+[dev-dependencies.clap]
+version = "3"
+
+[dev-dependencies.diff]
+version = "0.1"
+
+[dev-dependencies.shlex]
+version = "1"
+
+[dev-dependencies.tempfile]
+version = "3"
 
 [features]
-default = ["logging", "clap", "runtime", "which-rustfmt"]
-logging = ["env_logger", "log"]
-static = ["clang-sys/static"]
+default = [
+    "logging",
+    "clap",
+    "runtime",
+    "which-rustfmt",
+]
+logging = [
+    "env_logger",
+    "log",
+]
 runtime = ["clang-sys/runtime"]
-# Dynamically discover a `rustfmt` binary using the `which` crate
-which-rustfmt = ["which"]
-
-# These features only exist for CI testing -- don't use them if you're not hacking
-# on bindgen!
+static = ["clang-sys/static"]
 testing_only_docs = []
 testing_only_extra_assertions = []
-testing_only_libclang_9 = []
 testing_only_libclang_5 = []
+testing_only_libclang_9 = []
+which-rustfmt = ["which"]
+
+[badges.travis-ci]
+repository = "rust-lang/rust-bindgen"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/termcolor/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/termcolor/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,27 +1,33 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
+edition = "2018"
 name = "termcolor"
-version = "1.1.2"  #:version
+version = "1.1.2"
 authors = ["Andrew Gallant <jamslam@gmail.com>"]
-description = """
-A simple cross platform library for writing colored text to a terminal.
-"""
-documentation = "https://docs.rs/termcolor"
+exclude = ["/.travis.yml", "/appveyor.yml", "/ci/**"]
+description = "A simple cross platform library for writing colored text to a terminal.\n"
 homepage = "https://github.com/BurntSushi/termcolor"
-repository = "https://github.com/BurntSushi/termcolor"
+documentation = "https://docs.rs/termcolor"
 readme = "README.md"
 keywords = ["windows", "win", "color", "ansi", "console"]
 license = "Unlicense OR MIT"
-exclude = ["/.travis.yml", "/appveyor.yml", "/ci/**"]
-edition = "2018"
+repository = "https://github.com/BurntSushi/termcolor"
 
 [lib]
 name = "termcolor"
 bench = false
 
-[target.'cfg(windows)'.dependencies]
-winapi-util = "0.1.3"
-
 [dev-dependencies]
-# TODO: Re-enable this once the MSRV is 1.43 or greater.
-# See: https://github.com/BurntSushi/termcolor/issues/35
-# doc-comment = "0.3"
+[target."cfg(windows)".dependencies.winapi-util]
+version = "0.1.3"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/memoffset/v0_6/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/memoffset/v0_6/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,19 +1,28 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
 name = "memoffset"
 version = "0.6.5"
 authors = ["Gilad Naaman <gilad.naaman@gmail.com>"]
 description = "offset_of functionality for Rust structs."
-license = "MIT"
 readme = "README.md"
-repository = "https://github.com/Gilnaa/memoffset"
 keywords = ["mem", "offset", "offset_of", "offsetof"]
 categories = ["no-std"]
-
-[build-dependencies]
-autocfg = "1"
-
-[dev-dependencies]
-doc-comment = "0.3"
+license = "MIT"
+repository = "https://github.com/Gilnaa/memoffset"
+[dev-dependencies.doc-comment]
+version = "0.3"
+[build-dependencies.autocfg]
+version = "1"
 
 [features]
 default = []
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/lazycell/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/lazycell/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,26 +1,33 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
 name = "lazycell"
 version = "1.3.0"
-authors = ["Alex Crichton <alex@alexcrichton.com>",
-           "Nikita Pekin <contact@nikitapek.in>"]
+authors = ["Alex Crichton <alex@alexcrichton.com>", "Nikita Pekin <contact@nikitapek.in>"]
+include = ["CHANGELOG.md", "Cargo.toml", "LICENSE-MIT", "LICENSE-APACHE", "README.md", "src/**/*.rs"]
 description = "A library providing a lazily filled Cell struct"
-repository = "https://github.com/indiv0/lazycell"
 documentation = "http://indiv0.github.io/lazycell/lazycell/"
 readme = "README.md"
 keywords = ["lazycell", "lazy", "cell", "library"]
 license = "MIT/Apache-2.0"
-include = [
-    "CHANGELOG.md",
-    "Cargo.toml",
-    "LICENSE-MIT",
-    "LICENSE-APACHE",
-    "README.md",
-    "src/**/*.rs",
-]
+repository = "https://github.com/indiv0/lazycell"
+[dependencies.clippy]
+version = "0.0"
+optional = true
 
-[dependencies]
-clippy = { version = "0.0", optional = true }
-serde = { version = "^1", optional = true }
+[dependencies.serde]
+version = "^1"
+optional = true
 
 [features]
 nightly = []
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/ryu/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/ryu/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,28 +1,38 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
+edition = "2018"
 name = "ryu"
-version = "1.0.5" # don't forget to update html_root_url
+version = "1.0.5"
 authors = ["David Tolnay <dtolnay@gmail.com>"]
-license = "Apache-2.0 OR BSL-1.0"
 description = "Fast floating point to string conversion"
-repository = "https://github.com/dtolnay/ryu"
 documentation = "https://docs.rs/ryu"
 readme = "README.md"
-edition = "2018"
-
-[features]
-# Use smaller lookup tables. Instead of storing every required power of
-# 5, only store every 26th entry, and compute intermediate values with a
-# multiplication. This reduces the lookup table size by about 10x (only
-# one case, and only f64) at the cost of some performance.
-small = []
+license = "Apache-2.0 OR BSL-1.0"
+repository = "https://github.com/dtolnay/ryu"
+[package.metadata.docs.rs]
+targets = ["x86_64-unknown-linux-gnu"]
+[dependencies.no-panic]
+version = "0.1"
+optional = true
+[dev-dependencies.num_cpus]
+version = "1.8"
 
-[dependencies]
-no-panic = { version = "0.1", optional = true }
+[dev-dependencies.rand]
+version = "0.7"
 
-[dev-dependencies]
-num_cpus = "1.8"
-rand = "0.7"
-rand_xorshift = "0.2"
+[dev-dependencies.rand_xorshift]
+version = "0.2"
 
-[package.metadata.docs.rs]
-targets = ["x86_64-unknown-linux-gnu"]
+[features]
+small = []
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/autocxx_engine/v0_22/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/autocxx_engine/v0_22/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,63 +1,116 @@
-# Copyright 2020 Google LLC
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
 #
-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
-# https://www.apache.org/licenses/LICENSE-2.0> or the MIT license
-# <LICENSE-MIT or https://opensource.org/licenses/MIT>, at your
-# option. This file may not be copied, modified, or distributed
-# except according to those terms.
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
 
 [package]
+edition = "2021"
 name = "autocxx-engine"
 version = "0.22.4"
 authors = ["Adrian Taylor <adetaylor@chromium.org>"]
-license = "MIT OR Apache-2.0"
 description = "Safe autogenerated interop between Rust and C++"
-repository = "https://github.com/google/autocxx"
-edition = "2021"
+readme = "README.md"
 keywords = ["ffi"]
-categories = ["development-tools::ffi", "api-bindings"]
+categories = [
+    "development-tools::ffi",
+    "api-bindings",
+]
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/google/autocxx"
+resolver = "2"
 
-[features]
-default = [ "reproduction_case" ]
-build = ["cc"]
-nightly = [] # for doc generation purposes only; used by docs.rs
-reproduction_case = [ "serde_json", "autocxx-parser/reproduction_case" ]
-runtime = [ "autocxx-bindgen/runtime" ]
-static = [ "autocxx-bindgen/static" ]
-
-[dependencies]
-log = "0.4"
-proc-macro2 = "1.0.11"
-quote = "1.0"
-indoc = "1.0"
-autocxx-bindgen = "=0.60.3"
-#autocxx-bindgen = { git = "https://github.com/adetaylor/rust-bindgen", branch = "rev-0.60.1" }
-itertools = "0.10.3"
-cc = { version = "1.0", optional = true }
-# Note: Keep the patch-level version of cxx-gen and cxx in sync.
-# There can be interdependencies between the code generated by cxx-gen and
-# what cxx expects to be there.
-cxx-gen = "0.7.68"
-autocxx-parser = { version = "=0.22.4", path="../parser" }
-version_check = "0.9"
-aquamarine = "0.1" # docs
-tempfile = "3.1"
-once_cell = "1.7"
-strum_macros = "0.24"
-serde_json = { version = "1.0", optional = true }
-miette = "4.3"
-thiserror = "1"
-regex = "1.5"
-indexmap = "1.8"
-prettyplease = { version = "0.1.15", features = ["verbatim"] }
+[package.metadata.docs.rs]
+features = [
+    "build",
+    "nightly",
+]
+
+[dependencies.aquamarine]
+version = "0.1"
+
+[dependencies.autocxx-bindgen]
+version = "=0.60.3"
+
+[dependencies.autocxx-parser]
+version = "=0.22.4"
+
+[dependencies.cc]
+version = "1.0"
+optional = true
+
+[dependencies.cxx-gen]
+version = "0.7.68"
+
+[dependencies.indexmap]
+version = "1.8"
+
+[dependencies.indoc]
+version = "1.0"
+
+[dependencies.itertools]
+version = "0.10.3"
+
+[dependencies.log]
+version = "0.4"
+
+[dependencies.miette]
+version = "4.3"
+
+[dependencies.once_cell]
+version = "1.7"
+
+[dependencies.prettyplease]
+version = "0.1.15"
+features = ["verbatim"]
+
+[dependencies.proc-macro2]
+version = "1.0.11"
+
+[dependencies.quote]
+version = "1.0"
+
+[dependencies.regex]
+version = "1.5"
+
+[dependencies.serde_json]
+version = "1.0"
+optional = true
+
+[dependencies.strum_macros]
+version = "0.24"
 
 [dependencies.syn]
 version = "1.0.39"
-features = [ "full", "printing" ]
-#features = [ "full", "printing", "extra-traits" ]
+features = [
+    "full",
+    "printing",
+]
+
+[dependencies.tempfile]
+version = "3.1"
 
-[package.metadata.docs.rs]
-features = ["build", "nightly"]
+[dependencies.thiserror]
+version = "1"
 
-[dev-dependencies]
-cc = "1.0"
+[dependencies.version_check]
+version = "0.9"
+
+[dev-dependencies.cc]
+version = "1.0"
+
+[features]
+build = ["cc"]
+default = ["reproduction_case"]
+nightly = []
+reproduction_case = [
+    "serde_json",
+    "autocxx-parser/reproduction_case",
+]
+runtime = ["autocxx-bindgen/runtime"]
+static = ["autocxx-bindgen/static"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/supports_hyperlinks/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/supports_hyperlinks/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,14 +1,25 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
+edition = "2018"
 name = "supports-hyperlinks"
 version = "1.2.0"
 authors = ["Kat Marchán <kzm@zkat.tech>"]
 description = "Detects whether a terminal supports rendering hyperlinks."
-categories = ["terminal"]
-repository = "https://github.com/zkat/supports-hyperlinks"
 documentation = "https://docs.rs/supports-hyperlinks"
-license = "Apache-2.0"
 readme = "README.md"
-edition = "2018"
-
-[dependencies]
-atty = "0.2.14"
+categories = ["terminal"]
+license = "Apache-2.0"
+repository = "https://github.com/zkat/supports-hyperlinks"
+[dependencies.atty]
+version = "0.2.14"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/nom/v7/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/nom/v7/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,60 +1,54 @@
-[package]
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
 
+[package]
+edition = "2018"
 name = "nom"
 version = "7.1.0"
-authors = [ "contact@geoffroycouprie.com" ]
+authors = ["contact@geoffroycouprie.com"]
+include = ["CHANGELOG.md", "LICENSE", "README.md", ".gitignore", "Cargo.toml", "src/*.rs", "src/*/*.rs", "tests/*.rs", "doc/nom_recipes.md", "build.rs"]
+autoexamples = false
 description = "A byte-oriented, zero-copy, parser combinators library"
-license = "MIT"
-repository = "https://github.com/Geal/nom"
-readme = "README.md"
 documentation = "https://docs.rs/nom"
+readme = "README.md"
 keywords = ["parser", "parser-combinators", "parsing", "streaming", "bit"]
 categories = ["parsing"]
-edition = "2018"
-autoexamples = false
-
-include = [
-  "CHANGELOG.md",
-  "LICENSE",
-  "README.md",
-  ".gitignore",
-  "Cargo.toml",
-  "src/*.rs",
-  "src/*/*.rs",
-  "tests/*.rs",
-  "doc/nom_recipes.md",
-  "build.rs"
-]
-
-[features]
-alloc = []
-std = ["alloc", "memchr/std", "minimal-lexical/std"]
-default = ["std"]
-docsrs = []
-
-[dependencies.minimal-lexical]
-version = "0.2.0"
-default-features = false
-
-[dependencies.memchr]
-version = "2.3"
-default-features = false
-
-[dev-dependencies]
-doc-comment = "0.3"
-proptest = "1.0.0"
-
-[build-dependencies]
-version_check = "0.9"
-
+license = "MIT"
+repository = "https://github.com/Geal/nom"
 [package.metadata.docs.rs]
-features = ["alloc", "std", "docsrs"]
 all-features = true
-
+features = ["alloc", "std", "docsrs"]
 [profile.bench]
-debug = true
 lto = true
 codegen-units = 1
+debug = true
+
+[[example]]
+name = "json"
+path = "examples/json.rs"
+required-features = ["alloc"]
+
+[[example]]
+name = "iterator"
+path = "examples/iterator.rs"
+
+[[example]]
+name = "s_expression"
+path = "examples/s_expression.rs"
+required-features = ["alloc"]
+
+[[example]]
+name = "string"
+path = "examples/string.rs"
+required-features = ["alloc"]
 
 [[test]]
 name = "arithmetic"
@@ -104,30 +98,33 @@
 [[test]]
 name = "fnmut"
 required-features = ["alloc"]
+[dependencies.memchr]
+version = "2.3"
+default-features = false
 
-[[example]]
-name = "json"
-required-features = ["alloc"]
-path = "examples/json.rs"
-
-[[example]]
-name = "iterator"
-path = "examples/iterator.rs"
+[dependencies.minimal-lexical]
+version = "0.2.0"
+default-features = false
+[dev-dependencies.doc-comment]
+version = "0.3"
 
-[[example]]
-name = "s_expression"
-path = "examples/s_expression.rs"
-required-features = ["alloc"]
+[dev-dependencies.proptest]
+version = "1.0.0"
+[build-dependencies.version_check]
+version = "0.9"
 
-[[example]]
-name = "string"
-required-features = ["alloc"]
-path = "examples/string.rs"
+[features]
+alloc = []
+default = ["std"]
+docsrs = []
+std = ["alloc", "memchr/std", "minimal-lexical/std"]
+[badges.coveralls]
+branch = "master"
+repository = "Geal/nom"
+service = "github"
 
-[badges]
-travis-ci = { repository = "Geal/nom" }
-coveralls = { repository = "Geal/nom", branch = "master", service = "github" }
-maintenance = { status = "actively-developed" }
+[badges.maintenance]
+status = "actively-developed"
 
-[workspace]
-members = [".", "benchmarks/"]
+[badges.travis-ci]
+repository = "Geal/nom"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/serde_json/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/serde_json/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,88 +1,75 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
+rust-version = "1.36"
 name = "serde_json"
-version = "1.0.78" # remember to update html_root_url
+version = "1.0.78"
 authors = ["Erick Tryzelaar <erick.tryzelaar@gmail.com>", "David Tolnay <dtolnay@gmail.com>"]
-license = "MIT OR Apache-2.0"
 description = "A JSON serialization file format"
-repository = "https://github.com/serde-rs/json"
 documentation = "https://docs.serde.rs/serde_json/"
+readme = "README.md"
 keywords = ["json", "serde", "serialization"]
 categories = ["encoding"]
-readme = "README.md"
-edition = "2018"
-rust-version = "1.36"
-
-[dependencies]
-serde = { version = "1.0.100", default-features = false }
-indexmap = { version = "1.5", optional = true }
-itoa = "1.0"
-ryu = "1.0"
-
-[dev-dependencies]
-automod = "1.0"
-ref-cast = "1.0"
-rustversion = "1.0"
-serde_bytes = "0.11"
-serde_derive = "1.0"
-serde_stacker = "0.1"
-trybuild = { version = "1.0.49", features = ["diff"] }
-
-[workspace]
-members = ["tests/crate"]
-
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/serde-rs/json"
 [package.metadata.docs.rs]
 features = ["raw_value", "unbounded_depth"]
-targets = ["x86_64-unknown-linux-gnu"]
 rustdoc-args = ["--cfg", "docsrs"]
+targets = ["x86_64-unknown-linux-gnu"]
 
 [package.metadata.playground]
 features = ["raw_value"]
+[dependencies.indexmap]
+version = "1.5"
+optional = true
 
+[dependencies.itoa]
+version = "1.0"
 
-### FEATURES #################################################################
+[dependencies.ryu]
+version = "1.0"
 
-[features]
-default = ["std"]
+[dependencies.serde]
+version = "1.0.100"
+default-features = false
+[dev-dependencies.automod]
+version = "1.0"
 
-std = ["serde/std"]
+[dev-dependencies.ref-cast]
+version = "1.0"
 
-# Provide integration for heap-allocated collections without depending on the
-# rest of the Rust standard library.
-# NOTE: Disabling both `std` *and* `alloc` features is not supported yet.
-# Available on Rust 1.36+.
-alloc = ["serde/alloc"]
+[dev-dependencies.rustversion]
+version = "1.0"
 
-# Make serde_json::Map use a representation which maintains insertion order.
-# This allows data to be read into a Value and written back to a JSON string
-# while preserving the order of map keys in the input.
-preserve_order = ["indexmap"]
+[dev-dependencies.serde_bytes]
+version = "0.11"
 
-# Use sufficient precision when parsing fixed precision floats from JSON to
-# ensure that they maintain accuracy when round-tripped through JSON. This comes
-# at an approximately 2x performance cost for parsing floats compared to the
-# default best-effort precision.
-#
-# Unlike arbitrary_precision, this feature makes f64 -> JSON -> f64 produce
-# output identical to the input.
-float_roundtrip = []
+[dev-dependencies.serde_derive]
+version = "1.0"
 
-# Use an arbitrary precision number representation for serde_json::Number. This
-# allows JSON numbers of arbitrary size/precision to be read into a Number and
-# written back to a JSON string without loss of precision.
-#
-# Unlike float_roundtrip, this feature makes JSON -> serde_json::Number -> JSON
-# produce output identical to the input.
-arbitrary_precision = []
+[dev-dependencies.serde_stacker]
+version = "0.1"
 
-# Provide a RawValue type that can hold unprocessed JSON during deserialization.
-raw_value = []
+[dev-dependencies.trybuild]
+version = "1.0.49"
+features = ["diff"]
 
-# Provide a method disable_recursion_limit to parse arbitrarily deep JSON
-# structures without any consideration for overflowing the stack. When using
-# this feature, you will want to provide some other way to protect against stack
-# overflows, such as by wrapping your Deserializer in the dynamically growing
-# stack adapter provided by the serde_stacker crate. Additionally you will need
-# to be careful around other recursive operations on the parsed result which may
-# overflow the stack after deserialization has completed, including, but not
-# limited to, Display and Debug and Drop impls.
+[features]
+alloc = ["serde/alloc"]
+arbitrary_precision = []
+default = ["std"]
+float_roundtrip = []
+preserve_order = ["indexmap"]
+raw_value = []
+std = ["serde/std"]
 unbounded_depth = []
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/cxxbridge_cmd/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/cxxbridge_cmd/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,31 +1,64 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
+rust-version = "1.54"
 name = "cxxbridge-cmd"
 version = "1.0.68"
 authors = ["David Tolnay <dtolnay@gmail.com>"]
-edition = "2018"
-rust-version = "1.54"
-license = "MIT OR Apache-2.0"
+exclude = ["build.rs"]
 description = "C++ code generator for integrating `cxx` crate into a non-Cargo build."
-repository = "https://github.com/dtolnay/cxx"
 homepage = "https://cxx.rs"
-exclude = ["build.rs"]
 keywords = ["ffi"]
 categories = ["development-tools::ffi"]
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/dtolnay/cxx"
+
+[package.metadata.docs.rs]
+targets = ["x86_64-unknown-linux-gnu"]
 
 [[bin]]
 name = "cxxbridge"
 path = "src/main.rs"
 
-[features]
-# incomplete features that are not covered by a compatibility guarantee:
-experimental-async-fn = []
+[dependencies.clap]
+version = "3.1"
+features = [
+    "std",
+    "suggestions",
+]
+default-features = false
 
-[dependencies]
-clap = { version = "3.1", default-features = false, features = ["std", "suggestions"] }
-codespan-reporting = "0.11"
-proc-macro2 = { version = "1.0.26", default-features = false, features = ["span-locations"] }
-quote = { version = "1.0", default-features = false }
-syn = { version = "1.0.70", default-features = false, features = ["parsing", "printing", "clone-impls", "full"] }
+[dependencies.codespan-reporting]
+version = "0.11"
 
-[package.metadata.docs.rs]
-targets = ["x86_64-unknown-linux-gnu"]
+[dependencies.proc-macro2]
+version = "1.0.26"
+features = ["span-locations"]
+default-features = false
+
+[dependencies.quote]
+version = "1.0"
+default-features = false
+
+[dependencies.syn]
+version = "1.0.70"
+features = [
+    "parsing",
+    "printing",
+    "clone-impls",
+    "full",
+]
+default-features = false
+
+[features]
+experimental-async-fn = []
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/static_assertions/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/static_assertions/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,22 +1,39 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
 name = "static_assertions"
 version = "1.1.0"
 authors = ["Nikolai Vazquez"]
-license = "MIT OR Apache-2.0"
-readme = "README.md"
+include = ["Cargo.toml", "src/**/*.rs", "README.md", "CHANGELOG.md", "LICENSE*"]
+description = "Compile-time assertions to ensure that invariants are met."
 homepage = "https://github.com/nvzqz/static-assertions-rs"
-repository = "https://github.com/nvzqz/static-assertions-rs"
 documentation = "https://docs.rs/static_assertions/"
-categories = ["no-std", "rust-patterns", "development-tools::testing"]
+readme = "README.md"
 keywords = ["assert", "static", "testing"]
-description = "Compile-time assertions to ensure that invariants are met."
-include = ["Cargo.toml", "src/**/*.rs", "README.md", "CHANGELOG.md", "LICENSE*"]
-
-[badges]
-travis-ci = { repository = "nvzqz/static-assertions-rs" }
-is-it-maintained-open-issues = { repository = "nvzqz/static-assertions-rs" }
-is-it-maintained-issue-resolution = { repository = "nvzqz/static-assertions-rs" }
-maintenance = { status = "passively-maintained" }
+categories = ["no-std", "rust-patterns", "development-tools::testing"]
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/nvzqz/static-assertions-rs"
 
 [features]
 nightly = []
+[badges.is-it-maintained-issue-resolution]
+repository = "nvzqz/static-assertions-rs"
+
+[badges.is-it-maintained-open-issues]
+repository = "nvzqz/static-assertions-rs"
+
+[badges.maintenance]
+status = "passively-maintained"
+
+[badges.travis-ci]
+repository = "nvzqz/static-assertions-rs"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/rustc_version/v0_4/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/rustc_version/v0_4/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,17 +1,27 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
+edition = "2018"
 name = "rustc_version"
 version = "0.4.0"
 authors = ["Dirkjan Ochtman <dirkjan@ochtman.nl>", "Marvin Löbel <loebel.marvin@gmail.com>"]
-license = "MIT/Apache-2.0"
 description = "A library for querying the version of a installed rustc compiler"
-readme = "README.md"
 documentation = "https://docs.rs/rustc_version/"
-repository = "https://github.com/Kimundi/rustc-version-rs"
+readme = "README.md"
 keywords = ["version", "rustc"]
-edition = "2018"
-
-[dependencies]
-semver = "1.0"
-
-[dev-dependencies]
-doc-comment = "0.3"
+license = "MIT/Apache-2.0"
+repository = "https://github.com/Kimundi/rustc-version-rs"
+[dependencies.semver]
+version = "1.0"
+[dev-dependencies.doc-comment]
+version = "0.3"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/bitflags/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/bitflags/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,39 +1,58 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
+edition = "2018"
 name = "bitflags"
-# NB: When modifying, also modify:
-#   1. html_root_url in lib.rs
-#   2. number in readme (for breaking changes)
 version = "1.3.2"
-edition = "2018"
 authors = ["The Rust Project Developers"]
-license = "MIT/Apache-2.0"
-keywords = ["bit", "bitmask", "bitflags", "flags"]
-readme = "README.md"
-repository = "https://github.com/bitflags/bitflags"
+exclude = ["bors.toml"]
+description = "A macro to generate structures which behave like bitflags.\n"
 homepage = "https://github.com/bitflags/bitflags"
 documentation = "https://docs.rs/bitflags"
+readme = "README.md"
+keywords = ["bit", "bitmask", "bitflags", "flags"]
 categories = ["no-std"]
-description = """
-A macro to generate structures which behave like bitflags.
-"""
-exclude = ["bors.toml"]
+license = "MIT/Apache-2.0"
+repository = "https://github.com/bitflags/bitflags"
+[package.metadata.docs.rs]
+features = ["example_generated"]
+[dependencies.compiler_builtins]
+version = "0.1.2"
+optional = true
+
+[dependencies.core]
+version = "1.0.0"
+optional = true
+package = "rustc-std-workspace-core"
+[dev-dependencies.rustversion]
+version = "1.0"
+
+[dev-dependencies.serde]
+version = "1.0"
+
+[dev-dependencies.serde_derive]
+version = "1.0"
 
-[dependencies]
-core = { version = '1.0.0', optional = true, package = 'rustc-std-workspace-core' }
-compiler_builtins = { version = '0.1.2', optional = true }
-
-[dev-dependencies]
-trybuild = "1.0"
-rustversion = "1.0"
-walkdir = "2.3"
-serde = "1.0"
-serde_derive = "1.0"
-serde_json = "1.0"
+[dev-dependencies.serde_json]
+version = "1.0"
+
+[dev-dependencies.trybuild]
+version = "1.0"
+
+[dev-dependencies.walkdir]
+version = "2.3"
 
 [features]
 default = []
 example_generated = []
 rustc-dep-of-std = ["core", "compiler_builtins"]
-
-[package.metadata.docs.rs]
-features = ["example_generated"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/supports_color/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/supports_color/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,17 +1,27 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
 name = "supports-color"
 version = "1.3.0"
 authors = ["Kat Marchán <kzm@zkat.tech>"]
 description = "Detects whether a terminal supports color, and gives details about that support."
-categories = ["terminal"]
-repository = "https://github.com/zkat/supports-color"
 documentation = "https://docs.rs/supports-color"
-license = "Apache-2.0"
 readme = "README.md"
-edition = "2018"
-
-# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
+categories = ["terminal"]
+license = "Apache-2.0"
+repository = "https://github.com/zkat/supports-color"
+[dependencies.atty]
+version = "0.2.14"
 
-[dependencies]
-atty = "0.2.14"
-is_ci = "1.1.1"
+[dependencies.is_ci]
+version = "1.1.1"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/miette_derive/v4/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/miette_derive/v4/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,16 +1,30 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
 name = "miette-derive"
 version = "4.3.0"
 authors = ["Kat Marchán <kzm@zkat.tech>"]
-edition = "2018"
-license = "Apache-2.0"
 description = "Derive macros for miette. Like `thiserror` for Diagnostics."
+license = "Apache-2.0"
 repository = "https://github.com/zkat/miette"
 
 [lib]
 proc-macro = true
+[dependencies.proc-macro2]
+version = "1.0"
+
+[dependencies.quote]
+version = "1.0"
 
-[dependencies]
-proc-macro2 = "1.0"
-quote = "1.0"
-syn = "1.0.45"
+[dependencies.syn]
+version = "1.0.45"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/aquamarine/v0_1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/aquamarine/v0_1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,24 +1,41 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
 name = "aquamarine"
 version = "0.1.11"
 authors = ["Mike Lubinets <git@mkl.dev>"]
+include = ["src/**/*", "Cargo.toml", "doc/js/mermaid.min.js"]
 description = "A mermaid.js integration for rustdoc"
 keywords = ["proc_macro", "docs", "rustdoc", "mermaid", "diagram"]
 categories = ["visualization", "development-tools::build-utils"]
-repository = "https://github.com/mersinvald/aquamarine"
-edition = "2018"
 license = "MIT"
-include = [ "src/**/*", "Cargo.toml", "doc/js/mermaid.min.js" ]
+repository = "https://github.com/mersinvald/aquamarine"
 
 [lib]
 proc-macro = true
+[dependencies.itertools]
+version = "0.9"
+
+[dependencies.proc-macro-error]
+version = "1"
+
+[dependencies.proc-macro2]
+version = "1"
 
-[dependencies]
-quote = "1"
-proc-macro2 = "1"
-proc-macro-error = "1"
-itertools = "0.9"
-syn = "1"
+[dependencies.quote]
+version = "1"
 
-[dev-dependencies]
-pretty_assertions = "0.6"
+[dependencies.syn]
+version = "1"
+[dev-dependencies.pretty_assertions]
+version = "0.6"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/either/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/either/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,33 +1,39 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
 name = "either"
 version = "1.6.1"
 authors = ["bluss"]
-
-license = "MIT/Apache-2.0"
-repository = "https://github.com/bluss/either"
+description = "The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.\n"
 documentation = "https://docs.rs/either/1/"
 readme = "README-crates.io.md"
-
-description = """
-The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.
-"""
-
 keywords = ["data-structure", "no_std"]
 categories = ["data-structures", "no-std"]
-
-[dependencies]
-serde = { version = "1.0", optional = true, features = ["derive"] }
-
-[features]
-default = ["use_std"]
-use_std = []
-
-[dev-dependencies]
-serde_json = "1.0.0"
+license = "MIT/Apache-2.0"
+repository = "https://github.com/bluss/either"
+[package.metadata.docs.rs]
+features = ["serde"]
 
 [package.metadata.release]
 no-dev-version = true
 tag-name = "{{version}}"
+[dependencies.serde]
+version = "1.0"
+features = ["derive"]
+optional = true
+[dev-dependencies.serde_json]
+version = "1.0.0"
 
-[package.metadata.docs.rs]
-features = ["serde"]
+[features]
+default = ["use_std"]
+use_std = []
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/libc/v0_2/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/libc/v0_2/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,35 +1,64 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
 name = "libc"
 version = "0.2.132"
 authors = ["The Rust Project Developers"]
-license = "MIT OR Apache-2.0"
-readme = "README.md"
-repository = "https://github.com/rust-lang/libc"
-homepage = "https://github.com/rust-lang/libc"
-documentation = "https://docs.rs/libc/"
-keywords = ["libc", "ffi", "bindings", "operating", "system" ]
-categories = ["external-ffi-bindings", "no-std", "os"]
 build = "build.rs"
-exclude = ["/ci/*", "/.github/*", "/.cirrus.yml", "/triagebot.toml"]
+exclude = [
+    "/ci/*",
+    "/.github/*",
+    "/.cirrus.yml",
+    "/triagebot.toml",
+]
 description = """
 Raw FFI bindings to platform libraries like libc.
 """
+homepage = "https://github.com/rust-lang/libc"
+documentation = "https://docs.rs/libc/"
+readme = "README.md"
+keywords = [
+    "libc",
+    "ffi",
+    "bindings",
+    "operating",
+    "system",
+]
+categories = [
+    "external-ffi-bindings",
+    "no-std",
+    "os",
+]
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/rust-lang/libc"
 
 [package.metadata.docs.rs]
-features = ["const-extern-fn", "extra_traits"]
+features = [
+    "const-extern-fn",
+    "extra_traits",
+]
 
-[dependencies]
-rustc-std-workspace-core = { version = "1.0.0", optional = true }
+[dependencies.rustc-std-workspace-core]
+version = "1.0.0"
+optional = true
 
 [features]
-default = ["std"]
-std = []
 align = []
-rustc-dep-of-std = ['align', 'rustc-std-workspace-core']
-extra_traits = []
 const-extern-fn = []
-# use_std is deprecated, use `std` instead
-use_std = [ 'std' ]
-
-[workspace]
-members = ["libc-test"]
+default = ["std"]
+extra_traits = []
+rustc-dep-of-std = [
+    "align",
+    "rustc-std-workspace-core",
+]
+std = []
+use_std = ["std"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/supports_unicode/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/supports_unicode/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,14 +1,24 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
 name = "supports-unicode"
 version = "1.0.2"
 authors = ["Kat Marchán <kzm@zkat.tech>"]
 description = "Detects whether a terminal supports unicode."
-categories = ["command-line-interface"]
-repository = "https://github.com/zkat/supports-unicode"
 documentation = "https://docs.rs/supports-unicode"
-license = "Apache-2.0"
 readme = "README.md"
-edition = "2018"
-
-[dependencies]
-atty = "0.2.14"
+categories = ["command-line-interface"]
+license = "Apache-2.0"
+repository = "https://github.com/zkat/supports-unicode"
+[dependencies.atty]
+version = "0.2.14"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/autocfg/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/autocfg/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,13 +1,24 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
 name = "autocfg"
 version = "1.1.0"
 authors = ["Josh Stone <cuviper@gmail.com>"]
-license = "Apache-2.0 OR MIT"
-repository = "https://github.com/cuviper/autocfg"
+exclude = ["/.github/**", "/bors.toml"]
 description = "Automatic cfg for Rust compiler features"
 readme = "README.md"
 keywords = ["rustc", "build", "autoconf"]
 categories = ["development-tools::build-utils"]
-exclude = ["/.github/**", "/bors.toml"]
+license = "Apache-2.0 OR MIT"
+repository = "https://github.com/cuviper/autocfg"
 
 [dependencies]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/unicode_linebreak/v0_1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/unicode_linebreak/v0_1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,16 +1,27 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
+edition = "2018"
 name = "unicode-linebreak"
 version = "0.1.2"
 authors = ["Axel Forsman <axelsfor@gmail.com>"]
+include = ["src/**/*", "build.rs", "LineBreak.txt", "LICENSE"]
 description = "Implementation of the Unicode Line Breaking Algorithm"
 homepage = "https://github.com/axelf4/unicode-linebreak"
-repository = "https://github.com/axelf4/unicode-linebreak"
 readme = "README.md"
 keywords = ["unicode", "text", "layout"]
 categories = ["internationalization"]
 license = "Apache-2.0"
-include = ["src/**/*", "build.rs", "LineBreak.txt", "LICENSE"]
-edition = "2018"
-
-[build-dependencies]
-regex = "1"
+repository = "https://github.com/axelf4/unicode-linebreak"
+[build-dependencies.regex]
+version = "1"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/strsim/v0_10/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/strsim/v0_10/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,15 +1,24 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g. crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
 name = "strsim"
 version = "0.10.0"
 authors = ["Danny Guo <danny@dannyguo.com>"]
-description = """
-Implementations of string similarity metrics. Includes Hamming, Levenshtein,
-OSA, Damerau-Levenshtein, Jaro, Jaro-Winkler, and Sørensen-Dice.
-"""
-license = "MIT"
+exclude = ["/.github", "/dev"]
+description = "Implementations of string similarity metrics. Includes Hamming, Levenshtein,\nOSA, Damerau-Levenshtein, Jaro, Jaro-Winkler, and Sørensen-Dice.\n"
+homepage = "https://github.com/dguo/strsim-rs"
+documentation = "https://docs.rs/strsim/"
 readme = "README.md"
 keywords = ["string", "similarity", "Hamming", "Levenshtein", "Jaro"]
-homepage = "https://github.com/dguo/strsim-rs"
+license = "MIT"
 repository = "https://github.com/dguo/strsim-rs"
-documentation = "https://docs.rs/strsim/"
-exclude = ["/.github", "/dev"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/autocxx_macro/v0_22/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/autocxx_macro/v0_22/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,31 +1,45 @@
-# Copyright 2020 Google LLC
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
 #
-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
-# https://www.apache.org/licenses/LICENSE-2.0> or the MIT license
-# <LICENSE-MIT or https://opensource.org/licenses/MIT>, at your
-# option. This file may not be copied, modified, or distributed
-# except according to those terms.
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
 
 [package]
+edition = "2021"
 name = "autocxx-macro"
 version = "0.22.4"
 authors = ["Adrian Taylor <adetaylor@chromium.org>"]
-license = "MIT OR Apache-2.0"
 description = "Safe autogenerated interop between Rust and C++"
-repository = "https://github.com/google/autocxx"
-edition = "2021"
+readme = "README.md"
 keywords = ["ffi"]
-categories = ["development-tools::ffi", "api-bindings"]
+categories = [
+    "development-tools::ffi",
+    "api-bindings",
+]
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/google/autocxx"
+resolver = "2"
 
 [lib]
 proc-macro = true
 
-[dependencies]
-autocxx-parser = { path="../parser", version="=0.22.4" }
-proc-macro-error = "1.0"
-proc-macro2 = "1.0.11"
-quote = "1.0"
+[dependencies.autocxx-parser]
+version = "=0.22.4"
+
+[dependencies.proc-macro-error]
+version = "1.0"
+
+[dependencies.proc-macro2]
+version = "1.0.11"
+
+[dependencies.quote]
+version = "1.0"
 
 [dependencies.syn]
 version = "1.0"
-features = [ "full" ]
+features = ["full"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/textwrap/v0_15/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/textwrap/v0_15/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,16 +1,29 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
 name = "textwrap"
 version = "0.15.0"
 authors = ["Martin Geisler <martin@geisler.net>"]
+exclude = [".github/", ".gitignore", "benches/", "examples/", "fuzz/", "images/"]
 description = "Powerful library for word wrapping, indenting, and dedenting strings"
 documentation = "https://docs.rs/textwrap/"
-repository = "https://github.com/mgeisler/textwrap"
 readme = "README.md"
 keywords = ["text", "formatting", "wrap", "typesetting", "hyphenation"]
 categories = ["text-processing", "command-line-interface"]
 license = "MIT"
-edition = "2018"
-exclude = [".github/", ".gitignore", "benches/", "examples/", "fuzz/", "images/"]
+repository = "https://github.com/mgeisler/textwrap"
+[package.metadata.docs.rs]
+all-features = true
 
 [[example]]
 name = "hyphenation"
@@ -22,34 +35,48 @@
 path = "examples/termwidth.rs"
 required-features = ["terminal_size"]
 
-[package.metadata.docs.rs]
-all-features = true
-
 [[bench]]
 name = "linear"
-harness = false
 path = "benches/linear.rs"
+harness = false
 
 [[bench]]
 name = "indent"
-harness = false
 path = "benches/indent.rs"
+harness = false
+[dependencies.hyphenation]
+version = "0.8.4"
+features = ["embed_en-us"]
+optional = true
+
+[dependencies.smawk]
+version = "0.3.1"
+optional = true
+
+[dependencies.terminal_size]
+version = "0.1.17"
+optional = true
+
+[dependencies.unicode-linebreak]
+version = "0.1.2"
+optional = true
+
+[dependencies.unicode-width]
+version = "0.1.9"
+optional = true
+[dev-dependencies.criterion]
+version = "0.3.5"
 
-[features]
-default = ["unicode-linebreak", "unicode-width", "smawk"]
+[dev-dependencies.lipsum]
+version = "0.8.0"
+
+[dev-dependencies.unic-emoji-char]
+version = "0.9.0"
 
-[dependencies]
-hyphenation = { version = "0.8.4", optional = true, features = ["embed_en-us"] }
-smawk = { version = "0.3.1", optional = true }
-terminal_size = { version = "0.1.17", optional = true }
-unicode-linebreak = { version = "0.1.2", optional = true }
-unicode-width = { version = "0.1.9", optional = true }
-
-[dev-dependencies]
-criterion = "0.3.5"
-lipsum = "0.8.0"
-unic-emoji-char = "0.9.0"
-version-sync = "0.9.4"
+[dev-dependencies.version-sync]
+version = "0.9.4"
 
-[target.'cfg(unix)'.dev-dependencies]
-termion = "1.5.6"
+[features]
+default = ["unicode-linebreak", "unicode-width", "smawk"]
+[target."cfg(unix)".dev-dependencies.termion]
+version = "1.5.6"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/proc_macro2/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/proc_macro2/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,56 +1,60 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
+rust-version = "1.31"
 name = "proc-macro2"
-version = "1.0.43" # remember to update html_root_url
-authors = ["David Tolnay <dtolnay@gmail.com>", "Alex Crichton <alex@alexcrichton.com>"]
+version = "1.0.43"
+authors = [
+    "David Tolnay <dtolnay@gmail.com>",
+    "Alex Crichton <alex@alexcrichton.com>",
+]
 autobenches = false
-categories = ["development-tools::procedural-macro-helpers"]
 description = "A substitute implementation of the compiler's `proc_macro` API to decouple token-based libraries from the procedural macro use case."
 documentation = "https://docs.rs/proc-macro2"
-edition = "2018"
-keywords = ["macros", "syn"]
-license = "MIT OR Apache-2.0"
 readme = "README.md"
+keywords = [
+    "macros",
+    "syn",
+]
+categories = ["development-tools::procedural-macro-helpers"]
+license = "MIT OR Apache-2.0"
 repository = "https://github.com/dtolnay/proc-macro2"
-rust-version = "1.31"
 
 [package.metadata.docs.rs]
-rustc-args = ["--cfg", "procmacro2_semver_exempt"]
-rustdoc-args = ["--cfg", "procmacro2_semver_exempt", "--cfg", "doc_cfg"]
+rustc-args = [
+    "--cfg",
+    "procmacro2_semver_exempt",
+]
+rustdoc-args = [
+    "--cfg",
+    "procmacro2_semver_exempt",
+    "--cfg",
+    "doc_cfg",
+]
 targets = ["x86_64-unknown-linux-gnu"]
 
 [package.metadata.playground]
 features = ["span-locations"]
 
-[dependencies]
-unicode-ident = "1.0"
+[dependencies.unicode-ident]
+version = "1.0"
 
-[dev-dependencies]
-quote = { version = "1.0", default_features = false }
+[dev-dependencies.quote]
+version = "1.0"
+default_features = false
 
 [features]
-proc-macro = []
 default = ["proc-macro"]
-
-# Expose methods Span::start and Span::end which give the line/column location
-# of a token.
-span-locations = []
-
-# This feature no longer means anything.
 nightly = []
-
-[workspace]
-members = ["benches/bench-libproc-macro", "tests/ui"]
-
-[patch.crates-io]
-# Our doc tests depend on quote which depends on proc-macro2. Without this line,
-# the proc-macro2 dependency of quote would be the released version of
-# proc-macro2. Quote would implement its traits for types from that proc-macro2,
-# meaning impls would be missing when tested against types from the local
-# proc-macro2.
-#
-# GitHub Actions builds that are in progress at the time that you publish may
-# spuriously fail. This is because they'll be building a local proc-macro2 which
-# carries the second-most-recent version number, pulling in quote which resolves
-# to a dependency on the just-published most recent version number. Thus the
-# patch will fail to apply because the version numbers are different.
-proc-macro2 = { path = "." }
+proc-macro = []
+span-locations = []
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/miette/v4/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/miette/v4/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,59 +1,93 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
 name = "miette"
 version = "4.3.0"
 authors = ["Kat Marchán <kzm@zkat.tech>"]
+exclude = ["images/", "tests/", "miette-derive/"]
 description = "Fancy diagnostic reporting library and protocol for us mere mortals who aren't compiler hackers."
-categories = ["rust-patterns"]
-repository = "https://github.com/zkat/miette"
 documentation = "https://docs.rs/miette"
-license = "Apache-2.0"
 readme = "README.md"
-edition = "2018"
-exclude = ["images/", "tests/", "miette-derive/"]
+categories = ["rust-patterns"]
+license = "Apache-2.0"
+repository = "https://github.com/zkat/miette"
+[package.metadata.docs.rs]
+all-features = true
+[dependencies.atty]
+version = "0.2.14"
+optional = true
 
-[dependencies]
-thiserror = "1.0.26"
-miette-derive = { path = "miette-derive", version = "=4.3.0"}
-once_cell = "1.8.0"
-unicode-width = "0.1.9"
-
-owo-colors = { version = "3.0.0", optional = true }
-atty = { version = "0.2.14", optional = true }
-textwrap = { version = "0.15.0", optional = true }
-supports-hyperlinks = { version = "1.1.0", optional = true }
-supports-color = { version = "1.0.4", optional = true }
-supports-unicode = { version = "1.0.0", optional = true }
-backtrace = { version = "0.3.61", optional = true }
-terminal_size = { version = "0.1.17", optional = true }
-
-[dev-dependencies]
-semver = "1.0.4"
-
-# Eyre devdeps
-futures = { version = "0.3", default-features = false }
-indenter = "0.3.0"
-rustversion = "1.0"
-trybuild = { version = "1.0.19", features = ["diff"] }
-syn = { version = "1.0", features = ["full"] }
+[dependencies.backtrace]
+version = "0.3.61"
+optional = true
 
-[features]
-default = []
-fancy-no-backtrace = [
-    "owo-colors",
-    "atty",
-    "textwrap",
-    "terminal_size",
-    "supports-hyperlinks",
-    "supports-color",
-    "supports-unicode",
-]
-fancy = [
-    "fancy-no-backtrace",
-    "backtrace",
-]
+[dependencies.miette-derive]
+version = "=4.3.0"
 
-[workspace]
-members = ["miette-derive"]
+[dependencies.once_cell]
+version = "1.8.0"
 
-[package.metadata.docs.rs]
-all-features = true
+[dependencies.owo-colors]
+version = "3.0.0"
+optional = true
+
+[dependencies.supports-color]
+version = "1.0.4"
+optional = true
+
+[dependencies.supports-hyperlinks]
+version = "1.1.0"
+optional = true
+
+[dependencies.supports-unicode]
+version = "1.0.0"
+optional = true
+
+[dependencies.terminal_size]
+version = "0.1.17"
+optional = true
+
+[dependencies.textwrap]
+version = "0.15.0"
+optional = true
+
+[dependencies.thiserror]
+version = "1.0.26"
+
+[dependencies.unicode-width]
+version = "0.1.9"
+[dev-dependencies.futures]
+version = "0.3"
+default-features = false
+
+[dev-dependencies.indenter]
+version = "0.3.0"
+
+[dev-dependencies.rustversion]
+version = "1.0"
+
+[dev-dependencies.semver]
+version = "1.0.4"
+
+[dev-dependencies.syn]
+version = "1.0"
+features = ["full"]
+
+[dev-dependencies.trybuild]
+version = "1.0.19"
+features = ["diff"]
+
+[features]
+default = []
+fancy = ["fancy-no-backtrace", "backtrace"]
+fancy-no-backtrace = ["owo-colors", "atty", "textwrap", "terminal_size", "supports-hyperlinks", "supports-color", "supports-unicode"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/quote/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/quote/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,29 +1,39 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
+rust-version = "1.31"
 name = "quote"
-version = "1.0.10" # don't forget to update html_root_url, version in readme for breaking changes
+version = "1.0.10"
 authors = ["David Tolnay <dtolnay@gmail.com>"]
-license = "MIT OR Apache-2.0"
 description = "Quasi-quoting macro quote!(...)"
-repository = "https://github.com/dtolnay/quote"
 documentation = "https://docs.rs/quote/"
+readme = "README.md"
 keywords = ["syn"]
 categories = ["development-tools::procedural-macro-helpers"]
-readme = "README.md"
-edition = "2018"
-rust-version = "1.31"
-
-[dependencies]
-proc-macro2 = { version = "1.0.20", default-features = false }
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/dtolnay/quote"
+[package.metadata.docs.rs]
+targets = ["x86_64-unknown-linux-gnu"]
+[dependencies.proc-macro2]
+version = "1.0.20"
+default-features = false
+[dev-dependencies.rustversion]
+version = "1.0"
 
-[dev-dependencies]
-rustversion = "1.0"
-trybuild = { version = "1.0.19", features = ["diff"] }
+[dev-dependencies.trybuild]
+version = "1.0.19"
+features = ["diff"]
 
 [features]
 default = ["proc-macro"]
-# Disabling the proc-macro feature removes the dynamic library dependency on
-# libproc_macro in the rustc compiler.
 proc-macro = ["proc-macro2/proc-macro"]
-
-[package.metadata.docs.rs]
-targets = ["x86_64-unknown-linux-gnu"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/heck/v0_4/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/heck/v0_4/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,20 +1,31 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
-authors = ["Without Boats <woboats@gmail.com>"]
+edition = "2018"
 name = "heck"
 version = "0.4.0"
-edition = "2018"
-license = "MIT OR Apache-2.0"
+authors = ["Without Boats <woboats@gmail.com>"]
+include = ["src/**/*", "LICENSE-*", "README.md", "CHANGELOG.md"]
 description = "heck is a case conversion library."
 homepage = "https://github.com/withoutboats/heck"
-repository = "https://github.com/withoutboats/heck"
 documentation = "https://docs.rs/heck"
-keywords = ["string", "case", "camel", "snake", "unicode"]
 readme = "README.md"
-include = ["src/**/*", "LICENSE-*", "README.md", "CHANGELOG.md"]
+keywords = ["string", "case", "camel", "snake", "unicode"]
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/withoutboats/heck"
+[dependencies.unicode-segmentation]
+version = "1.2.0"
+optional = true
 
 [features]
 default = []
 unicode = ["unicode-segmentation"]
-
-[dependencies]
-unicode-segmentation = { version = "1.2.0", optional = true }
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/rustc_hash/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/rustc_hash/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,13 +1,25 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
 name = "rustc-hash"
 version = "1.1.0"
 authors = ["The Rust Project Developers"]
 description = "speed, non-cryptographic hash used in rustc"
-license = "Apache-2.0/MIT"
 readme = "README.md"
 keywords = ["hash", "fxhash", "rustc"]
+license = "Apache-2.0/MIT"
 repository = "https://github.com/rust-lang-nursery/rustc-hash"
 
 [features]
-std = []
 default = ["std"]
+std = []
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/winapi/v0_3/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/winapi/v0_3/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,136 +1,44 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
 name = "winapi"
 version = "0.3.9"
 authors = ["Peter Atashian <retep998@gmail.com>"]
-license = "MIT/Apache-2.0"
+build = "build.rs"
+include = ["/src/**/*", "/Cargo.toml", "/LICENSE-MIT", "/LICENSE-APACHE", "/build.rs", "/README.md"]
 description = "Raw FFI bindings for all of Windows API."
 documentation = "https://docs.rs/winapi/"
-repository = "https://github.com/retep998/winapi-rs"
 readme = "README.md"
 keywords = ["windows", "ffi", "win32", "com", "directx"]
 categories = ["external-ffi-bindings", "no-std", "os::windows-apis"]
-include = ["/src/**/*", "/Cargo.toml", "/LICENSE-MIT", "/LICENSE-APACHE", "/build.rs", "/README.md"]
-build = "build.rs"
-
+license = "MIT/Apache-2.0"
+repository = "https://github.com/retep998/winapi-rs"
 [package.metadata.docs.rs]
-features = ["everything", "impl-debug", "impl-default"]
 default-target = "x86_64-pc-windows-msvc"
+features = ["everything", "impl-debug", "impl-default"]
 targets = ["aarch64-pc-windows-msvc", "i686-pc-windows-msvc", "x86_64-pc-windows-msvc"]
 
-[target.i686-pc-windows-gnu.dependencies]
-winapi-i686-pc-windows-gnu = { version = "0.4", path = "i686" }
-[target.x86_64-pc-windows-gnu.dependencies]
-winapi-x86_64-pc-windows-gnu = { version = "0.4", path = "x86_64" }
-
 [features]
-debug = ["impl-debug"]
-everything = []
-impl-debug = []
-impl-default = []
-std = []
-#km
-d3dkmthk = []
-#mmos
-#shared
-basetsd = []
-bcrypt = []
-bthdef = []
-bthioctl = []
-bthsdpdef = []
-bugcodes = []
-cderr = []
-cfg = []
-d3d9 = []
-d3d9caps = []
-d3d9types = []
-d3dkmdt = []
-d3dukmdt = []
-dcomptypes = []
-devguid = []
-devpkey = []
-devpropdef = []
-dinputd = []
-dxgi = []
-dxgi1_2 = []
-dxgi1_3 = []
-dxgi1_4 = []
-dxgi1_5 = []
-dxgi1_6 = []
-dxgiformat = []
-dxgitype = []
-enclaveapi = []
-evntprov = []
-evntrace = []
-exdisp = []
-guiddef = []
-hidclass = []
-hidpi = []
-hidsdi = []
-hidusage = []
-ifdef = []
-ifmib = []
-in6addr = []
-inaddr = []
-intsafe = []
-ipifcons = []
-ipmib = []
-iprtrmib = []
-ks = []
-ksmedia = []
-ktmtypes = []
-lmcons = []
-minwindef = []
-mmreg = []
-mprapidef = []
-mstcpip = []
-mswsockdef = []
-netioapi = []
-nldef = []
-ntddndis = []
-ntddscsi = []
-ntddser = []
-ntdef = []
-ntstatus = []
-qos = []
-rpc = []
-rpcdce = []
-rpcndr = []
-sddl = []
-spellcheck = []
-sspi = []
-stralign = []
-tcpestats = []
-tcpmib = []
-transportsettingcommon = []
-tvout = []
-udpmib = []
-usb = []
-usbioctl = []
-usbiodef = []
-usbscan = []
-usbspec = []
-windef = []
-windot11 = []
-windowsx = []
-winerror = []
-winusbio = []
-wlantypes = []
-wmistr = []
-wnnc = []
-ws2def = []
-ws2ipdef = []
-wtypes = []
-wtypesbase = []
-#ucrt
-corecrt = []
-#um
 accctrl = []
 aclapi = []
+activation = []
 adhoc = []
 appmgmt = []
 audioclient = []
 audiosessiontypes = []
 avrt = []
+basetsd = []
+bcrypt = []
 bits = []
 bits10_1 = []
 bits1_5 = []
@@ -143,7 +51,13 @@
 bitsmsg = []
 bluetoothapis = []
 bluetoothleapis = []
+bthdef = []
+bthioctl = []
 bthledef = []
+bthsdpdef = []
+bugcodes = []
+cderr = []
+cfg = []
 cfgmgr32 = []
 cguid = []
 combaseapi = []
@@ -153,6 +67,7 @@
 commdlg = []
 commoncontrols = []
 consoleapi = []
+corecrt = []
 corsym = []
 d2d1 = []
 d2d1_1 = []
@@ -184,9 +99,15 @@
 d3d12 = []
 d3d12sdklayers = []
 d3d12shader = []
+d3d9 = []
+d3d9caps = []
+d3d9types = []
 d3dcommon = []
 d3dcompiler = []
 d3dcsx = []
+d3dkmdt = []
+d3dkmthk = []
+d3dukmdt = []
 d3dx10core = []
 d3dx10math = []
 d3dx10mesh = []
@@ -197,13 +118,19 @@
 dcommon = []
 dcomp = []
 dcompanimation = []
+dcomptypes = []
 dde = []
 ddraw = []
 ddrawi = []
 ddrawint = []
+debug = ["impl-debug"]
 debugapi = []
+devguid = []
 devicetopology = []
+devpkey = []
+devpropdef = []
 dinput = []
+dinputd = []
 dispex = []
 dmksctl = []
 dmusicc = []
@@ -223,37 +150,73 @@
 dwrite_3 = []
 dxdiag = []
 dxfile = []
+dxgi = []
+dxgi1_2 = []
+dxgi1_3 = []
+dxgi1_4 = []
+dxgi1_5 = []
+dxgi1_6 = []
 dxgidebug = []
+dxgiformat = []
+dxgitype = []
 dxva2api = []
 dxvahd = []
 eaptypes = []
+enclaveapi = []
 endpointvolume = []
 errhandlingapi = []
+everything = []
 evntcons = []
+evntprov = []
+evntrace = []
+excpt = []
+exdisp = []
 fibersapi = []
 fileapi = []
 functiondiscoverykeys_devpkey = []
-"gl-gl" = []
+gl-gl = []
+guiddef = []
 handleapi = []
 heapapi = []
+hidclass = []
+hidpi = []
+hidsdi = []
+hidusage = []
 highlevelmonitorconfigurationapi = []
+hstring = []
 http = []
+ifdef = []
+ifmib = []
 imm = []
+impl-debug = []
+impl-default = []
+in6addr = []
+inaddr = []
+inspectable = []
 interlockedapi = []
+intsafe = []
 ioapiset = []
 ipexport = []
 iphlpapi = []
+ipifcons = []
+ipmib = []
+iprtrmib = []
 iptypes = []
 jobapi = []
 jobapi2 = []
 knownfolders = []
+ks = []
+ksmedia = []
+ktmtypes = []
 ktmw32 = []
 l2cmn = []
 libloaderapi = []
+limits = []
 lmaccess = []
 lmalert = []
 lmapibuf = []
 lmat = []
+lmcons = []
 lmdfs = []
 lmerrlog = []
 lmjoin = []
@@ -271,20 +234,32 @@
 memoryapi = []
 minschannel = []
 minwinbase = []
+minwindef = []
 mmdeviceapi = []
 mmeapi = []
+mmreg = []
 mmsystem = []
+mprapidef = []
 msaatext = []
 mscat = []
 mschapp = []
 mssip = []
+mstcpip = []
 mswsock = []
+mswsockdef = []
 namedpipeapi = []
 namespaceapi = []
 nb30 = []
 ncrypt = []
+netioapi = []
+nldef = []
+ntddndis = []
+ntddscsi = []
+ntddser = []
+ntdef = []
 ntlsa = []
 ntsecapi = []
+ntstatus = []
 oaidl = []
 objbase = []
 objidl = []
@@ -316,11 +291,18 @@
 propsys = []
 prsht = []
 psapi = []
+qos = []
 realtimeapiset = []
 reason = []
 restartmanager = []
 restrictederrorinfo = []
 rmxfguid = []
+roapi = []
+robuffer = []
+roerrorapi = []
+rpc = []
+rpcdce = []
+rpcndr = []
 rtinfo = []
 sapi = []
 sapi51 = []
@@ -328,6 +310,7 @@
 sapiddk = []
 sapiddk51 = []
 schannel = []
+sddl = []
 securityappcontainer = []
 securitybaseapi = []
 servprov = []
@@ -340,11 +323,15 @@
 shtypes = []
 softpub = []
 spapidef = []
+spellcheck = []
 sporder = []
 sql = []
 sqlext = []
 sqltypes = []
 sqlucode = []
+sspi = []
+std = []
+stralign = []
 stringapiset = []
 strmif = []
 subauth = []
@@ -352,19 +339,31 @@
 sysinfoapi = []
 systemtopologyapi = []
 taskschd = []
+tcpestats = []
+tcpmib = []
 textstor = []
 threadpoolapiset = []
 threadpoollegacyapiset = []
 timeapi = []
 timezoneapi = []
 tlhelp32 = []
+transportsettingcommon = []
+tvout = []
+udpmib = []
 unknwnbase = []
 urlhist = []
 urlmon = []
+usb = []
+usbioctl = []
+usbiodef = []
+usbscan = []
+usbspec = []
 userenv = []
 usp10 = []
 utilapiset = []
 uxtheme = []
+vadefs = []
+vcruntime = []
 vsbackup = []
 vss = []
 vsserror = []
@@ -383,8 +382,12 @@
 wincontypes = []
 wincred = []
 wincrypt = []
+windef = []
+windot11 = []
 windowsceip = []
+windowsx = []
 winefs = []
+winerror = []
 winevt = []
 wingdi = []
 winhttp = []
@@ -400,32 +403,32 @@
 winsmcrd = []
 winsock2 = []
 winspool = []
+winstring = []
 winsvc = []
 wintrust = []
 winusb = []
+winusbio = []
 winuser = []
 winver = []
 wlanapi = []
 wlanihv = []
 wlanihvtypes = []
+wlantypes = []
 wlclient = []
+wmistr = []
+wnnc = []
 wow64apiset = []
 wpdmtpextensions = []
 ws2bth = []
+ws2def = []
+ws2ipdef = []
 ws2spi = []
 ws2tcpip = []
 wtsapi32 = []
+wtypes = []
+wtypesbase = []
 xinput = []
-#vc
-excpt = []
-limits = []
-vadefs = []
-vcruntime = []
-#winrt
-activation = []
-hstring = []
-inspectable = []
-roapi = []
-robuffer = []
-roerrorapi = []
-winstring = []
+[target.i686-pc-windows-gnu.dependencies.winapi-i686-pc-windows-gnu]
+version = "0.4"
+[target.x86_64-pc-windows-gnu.dependencies.winapi-x86_64-pc-windows-gnu]
+version = "0.4"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/libloading/v0_7/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/libloading/v0_7/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,33 +1,36 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+rust-version = "1.40.0"
 name = "libloading"
-# When bumping
-# * Don’t forget to add an entry to `src/changelog.rs`
-# * If bumping to an incompatible version, adjust the documentation in `src/lib.rs`
 version = "0.7.3"
 authors = ["Simonas Kazlauskas <libloading@kazlauskas.me>"]
-license = "ISC"
-repository = "https://github.com/nagisa/rust_libloading/"
+description = "Bindings around the platform's dynamic library loading primitives with greatly improved memory safety."
 documentation = "https://docs.rs/libloading/"
 readme = "README.mkd"
-description = "Bindings around the platform's dynamic library loading primitives with greatly improved memory safety."
 keywords = ["dlopen", "load", "shared", "dylib"]
 categories = ["api-bindings"]
-rust-version = "1.40.0"
-
-[target.'cfg(windows)'.dependencies.winapi]
-version = "0.3"
-features = [
-    "errhandlingapi",
-    "libloaderapi",
-]
-
-[target.'cfg(unix)'.dependencies.cfg-if]
-version = "1"
-
-[dev-dependencies]
-libc = "0.2"
-static_assertions = "1.1"
-
+license = "ISC"
+repository = "https://github.com/nagisa/rust_libloading/"
 [package.metadata.docs.rs]
 all-features = true
 rustdoc-args = ["--cfg", "libloading_docs"]
+[dev-dependencies.libc]
+version = "0.2"
+
+[dev-dependencies.static_assertions]
+version = "1.1"
+[target."cfg(unix)".dependencies.cfg-if]
+version = "1"
+[target."cfg(windows)".dependencies.winapi]
+version = "0.3"
+features = ["errhandlingapi", "libloaderapi"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/atty/v0_2/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/atty/v0_2/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,26 +1,34 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
 name = "atty"
 version = "0.2.14"
 authors = ["softprops <d.tangren@gmail.com>"]
+exclude = ["/.travis.yml", "/appveyor.yml"]
 description = "A simple interface for querying atty"
-documentation = "http://softprops.github.io/atty"
 homepage = "https://github.com/softprops/atty"
-repository = "https://github.com/softprops/atty"
+documentation = "http://softprops.github.io/atty"
+readme = "README.md"
 keywords = ["terminal", "tty", "isatty"]
 license = "MIT"
-readme = "README.md"
-exclude = ["/.travis.yml", "/appveyor.yml"]
-
-[badges]
-travis-ci = { repository = "softprops/atty" }
-
-[target.'cfg(unix)'.dependencies]
-libc = { version = "0.2", default-features = false }
-
-[target.'cfg(target_os = "hermit")'.dependencies]
-hermit-abi = "0.1.6"
-
-[target.'cfg(windows)'.dependencies.winapi]
+repository = "https://github.com/softprops/atty"
+[target."cfg(target_os = \"hermit\")".dependencies.hermit-abi]
+version = "0.1.6"
+[target."cfg(unix)".dependencies.libc]
+version = "0.2"
+default-features = false
+[target."cfg(windows)".dependencies.winapi]
 version = "0.3"
 features = ["consoleapi", "processenv", "minwinbase", "minwindef", "winbase"]
-
+[badges.travis-ci]
+repository = "softprops/atty"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/itertools/v0_9/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/itertools/v0_9/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,47 +1,35 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
+edition = "2018"
 name = "itertools"
 version = "0.9.0"
-
-license = "MIT/Apache-2.0"
-repository = "https://github.com/bluss/rust-itertools"
-documentation = "https://docs.rs/itertools/"
 authors = ["bluss"]
-
+exclude = ["/bors.toml"]
 description = "Extra iterator adaptors, iterator methods, free functions, and macros."
-
+documentation = "https://docs.rs/itertools/"
 keywords = ["iterator", "data-structure", "zip", "product", "group-by"]
 categories = ["algorithms", "rust-patterns"]
-exclude = ["/bors.toml"]
-
-edition = "2018"
-
+license = "MIT/Apache-2.0"
+repository = "https://github.com/bluss/rust-itertools"
 [package.metadata.release]
 no-dev-version = true
+[profile.bench]
+debug = true
 
 [lib]
-bench = false
 test = false
-
-[dependencies]
-either = { version = "1.0", default-features = false }
-
-[dev-dependencies]
-rand = "0.7"
-criterion = "=0.3.0" # TODO update criterion version once it becomes compatible with our minimum required Rust verision or bump minimum required rust version
-
-[dev-dependencies.quickcheck]
-version = "0.9"
-default-features = false
-
-[dev-dependencies.permutohedron]
-version = "0.2"
-
-[features]
-default = ["use_std"]
-use_std = []
-
-[profile]
-bench = { debug = true }
+bench = false
 
 [[bench]]
 name = "tuple_combinations"
@@ -66,3 +54,22 @@
 [[bench]]
 name = "bench1"
 harness = false
+[dependencies.either]
+version = "1.0"
+default-features = false
+[dev-dependencies.criterion]
+version = "=0.3.0"
+
+[dev-dependencies.permutohedron]
+version = "0.2"
+
+[dev-dependencies.quickcheck]
+version = "0.9"
+default-features = false
+
+[dev-dependencies.rand]
+version = "0.7"
+
+[features]
+default = ["use_std"]
+use_std = []
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/itertools/v0_10/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/itertools/v0_10/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,50 +1,36 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
+edition = "2018"
 name = "itertools"
 version = "0.10.3"
-
-license = "MIT/Apache-2.0"
-repository = "https://github.com/rust-itertools/itertools"
-documentation = "https://docs.rs/itertools/"
 authors = ["bluss"]
-readme = "README.md"
-
+exclude = ["/bors.toml"]
 description = "Extra iterator adaptors, iterator methods, free functions, and macros."
-
+documentation = "https://docs.rs/itertools/"
+readme = "README.md"
 keywords = ["iterator", "data-structure", "zip", "product", "group-by"]
 categories = ["algorithms", "rust-patterns"]
-exclude = ["/bors.toml"]
-
-edition = "2018"
-
+license = "MIT/Apache-2.0"
+repository = "https://github.com/rust-itertools/itertools"
 [package.metadata.release]
 no-dev-version = true
+[profile.bench]
+debug = true
 
 [lib]
-bench = false
 test = false
-
-[dependencies]
-either = { version = "1.0", default-features = false }
-
-[dev-dependencies]
-rand = "0.7"
-criterion = "=0" # TODO how could this work with our minimum supported Rust version?
-paste = "1.0.0" # Used in test_std to instantiate generic tests
-
-[dev-dependencies.quickcheck]
-version = "0.9"
-default-features = false
-
-[dev-dependencies.permutohedron]
-version = "0.2"
-
-[features]
-default = ["use_std"]
-use_std = ["use_alloc"]
-use_alloc = []
-
-[profile]
-bench = { debug = true }
+bench = false
 
 [[bench]]
 name = "tuple_combinations"
@@ -77,3 +63,26 @@
 [[bench]]
 name = "powerset"
 harness = false
+[dependencies.either]
+version = "1.0"
+default-features = false
+[dev-dependencies.criterion]
+version = "=0"
+
+[dev-dependencies.paste]
+version = "1.0.0"
+
+[dev-dependencies.permutohedron]
+version = "0.2"
+
+[dev-dependencies.quickcheck]
+version = "0.9"
+default-features = false
+
+[dev-dependencies.rand]
+version = "0.7"
+
+[features]
+default = ["use_std"]
+use_alloc = []
+use_std = ["use_alloc"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/autocxx_parser/v0_22/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/autocxx_parser/v0_22/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,36 +1,65 @@
-# Copyright 2020 Google LLC
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
 #
-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
-# https://www.apache.org/licenses/LICENSE-2.0> or the MIT license
-# <LICENSE-MIT or https://opensource.org/licenses/MIT>, at your
-# option. This file may not be copied, modified, or distributed
-# except according to those terms.
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
 
 [package]
+edition = "2021"
 name = "autocxx-parser"
 version = "0.22.4"
 authors = ["Adrian Taylor <adetaylor@chromium.org>"]
-license = "MIT OR Apache-2.0"
 description = "Safe autogenerated interop between Rust and C++"
-repository = "https://github.com/google/autocxx"
-edition = "2021"
+readme = "README.md"
 keywords = ["ffi"]
-categories = ["development-tools::ffi", "api-bindings"]
+categories = [
+    "development-tools::ffi",
+    "api-bindings",
+]
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/google/autocxx"
+resolver = "2"
+
+[dependencies.indexmap]
+version = "1.8"
+features = ["serde"]
 
-[dependencies]
-log = "0.4"
-proc-macro2 = "1.0"
-quote = "1.0"
-serde = { version = "1.0", features = [ "derive" ]}
-thiserror = "1.0"
-once_cell = "1.10"
-itertools = "0.10.3"
-indexmap = { version="1.8", features = ["serde"]}
-serde_json = "1.0"
+[dependencies.itertools]
+version = "0.10.3"
+
+[dependencies.log]
+version = "0.4"
+
+[dependencies.once_cell]
+version = "1.10"
+
+[dependencies.proc-macro2]
+version = "1.0"
+
+[dependencies.quote]
+version = "1.0"
+
+[dependencies.serde]
+version = "1.0"
+features = ["derive"]
+
+[dependencies.serde_json]
+version = "1.0"
 
 [dependencies.syn]
 version = "1.0.39"
-features = [ "full", "extra-traits" ]
+features = [
+    "full",
+    "extra-traits",
+]
+
+[dependencies.thiserror]
+version = "1.0"
 
 [features]
 reproduction_case = []
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/shlex/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/shlex/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,18 +1,24 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
 name = "shlex"
 version = "1.1.0"
-authors = [
-    "comex <comexk@gmail.com>",
-    "Fenhl <fenhl@fenhl.net>"
-]
+authors = ["comex <comexk@gmail.com>", "Fenhl <fenhl@fenhl.net>"]
+description = "Split a string into shell words, like Python's shlex."
+categories = ["command-line-interface", "parser-implementations"]
 license = "MIT OR Apache-2.0"
 repository = "https://github.com/comex/rust-shlex"
-description = "Split a string into shell words, like Python's shlex."
-categories = [
-    "command-line-interface",
-    "parser-implementations"
-]
 
 [features]
-std = []
 default = ["std"]
+std = []
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/prettyplease/v0_1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/prettyplease/v0_1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,29 +1,44 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2021"
+rust-version = "1.56"
 name = "prettyplease"
 version = "0.1.19"
 authors = ["David Tolnay <dtolnay@gmail.com>"]
+links = "prettyplease01"
+exclude = ["cargo-expand"]
 autoexamples = false
-categories = ["development-tools"]
 description = "A minimal `syn` syntax tree pretty-printer"
 documentation = "https://docs.rs/prettyplease"
-edition = "2021"
-exclude = ["cargo-expand"]
+readme = "README.md"
 keywords = ["rustfmt"]
+categories = ["development-tools"]
 license = "MIT OR Apache-2.0"
-links = "prettyplease01"
-readme = "README.md"
 repository = "https://github.com/dtolnay/prettyplease"
-rust-version = "1.56"
 
-[features]
-verbatim = ["syn/parsing"]
+[dependencies.proc-macro2]
+version = "1.0"
+default-features = false
 
-[dependencies]
-proc-macro2 = { version = "1.0", default-features = false }
-syn = { version = "1.0.90", default-features = false, features = ["full"] }
+[dependencies.syn]
+version = "1.0.90"
+features = ["full"]
+default-features = false
 
-[dev-dependencies]
-syn = { version = "1.0.90", default-features = false, features = ["parsing"] }
+[dev-dependencies.syn]
+version = "1.0.90"
+features = ["parsing"]
+default-features = false
 
-[workspace]
-members = ["cargo-expand/update", "examples/update"]
+[features]
+verbatim = ["syn/parsing"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/gimli/v0_26/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/gimli/v0_26/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,61 +1,34 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
+edition = "2018"
 name = "gimli"
 version = "0.26.1"
-categories = ["development-tools::debugging", "development-tools::profiling", "parser-implementations"]
+exclude = ["/ci/*", "/releases/*", "/.github"]
 description = "A library for reading and writing the DWARF debugging format."
 documentation = "https://docs.rs/gimli"
-edition = "2018"
-exclude = ["/ci/*", "/releases/*", "/.github"]
+readme = "./README.md"
 keywords = ["DWARF", "debug", "ELF", "eh_frame"]
+categories = ["development-tools::debugging", "development-tools::profiling", "parser-implementations"]
 license = "Apache-2.0/MIT"
-readme = "./README.md"
 repository = "https://github.com/gimli-rs/gimli"
-
-[badges]
-travis-ci = { repository = "gimli-rs/gimli" }
-coveralls = { repository = "gimli-rs/gimli" }
-
-[dependencies]
-fallible-iterator = { version = "0.2.0", default-features = false, optional = true }
-indexmap = { version = "1.0.2", optional = true }
-stable_deref_trait = { version = "1.1.0", default-features = false, optional = true }
-
-# Internal feature, only used when building as part of libstd, not part of the
-# stable interface of this crate.
-core = { version = '1.0.0', optional = true, package = 'rustc-std-workspace-core' }
-alloc = { version = '1.0.0', optional = true, package = 'rustc-std-workspace-alloc' }
-compiler_builtins = { version = '0.1.2', optional = true }
-
-[dev-dependencies]
-crossbeam = "0.8"
-getopts = "0.2"
-memmap = "0.7"
-num_cpus = "1"
-object = { version = "0.27.1", features = ["wasm"] }
-rayon = "1.0"
-regex = "1"
-test-assembler = "0.1.3"
-typed-arena = "2"
-
-[features]
-read-core = []
-read = ["read-core"]
-endian-reader = ["read", "stable_deref_trait"]
-write = ["indexmap"]
-std = ["fallible-iterator/std", "stable_deref_trait/std"]
-default = ["read", "write", "std", "fallible-iterator", "endian-reader"]
-
-# Internal feature, only used when building as part of libstd, not part of the
-# stable interface of this crate.
-rustc-dep-of-std = ['core', 'alloc', 'compiler_builtins']
-
-[profile.test]
-split-debuginfo = 'packed'
-
 [profile.bench]
-debug = true
 codegen-units = 1
-split-debuginfo = 'packed'
+debug = true
+split-debuginfo = "packed"
+
+[profile.test]
+split-debuginfo = "packed"
 
 [[example]]
 name = "simple"
@@ -72,3 +45,71 @@
 [[example]]
 name = "dwarf-validate"
 required-features = ["read", "std"]
+[dependencies.alloc]
+version = "1.0.0"
+optional = true
+package = "rustc-std-workspace-alloc"
+
+[dependencies.compiler_builtins]
+version = "0.1.2"
+optional = true
+
+[dependencies.core]
+version = "1.0.0"
+optional = true
+package = "rustc-std-workspace-core"
+
+[dependencies.fallible-iterator]
+version = "0.2.0"
+optional = true
+default-features = false
+
+[dependencies.indexmap]
+version = "1.0.2"
+optional = true
+
+[dependencies.stable_deref_trait]
+version = "1.1.0"
+optional = true
+default-features = false
+[dev-dependencies.crossbeam]
+version = "0.8"
+
+[dev-dependencies.getopts]
+version = "0.2"
+
+[dev-dependencies.memmap]
+version = "0.7"
+
+[dev-dependencies.num_cpus]
+version = "1"
+
+[dev-dependencies.object]
+version = "0.27.1"
+features = ["wasm"]
+
+[dev-dependencies.rayon]
+version = "1.0"
+
+[dev-dependencies.regex]
+version = "1"
+
+[dev-dependencies.test-assembler]
+version = "0.1.3"
+
+[dev-dependencies.typed-arena]
+version = "2"
+
+[features]
+default = ["read", "write", "std", "fallible-iterator", "endian-reader"]
+endian-reader = ["read", "stable_deref_trait"]
+read = ["read-core"]
+read-core = []
+rustc-dep-of-std = ["core", "alloc", "compiler_builtins"]
+std = ["fallible-iterator/std", "stable_deref_trait/std"]
+write = ["indexmap"]
+[badges.coveralls]
+repository = "gimli-rs/gimli"
+
+[badges.travis-ci]
+repository = "gimli-rs/gimli"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/os_str_bytes/v6/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/os_str_bytes/v6/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,33 +1,45 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
+rust-version = "1.52.0"
 name = "os_str_bytes"
 version = "6.0.0"
 authors = ["dylni"]
-edition = "2018"
-rust-version = "1.52.0"
-description = """
-Utilities for converting between byte sequences and platform-native strings
-"""
+exclude = [".*", "/rustfmt.toml", "/tests"]
+description = "Utilities for converting between byte sequences and platform-native strings\n"
 readme = "README.md"
-repository = "https://github.com/dylni/os_str_bytes"
-license = "MIT OR Apache-2.0"
 keywords = ["bytes", "osstr", "osstring", "path", "windows"]
 categories = ["command-line-interface", "development-tools::ffi", "encoding", "os", "rust-patterns"]
-exclude = [".*", "/rustfmt.toml", "/tests"]
-
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/dylni/os_str_bytes"
 [package.metadata.docs.rs]
 all-features = true
 rustc-args = ["--cfg", "os_str_bytes_docs_rs"]
 rustdoc-args = ["--cfg", "os_str_bytes_docs_rs"]
+[dependencies.memchr]
+version = "2.4"
+optional = true
 
-[dependencies]
-memchr = { version = "2.4", optional = true }
-print_bytes = { version = "0.5", optional = true }
-uniquote = { version = "3.0", optional = true }
+[dependencies.print_bytes]
+version = "0.5"
+optional = true
 
-[dev-dependencies]
-getrandom = "0.2"
+[dependencies.uniquote]
+version = "3.0"
+optional = true
+[dev-dependencies.getrandom]
+version = "0.2"
 
 [features]
 default = ["memchr", "raw_os_str"]
-
 raw_os_str = []
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/tempfile/v3/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/tempfile/v3/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,42 +1,43 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
 name = "tempfile"
 version = "3.3.0"
-authors = [
-  "Steven Allen <steven@stebalien.com>",
-  "The Rust Project Developers",
-  "Ashley Mannix <ashleymannix@live.com.au>",
-  "Jason White <jasonaw0@gmail.com>",
-]
-documentation = "https://docs.rs/tempfile"
-edition = "2018"
+authors = ["Steven Allen <steven@stebalien.com>", "The Rust Project Developers", "Ashley Mannix <ashleymannix@live.com.au>", "Jason White <jasonaw0@gmail.com>"]
 exclude = ["/.travis.yml", "/appveyor.yml"]
+description = "A library for managing temporary files and directories."
 homepage = "http://stebalien.com/projects/tempfile-rs"
+documentation = "https://docs.rs/tempfile"
 keywords = ["tempfile", "tmpfile", "filesystem"]
 license = "MIT OR Apache-2.0"
 repository = "https://github.com/Stebalien/tempfile"
-description = "A library for managing temporary files and directories."
-
-[dependencies]
-cfg-if = "1"
-fastrand = "1.6.0"
-remove_dir_all = "0.5"
+[dependencies.cfg-if]
+version = "1"
 
-[target.'cfg(any(unix, target_os = "wasi"))'.dependencies]
-libc = "0.2.27"
+[dependencies.fastrand]
+version = "1.6.0"
 
-[target.'cfg(windows)'.dependencies.winapi]
+[dependencies.remove_dir_all]
+version = "0.5"
+[dev-dependencies.doc-comment]
 version = "0.3"
-features = [
-    "fileapi",
-    "handleapi",
-    "winbase",
-]
-
-[target.'cfg(target_os = "redox")'.dependencies]
-redox_syscall = "0.2.9"
-
-[dev-dependencies]
-doc-comment = "0.3"
 
 [features]
 nightly = []
+[target."cfg(any(unix, target_os = \"wasi\"))".dependencies.libc]
+version = "0.2.27"
+[target."cfg(target_os = \"redox\")".dependencies.redox_syscall]
+version = "0.2.9"
+[target."cfg(windows)".dependencies.winapi]
+version = "0.3"
+features = ["fileapi", "handleapi", "winbase"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/unicode_ident/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/unicode_ident/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,31 +1,55 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
+rust-version = "1.31"
 name = "unicode-ident"
 version = "1.0.3"
 authors = ["David Tolnay <dtolnay@gmail.com>"]
-categories = ["development-tools::procedural-macro-helpers", "no-std"]
 description = "Determine whether characters have the XID_Start or XID_Continue properties according to Unicode Standard Annex #31"
 documentation = "https://docs.rs/unicode-ident"
-edition = "2018"
+readme = "README.md"
 keywords = ["unicode"]
+categories = [
+    "development-tools::procedural-macro-helpers",
+    "no-std",
+]
 license = "(MIT OR Apache-2.0) AND Unicode-DFS-2016"
-readme = "README.md"
 repository = "https://github.com/dtolnay/unicode-ident"
-rust-version = "1.31"
 
-[dev-dependencies]
-criterion = { version = "0.3", default-features = false }
-fst = "0.4"
-rand = { version = "0.8", features = ["small_rng"] }
-roaring = "0.9"
-ucd-trie = { version = "0.1", default-features = false }
-unicode-xid = "0.2"
+[package.metadata.docs.rs]
+targets = ["x86_64-unknown-linux-gnu"]
 
 [[bench]]
 name = "xid"
 harness = false
 
-[workspace]
-members = ["diagram", "generate"]
+[dev-dependencies.criterion]
+version = "0.3"
+default-features = false
 
-[package.metadata.docs.rs]
-targets = ["x86_64-unknown-linux-gnu"]
+[dev-dependencies.fst]
+version = "0.4"
+
+[dev-dependencies.rand]
+version = "0.8"
+features = ["small_rng"]
+
+[dev-dependencies.roaring]
+version = "0.9"
+
+[dev-dependencies.ucd-trie]
+version = "0.1"
+default-features = false
+
+[dev-dependencies.unicode-xid]
+version = "0.2"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/moveit/v0_5/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/moveit/v0_5/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,36 +1,28 @@
-# Copyright 2021 Google LLC
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
 #
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
 #
-#      http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
 
 [package]
+edition = "2018"
 name = "moveit"
 version = "0.5.0"
 authors = ["Miguel Young de la Sota <mcyoung@google.com>"]
-edition = "2018"
-repository = "https://github.com/google/moveit"
-
-keywords = ["ffi", "no_std", "macros", "lifetime", "ownership"]
+description = "A library for safe, in-place construction of Rust (and C++!) objects."
 readme = "README.crates-io.md"
+keywords = ["ffi", "no_std", "macros", "lifetime", "ownership"]
 license = "Apache-2.0"
-description = "A library for safe, in-place construction of Rust (and C++!) objects."
-
-[features]
-alloc = []
-default = ["alloc"]
-
+repository = "https://github.com/google/moveit"
 [dependencies.cxx]
 version = "1.0"
 optional = true
 
-[workspace]
-members = ["cxx-tests"]
+[features]
+alloc = []
+default = ["alloc"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/clap/v3/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/clap/v3/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,43 +1,51 @@
-[workspace]
-members = [
-	"clap_derive",
-	"clap_lex",
-	"clap_complete",
-	"clap_complete_fig",
-	"clap_mangen",
-]
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
 
 [package]
+edition = "2018"
 name = "clap"
 version = "3.1.12"
+include = [
+    "build.rs",
+    "src/**/*",
+    "Cargo.toml",
+    "LICENSE*",
+    "README.md",
+    "benches/**/*",
+    "examples/**/*",
+]
 description = "A simple to use, efficient, and full-featured Command Line Argument Parser"
-repository = "https://github.com/clap-rs/clap"
 documentation = "https://docs.rs/clap/"
-categories = ["command-line-interface"]
+readme = "README.md"
 keywords = [
-	"argument",
-	"cli",
-	"arg",
-	"parser",
-	"parse"
+    "argument",
+    "cli",
+    "arg",
+    "parser",
+    "parse",
 ]
-edition = "2018"
+categories = ["command-line-interface"]
 license = "MIT OR Apache-2.0"
-readme = "README.md"
-include = [
-  "build.rs",
-  "src/**/*",
-  "Cargo.toml",
-  "LICENSE*",
-  "README.md",
-  "benches/**/*",
-  "examples/**/*"
-]
+repository = "https://github.com/clap-rs/clap"
 
 [package.metadata.docs.rs]
 features = ["unstable-doc"]
-rustdoc-args = ["--cfg", "docsrs"]
-cargo-args = ["-Zunstable-options", "-Zrustdoc-scrape-examples=examples"]
+rustdoc-args = [
+    "--cfg",
+    "docsrs",
+]
+cargo-args = [
+    "-Zunstable-options",
+    "-Zrustdoc-scrape-examples=examples",
+]
 
 [package.metadata.playground]
 features = ["unstable-doc"]
@@ -45,104 +53,73 @@
 [package.metadata.release]
 shared-version = true
 tag-name = "v{{version}}"
-pre-release-replacements = [
-  {file="CHANGELOG.md", search="Unreleased", replace="{{version}}", min=1},
-  {file="CHANGELOG.md", search="\\.\\.\\.HEAD", replace="...{{tag_name}}", exactly=1},
-  {file="CHANGELOG.md", search="ReleaseDate", replace="{{date}}", min=1},
-  {file="CHANGELOG.md", search="<!-- next-header -->", replace="<!-- next-header -->\n## [Unreleased] - ReleaseDate\n", exactly=1},
-  {file="CHANGELOG.md", search="<!-- next-url -->", replace="<!-- next-url -->\n[Unreleased]: https://github.com/clap-rs/clap/compare/{{tag_name}}...HEAD", exactly=1},
-  {file="README.md", search="github.com/clap-rs/clap/blob/[^/]+/", replace="github.com/clap-rs/clap/blob/{{tag_name}}/", exactly=13, prerelease = true},
-  {file="README.md", search="version = \"[a-z0-9\\.-]+\"", replace="version = \"{{version}}\"", exactly=1, prerelease = true},
-  {file="src/derive.rs", search="github.com/clap-rs/clap/blob/[^/]+/", replace="github.com/clap-rs/clap/blob/{{tag_name}}/", exactly=4, prerelease = true},
-]
 
-[features]
-default = [
-	"std",
-	"color",
-	"suggestions",
-]
-debug = ["clap_derive/debug", "backtrace"] # Enables debug messages
-unstable-doc = ["derive", "cargo", "wrap_help", "yaml", "env", "unicode", "regex", "unstable-replace", "unstable-multicall", "unstable-grouped"] # for docs.rs
-
-# Used in default
-std = ["indexmap/std"] # support for no_std in a backwards-compatible way
-color = ["atty", "termcolor"]
-suggestions = ["strsim"]
+[[package.metadata.release.pre-release-replacements]]
+file = "CHANGELOG.md"
+search = "Unreleased"
+replace = "{{version}}"
+min = 1
+
+[[package.metadata.release.pre-release-replacements]]
+file = "CHANGELOG.md"
+search = '\.\.\.HEAD'
+replace = "...{{tag_name}}"
+exactly = 1
+
+[[package.metadata.release.pre-release-replacements]]
+file = "CHANGELOG.md"
+search = "ReleaseDate"
+replace = "{{date}}"
+min = 1
+
+[[package.metadata.release.pre-release-replacements]]
+file = "CHANGELOG.md"
+search = "<!-- next-header -->"
+replace = """
+<!-- next-header -->
+## [Unreleased] - ReleaseDate
+"""
+exactly = 1
+
+[[package.metadata.release.pre-release-replacements]]
+file = "CHANGELOG.md"
+search = "<!-- next-url -->"
+replace = """
+<!-- next-url -->
+[Unreleased]: https://github.com/clap-rs/clap/compare/{{tag_name}}...HEAD"""
+exactly = 1
+
+[[package.metadata.release.pre-release-replacements]]
+file = "README.md"
+search = "github.com/clap-rs/clap/blob/[^/]+/"
+replace = "github.com/clap-rs/clap/blob/{{tag_name}}/"
+exactly = 13
+prerelease = true
+
+[[package.metadata.release.pre-release-replacements]]
+file = "README.md"
+search = 'version = "[a-z0-9\.-]+"'
+replace = "version = \"{{version}}\""
+exactly = 1
+prerelease = true
+
+[[package.metadata.release.pre-release-replacements]]
+file = "src/derive.rs"
+search = "github.com/clap-rs/clap/blob/[^/]+/"
+replace = "github.com/clap-rs/clap/blob/{{tag_name}}/"
+exactly = 4
+prerelease = true
 
-# Optional
-derive = ["clap_derive", "lazy_static"]
-cargo = ["lazy_static"] # Disable if you're not using Cargo, enables Cargo-env-var-dependent macros
-wrap_help = ["terminal_size", "textwrap/terminal_size"]
-yaml = ["yaml-rust"]
-env = [] # Use environment variables during arg parsing
-unicode = ["textwrap/unicode-width", "unicase"]  # Support for unicode characters in arguments and help messages
+[profile.bench]
+lto = true
+codegen-units = 1
 
-# In-work features
-unstable-replace = []
-unstable-multicall = []
-unstable-grouped = []
-unstable-v4 = []
+[profile.test]
+opt-level = 1
 
 [lib]
 bench = false
 
-[[bench]]
-harness = false
-name = "01_default"
-path = "benches/01_default.rs"
-
-[[bench]]
-harness = false
-name = "02_simple"
-path = "benches/02_simple.rs"
-
-[[bench]]
-harness = false
-name = "03_complex"
-path = "benches/03_complex.rs"
-
-[[bench]]
-harness = false
-name = "04_new_help"
-path = "benches/04_new_help.rs"
-
-[[bench]]
-harness = false
-name = "05_ripgrep"
-path = "benches/05_ripgrep.rs"
-
-[[bench]]
-harness = false
-name = "06_rustup"
-path = "benches/06_rustup.rs"
-
-[dependencies]
-clap_derive = { path = "./clap_derive", version = "=3.1.7", optional = true }
-clap_lex = { path = "./clap_lex", version = "0.1.0" }
-bitflags = "1.2"
-textwrap = { version = "0.15.0", default-features = false, features = [] }
-unicase = { version = "2.6", optional = true }
-indexmap = "1.0"
-strsim = { version = "0.10",  optional = true }
-yaml-rust = { version = "0.4.1",  optional = true }
-atty = { version = "0.2",  optional = true }
-termcolor = { version = "1.1.1", optional = true }
-terminal_size = { version = "0.1.12", optional = true }
-lazy_static = { version = "1", optional = true }
-regex = { version = "1.0", optional = true }
-backtrace = { version = "0.3", optional = true }
-
-[dev-dependencies]
-regex = "1.0"
-lazy_static = "1"
-criterion = "0.3.2"
-trybuild = "1.0.18"
-rustversion = "1"
-# Cutting out `filesystem` feature
-trycmd = { version = "0.13", default-features = false, features = ["color-auto", "diff", "examples"] }
-humantime = "2"
-
 [[example]]
 name = "demo"
 required-features = ["derive"]
@@ -238,7 +215,10 @@
 [[example]]
 name = "04_01_enum"
 path = "examples/tutorial_builder/04_01_enum.rs"
-required-features = ["cargo", "derive"]
+required-features = [
+    "cargo",
+    "derive",
+]
 
 [[example]]
 name = "04_02_parse"
@@ -263,8 +243,8 @@
 [[example]]
 name = "05_01_assert"
 path = "examples/tutorial_builder/05_01_assert.rs"
-required-features = ["cargo"]
 test = true
+required-features = ["cargo"]
 
 [[example]]
 name = "01_quick_derive"
@@ -349,8 +329,8 @@
 [[example]]
 name = "05_01_assert_derive"
 path = "examples/tutorial_derive/05_01_assert.rs"
-required-features = ["derive"]
 test = true
+required-features = ["derive"]
 
 [[example]]
 name = "custom-bool"
@@ -377,9 +357,161 @@
 path = "examples/derive_ref/flatten_hand_args.rs"
 required-features = ["derive"]
 
-[profile.test]
-opt-level = 1
+[[bench]]
+name = "01_default"
+path = "benches/01_default.rs"
+harness = false
 
-[profile.bench]
-lto = true
-codegen-units = 1
+[[bench]]
+name = "02_simple"
+path = "benches/02_simple.rs"
+harness = false
+
+[[bench]]
+name = "03_complex"
+path = "benches/03_complex.rs"
+harness = false
+
+[[bench]]
+name = "04_new_help"
+path = "benches/04_new_help.rs"
+harness = false
+
+[[bench]]
+name = "05_ripgrep"
+path = "benches/05_ripgrep.rs"
+harness = false
+
+[[bench]]
+name = "06_rustup"
+path = "benches/06_rustup.rs"
+harness = false
+
+[dependencies.atty]
+version = "0.2"
+optional = true
+
+[dependencies.backtrace]
+version = "0.3"
+optional = true
+
+[dependencies.bitflags]
+version = "1.2"
+
+[dependencies.clap_derive]
+version = "=3.1.7"
+optional = true
+
+[dependencies.clap_lex]
+version = "0.1.0"
+
+[dependencies.indexmap]
+version = "1.0"
+
+[dependencies.lazy_static]
+version = "1"
+optional = true
+
+[dependencies.regex]
+version = "1.0"
+optional = true
+
+[dependencies.strsim]
+version = "0.10"
+optional = true
+
+[dependencies.termcolor]
+version = "1.1.1"
+optional = true
+
+[dependencies.terminal_size]
+version = "0.1.12"
+optional = true
+
+[dependencies.textwrap]
+version = "0.15.0"
+features = []
+default-features = false
+
+[dependencies.unicase]
+version = "2.6"
+optional = true
+
+[dependencies.yaml-rust]
+version = "0.4.1"
+optional = true
+
+[dev-dependencies.criterion]
+version = "0.3.2"
+
+[dev-dependencies.humantime]
+version = "2"
+
+[dev-dependencies.lazy_static]
+version = "1"
+
+[dev-dependencies.regex]
+version = "1.0"
+
+[dev-dependencies.rustversion]
+version = "1"
+
+[dev-dependencies.trybuild]
+version = "1.0.18"
+
+[dev-dependencies.trycmd]
+version = "0.13"
+features = [
+    "color-auto",
+    "diff",
+    "examples",
+]
+default-features = false
+
+[features]
+cargo = ["lazy_static"]
+color = [
+    "atty",
+    "termcolor",
+]
+debug = [
+    "clap_derive/debug",
+    "backtrace",
+]
+default = [
+    "std",
+    "color",
+    "suggestions",
+]
+derive = [
+    "clap_derive",
+    "lazy_static",
+]
+env = []
+std = ["indexmap/std"]
+suggestions = ["strsim"]
+unicode = [
+    "textwrap/unicode-width",
+    "unicase",
+]
+unstable-doc = [
+    "derive",
+    "cargo",
+    "wrap_help",
+    "yaml",
+    "env",
+    "unicode",
+    "regex",
+    "unstable-replace",
+    "unstable-multicall",
+    "unstable-grouped",
+]
+unstable-grouped = []
+unstable-multicall = []
+unstable-replace = []
+unstable-v4 = []
+wrap_help = [
+    "terminal_size",
+    "textwrap/terminal_size",
+]
+yaml = ["yaml-rust"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/indoc/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/indoc/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,27 +1,36 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
+edition = "2018"
 name = "indoc"
 version = "1.0.3"
 authors = ["David Tolnay <dtolnay@gmail.com>"]
-license = "MIT OR Apache-2.0"
 description = "Indented document literals"
-repository = "https://github.com/dtolnay/indoc"
 documentation = "https://docs.rs/indoc"
-keywords = ["heredoc", "nowdoc", "multiline", "string", "literal"]
 readme = "README.md"
-edition = "2018"
+keywords = ["heredoc", "nowdoc", "multiline", "string", "literal"]
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/dtolnay/indoc"
+[package.metadata.docs.rs]
+targets = ["x86_64-unknown-linux-gnu"]
 
 [lib]
 proc-macro = true
+[dependencies.unindent]
+version = "0.1.7"
+[dev-dependencies.rustversion]
+version = "1.0"
 
-[dependencies]
-unindent = { version = "0.1.7", path = "unindent" }
-
-[dev-dependencies]
-rustversion = "1.0"
-trybuild = { version = "1.0.19", features = ["diff"] }
-
-[workspace]
-members = ["unindent"]
-
-[package.metadata.docs.rs]
-targets = ["x86_64-unknown-linux-gnu"]
+[dev-dependencies.trybuild]
+version = "1.0.19"
+features = ["diff"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/itoa/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/itoa/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,16 +1,26 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
+rust-version = "1.36"
 name = "itoa"
-version = "1.0.1" # remember to update html_root_url
+version = "1.0.1"
 authors = ["David Tolnay <dtolnay@gmail.com>"]
-rust-version = "1.36"
-license = "MIT OR Apache-2.0"
+exclude = ["performance.png", "chart/**"]
 description = "Fast integer primitive to string conversion"
-repository = "https://github.com/dtolnay/itoa"
 documentation = "https://docs.rs/itoa"
-categories = ["value-formatting"]
 readme = "README.md"
-exclude = ["performance.png", "chart/**"]
-edition = "2018"
-
+categories = ["value-formatting"]
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/dtolnay/itoa"
 [package.metadata.docs.rs]
 targets = ["x86_64-unknown-linux-gnu"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/itoa/v0_4/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/itoa/v0_4/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,19 +1,29 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
 name = "itoa"
-version = "0.4.8" # remember to update html_root_url
+version = "0.4.8"
 authors = ["David Tolnay <dtolnay@gmail.com>"]
-license = "MIT OR Apache-2.0"
+exclude = ["performance.png"]
 description = "Fast functions for printing integer primitives to an io::Write"
-repository = "https://github.com/dtolnay/itoa"
 documentation = "https://docs.rs/itoa"
-categories = ["value-formatting"]
 readme = "README.md"
-exclude = ["performance.png"]
+categories = ["value-formatting"]
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/dtolnay/itoa"
+[package.metadata.docs.rs]
+targets = ["x86_64-unknown-linux-gnu"]
 
 [features]
 default = ["std"]
 i128 = []
 std = []
-
-[package.metadata.docs.rs]
-targets = ["x86_64-unknown-linux-gnu"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/rstest/v0_12/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/rstest/v0_12/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,51 +1,69 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
-authors = ["Michele d'Amico <michele.damico@gmail.com>"]
-categories = ["development-tools::testing"]
-description = """
-Rust fixture based test framework. It use procedural macro
-to implement fixtures and table based tests.
-"""
 edition = "2018"
-exclude = [
-  "/playground",
-  "/rstest_fixtures",
-]
+name = "rstest"
+version = "0.12.0"
+authors = ["Michele d'Amico <michele.damico@gmail.com>"]
+exclude = ["/playground", "/rstest_fixtures"]
+description = "Rust fixture based test framework. It use procedural macro\nto implement fixtures and table based tests.\n"
 homepage = "https://github.com/la10736/rstest"
+readme = "README.md"
 keywords = ["test", "fixture"]
+categories = ["development-tools::testing"]
 license = "MIT/Apache-2.0"
-name = "rstest"
-readme = "README.md"
 repository = "https://github.com/la10736/rstest"
-version = "0.12.0"
-
-[workspace]
-exclude = [
-  "playground",
-]
-members = [
-  "rstest_test",
-  "rstest_reuse",
-]
 
 [lib]
 proc-macro = true
+[dependencies.cfg-if]
+version = "1.0.0"
+
+[dependencies.proc-macro2]
+version = "1.0.27"
+
+[dependencies.quote]
+version = "1.0.9"
+
+[dependencies.syn]
+version = "1.0.72"
+features = ["full", "parsing", "extra-traits", "visit", "visit-mut"]
+[dev-dependencies.actix-rt]
+version = "2.2.0"
+
+[dev-dependencies.async-std]
+version = "1.9.0"
+features = ["attributes"]
+
+[dev-dependencies.lazy_static]
+version = "1.4.0"
+
+[dev-dependencies.mytest]
+version = "0.11.0"
+package = "rstest"
+
+[dev-dependencies.pretty_assertions]
+version = "1.0.0"
+
+[dev-dependencies.rstest_reuse]
+version = "0.1.3"
+
+[dev-dependencies.rstest_test]
+version = "0.5.0"
 
-[dependencies]
-cfg-if = "1.0.0"
-proc-macro2 = "1.0.27"
-quote = "1.0.9"
-syn = {version = "1.0.72", features = ["full", "parsing", "extra-traits", "visit", "visit-mut"]}
-
-[dev-dependencies]
-actix-rt = "2.2.0"
-async-std = {version = "1.9.0", features = ["attributes"]}
-lazy_static = "1.4.0"
-mytest = {package = "rstest", version = "0.11.0"}
-pretty_assertions = "1.0.0"
-rstest_reuse = "0.1.3"
-rstest_test = "0.5.0"
-temp_testdir = "0.2.3"
-unindent = "0.1.7"
+[dev-dependencies.temp_testdir]
+version = "0.2.3"
 
-[build-dependencies]
-rustc_version = "0.4.0"
+[dev-dependencies.unindent]
+version = "0.1.7"
+[build-dependencies.rustc_version]
+version = "0.4.0"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/cargo_platform/v0_1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/cargo_platform/v0_1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,13 +1,24 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
 name = "cargo-platform"
 version = "0.1.2"
 authors = ["The Cargo Project Developers"]
-edition = "2018"
-license = "MIT OR Apache-2.0"
+description = "Cargo's representation of a target platform."
 homepage = "https://github.com/rust-lang/cargo"
-repository = "https://github.com/rust-lang/cargo"
 documentation = "https://docs.rs/cargo-platform"
-description = "Cargo's representation of a target platform."
-
-[dependencies]
-serde = { version = "1.0.82", features = ['derive'] }
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/rust-lang/cargo"
+[dependencies.serde]
+version = "1.0.82"
+features = ["derive"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/unicode_width/v0_1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/unicode_width/v0_1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,29 +1,42 @@
-[package]
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
 
+[package]
 name = "unicode-width"
 version = "0.1.9"
 authors = ["kwantam <kwantam@gmail.com>", "Manish Goregaokar <manishsmail@gmail.com>"]
-
+exclude = ["target/*", "Cargo.lock"]
+description = "Determine displayed width of `char` and `str` types\naccording to Unicode Standard Annex #11 rules.\n"
 homepage = "https://github.com/unicode-rs/unicode-width"
-repository = "https://github.com/unicode-rs/unicode-width"
 documentation = "https://unicode-rs.github.io/unicode-width"
-license = "MIT/Apache-2.0"
-keywords = ["text", "width", "unicode"]
 readme = "README.md"
-description = """
-Determine displayed width of `char` and `str` types
-according to Unicode Standard Annex #11 rules.
-"""
+keywords = ["text", "width", "unicode"]
+license = "MIT/Apache-2.0"
+repository = "https://github.com/unicode-rs/unicode-width"
+[dependencies.compiler_builtins]
+version = "0.1"
+optional = true
 
-exclude = [ "target/*", "Cargo.lock" ]
+[dependencies.core]
+version = "1.0"
+optional = true
+package = "rustc-std-workspace-core"
 
-[dependencies]
-std = { version = "1.0", package = "rustc-std-workspace-std", optional = true }
-core = { version = "1.0", package = "rustc-std-workspace-core", optional = true }
-compiler_builtins = { version = "0.1", optional = true }
+[dependencies.std]
+version = "1.0"
+optional = true
+package = "rustc-std-workspace-std"
 
 [features]
+bench = []
 default = []
 no_std = []
-bench = []
-rustc-dep-of-std = ['std', 'core', 'compiler_builtins']
+rustc-dep-of-std = ["std", "core", "compiler_builtins"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/is_ci/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/is_ci/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,20 +1,25 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
 name = "is_ci"
 version = "1.1.1"
-edition = "2018"
 authors = ["Kat Marchán <kzm@zkat.tech>"]
 description = "Super lightweight CI environment checker. Just tells you if you're in CI or not without much fuss."
-repository = "https://github.com/zkat/is_ci"
 documentation = "https://docs.rs/is_ci"
-license = "ISC"
-keywords = ["ci", "build"]
-categories = [
-  "development-tools",
-  "development-tools::build-utils",
-  "development-tools::testing",
-]
 readme = "README.md"
-
-# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
+keywords = ["ci", "build"]
+categories = ["development-tools", "development-tools::build-utils", "development-tools::testing"]
+license = "ISC"
+repository = "https://github.com/zkat/is_ci"
 
 [dependencies]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/owo_colors/v3/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/owo_colors/v3/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,19 +1,39 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
 name = "owo-colors"
 version = "3.3.0"
 authors = ["jam1garner <8260240+jam1garner@users.noreply.github.com>"]
-edition = "2018"
-documentation = "https://docs.rs/owo-colors"
-repository = "https://github.com/jam1garner/owo-colors"
 description = "Zero-allocation terminal colors that'll make people go owo"
-license = "MIT"
+documentation = "https://docs.rs/owo-colors"
 readme = "README.md"
-keywords = ["cli", "color", "no-std", "terminal", "ansi_term"]
+keywords = [
+    "cli",
+    "color",
+    "no-std",
+    "terminal",
+    "ansi_term",
+]
 categories = ["command-line-interface"]
+license = "MIT"
+repository = "https://github.com/jam1garner/owo-colors"
 
 [package.metadata.docs.rs]
 all-features = true
-rustdoc-args = ["--cfg", "doc_cfg"]
+rustdoc-args = [
+    "--cfg",
+    "doc_cfg",
+]
 
 [[example]]
 name = "supports_color"
@@ -23,8 +43,9 @@
 name = "override"
 required-features = ["supports-colors"]
 
+[dependencies.supports-color]
+version = "1.3"
+optional = true
+
 [features]
 supports-colors = ["supports-color"]
-
-[dependencies]
-supports-color = { version = "1.3", optional = true }
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/thiserror_impl/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/thiserror_impl/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,20 +1,33 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
+rust-version = "1.31"
 name = "thiserror-impl"
 version = "1.0.30"
 authors = ["David Tolnay <dtolnay@gmail.com>"]
-edition = "2018"
-rust-version = "1.31"
-license = "MIT OR Apache-2.0"
 description = "Implementation detail of the `thiserror` crate"
+license = "MIT OR Apache-2.0"
 repository = "https://github.com/dtolnay/thiserror"
+[package.metadata.docs.rs]
+targets = ["x86_64-unknown-linux-gnu"]
 
 [lib]
 proc-macro = true
+[dependencies.proc-macro2]
+version = "1.0"
 
-[dependencies]
-proc-macro2 = "1.0"
-quote = "1.0"
-syn = "1.0.45"
+[dependencies.quote]
+version = "1.0"
 
-[package.metadata.docs.rs]
-targets = ["x86_64-unknown-linux-gnu"]
+[dependencies.syn]
+version = "1.0.45"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/lazy_static/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/lazy_static/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,34 +1,46 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
 name = "lazy_static"
-# NB: When modifying, also modify html_root_url in lib.rs
 version = "1.4.0"
 authors = ["Marvin Löbel <loebel.marvin@gmail.com>"]
-license = "MIT/Apache-2.0"
-
+exclude = ["/.travis.yml", "/appveyor.yml"]
 description = "A macro for declaring lazily evaluated statics in Rust."
-readme = "README.md"
 documentation = "https://docs.rs/lazy_static"
-
-repository = "https://github.com/rust-lang-nursery/lazy-static.rs"
+readme = "README.md"
 keywords = ["macro", "lazy", "static"]
-categories = [ "no-std", "rust-patterns", "memory-management" ]
-exclude = ["/.travis.yml", "/appveyor.yml"]
-
+categories = ["no-std", "rust-patterns", "memory-management"]
+license = "MIT/Apache-2.0"
+repository = "https://github.com/rust-lang-nursery/lazy-static.rs"
 [dependencies.spin]
 version = "0.5.0"
 optional = true
+[dev-dependencies.doc-comment]
+version = "0.3.1"
 
 [features]
 spin_no_std = ["spin"]
+[badges.appveyor]
+repository = "rust-lang-nursery/lazy-static.rs"
 
-[dev-dependencies]
-doc-comment = "0.3.1"
+[badges.is-it-maintained-issue-resolution]
+repository = "rust-lang-nursery/lazy-static.rs"
 
-[badges]
-appveyor = { repository = "rust-lang-nursery/lazy-static.rs" }
-travis-ci = { repository = "rust-lang-nursery/lazy-static.rs" }
+[badges.is-it-maintained-open-issues]
+repository = "rust-lang-nursery/lazy-static.rs"
 
-is-it-maintained-issue-resolution = { repository = "rust-lang-nursery/lazy-static.rs" }
-is-it-maintained-open-issues = { repository = "rust-lang-nursery/lazy-static.rs" }
+[badges.maintenance]
+status = "passively-maintained"
 
-maintenance = { status = "passively-maintained" }
+[badges.travis-ci]
+repository = "rust-lang-nursery/lazy-static.rs"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/smawk/v0_3/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/smawk/v0_3/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,26 +1,46 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
+edition = "2018"
 name = "smawk"
 version = "0.3.1"
 authors = ["Martin Geisler <martin@geisler.net>"]
+exclude = [".github/", ".gitignore", "benches/", "examples/"]
 description = "Functions for finding row-minima in a totally monotone matrix."
-repository = "https://github.com/mgeisler/smawk"
 readme = "README.md"
 keywords = ["smawk", "matrix", "optimization", "dynamic-programming"]
 categories = ["algorithms", "science"]
 license = "MIT"
-edition = "2018"
-exclude = [".github/", ".gitignore", "benches/", "examples/"]
+repository = "https://github.com/mgeisler/smawk"
+[dependencies.ndarray]
+version = "0.14"
+optional = true
+[dev-dependencies.num-traits]
+version = "0.2"
+
+[dev-dependencies.rand]
+version = "0.8"
+
+[dev-dependencies.rand_chacha]
+version = "0.3"
+
+[dev-dependencies.version-sync]
+version = "0.9"
+[badges.appveyor]
+repository = "mgeisler/smawk"
+
+[badges.codecov]
+repository = "mgeisler/smawk"
 
-[badges]
-travis-ci = { repository = "mgeisler/smawk" }
-appveyor = { repository = "mgeisler/smawk" }
-codecov = { repository = "mgeisler/smawk" }
-
-[dependencies]
-ndarray = { version = "0.14", optional = true }
-
-[dev-dependencies]
-version-sync = "0.9"
-num-traits = "0.2"
-rand = "0.8"
-rand_chacha = "0.3"
+[badges.travis-ci]
+repository = "mgeisler/smawk"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/cargo_metadata/v0_14/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/cargo_metadata/v0_14/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,25 +1,49 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
 name = "cargo_metadata"
 version = "0.14.2"
 authors = ["Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de>"]
-repository = "https://github.com/oli-obk/cargo_metadata"
 description = "structured access to the output of `cargo metadata`"
-license = "MIT"
 readme = "README.md"
-edition = "2018"
+license = "MIT"
+repository = "https://github.com/oli-obk/cargo_metadata"
+[package.metadata.cargo_metadata_test]
+other_field = "foo"
+some_field = true
+[dependencies.camino]
+version = "1.0.1"
+features = ["serde1"]
 
-[dependencies]
-camino = { version = "1.0.1", features = ["serde1"] }
-cargo-platform = "0.1"
-derive_builder = { version = "0.9.0", optional = true }
-semver = { version = "1", features = ["serde"] }
-serde = { version = "1.0.107", features = ["derive"] }
-serde_json = { version = "1.0.59", features = ["unbounded_depth"] }
+[dependencies.cargo-platform]
+version = "0.1"
+
+[dependencies.derive_builder]
+version = "0.9.0"
+optional = true
+
+[dependencies.semver]
+version = "1"
+features = ["serde"]
+
+[dependencies.serde]
+version = "1.0.107"
+features = ["derive"]
+
+[dependencies.serde_json]
+version = "1.0.59"
+features = ["unbounded_depth"]
 
 [features]
-default = []
 builder = ["derive_builder"]
-
-[package.metadata.cargo_metadata_test]
-some_field = true
-other_field = "foo"
+default = []
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/terminal_size/v0_1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/terminal_size/v0_1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,24 +1,27 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
+edition = "2018"
 name = "terminal_size"
 version = "0.1.17"
 authors = ["Andrew Chin <achin@eminence32.net>"]
 description = "Gets the size of your Linux or Windows terminal"
 documentation = "http://eminence.github.io/terminal-size/doc/terminal_size/index.html"
-repository = "https://github.com/eminence/terminal-size"
 keywords = ["terminal", "console", "term", "size", "dimensions"]
 license = "MIT OR Apache-2.0"
-edition = "2018"
-
-
-[target.'cfg(not(windows))'.dependencies.libc]
+repository = "https://github.com/eminence/terminal-size"
+[target."cfg(not(windows))".dependencies.libc]
 version = "0.2"
-
-[target.'cfg(windows)'.dependencies.winapi]
+[target."cfg(windows)".dependencies.winapi]
 version = "0.3"
-features = [
-    "handleapi",
-    "processenv",
-    "winbase",
-    "wincon",
-    "winnt",
-]
+features = ["handleapi", "processenv", "winbase", "wincon", "winnt"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/env_logger/v0_9/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/env_logger/v0_9/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,31 +1,28 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
-name = "env_logger"
 edition = "2018"
+name = "env_logger"
 version = "0.9.0"
 authors = ["The Rust Project Developers"]
-license = "MIT/Apache-2.0"
-readme = "README.md"
-repository = "https://github.com/env-logger-rs/env_logger/"
+include = ["src/**/*", "tests", "LICENSE-*", "README.md", "CHANGELOG.md"]
+description = "A logging implementation for `log` which is configured via an environment\nvariable.\n"
 documentation = "https://docs.rs/env_logger"
-description = """
-A logging implementation for `log` which is configured via an environment
-variable.
-"""
-categories = ["development-tools::debugging"]
+readme = "README.md"
 keywords = ["logging", "log", "logger"]
-include = ["src/**/*", "tests", "LICENSE-*", "README.md", "CHANGELOG.md"]
-
-[workspace]
-members = [
-    "ci"
-]
-
-[dependencies]
-log = { version = "0.4.8", features = ["std"] }
-regex = { version = "1.0.3", optional = true, default-features=false, features=["std", "perf"] }
-termcolor = { version = "1.0.2", optional = true }
-humantime = { version = "2.0.0", optional = true }
-atty = { version = "0.2.5", optional = true }
+categories = ["development-tools::debugging"]
+license = "MIT/Apache-2.0"
+repository = "https://github.com/env-logger-rs/env_logger/"
 
 [[test]]
 name = "regexp_filter"
@@ -42,6 +39,27 @@
 [[test]]
 name = "init-twice-retains-filter"
 harness = false
+[dependencies.atty]
+version = "0.2.5"
+optional = true
+
+[dependencies.humantime]
+version = "2.0.0"
+optional = true
+
+[dependencies.log]
+version = "0.4.8"
+features = ["std"]
+
+[dependencies.regex]
+version = "1.0.3"
+features = ["std", "perf"]
+optional = true
+default-features = false
+
+[dependencies.termcolor]
+version = "1.0.2"
+optional = true
 
 [features]
 default = ["termcolor", "atty", "humantime", "regex"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/version_check/v0_9/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/version_check/v0_9/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,13 +1,24 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
 name = "version_check"
 version = "0.9.4"
 authors = ["Sergio Benitez <sb@sergio.bz>"]
+exclude = ["static"]
 description = "Tiny crate to check the version of the installed/running rustc."
 documentation = "https://docs.rs/version_check/"
-repository = "https://github.com/SergioBenitez/version_check"
 readme = "README.md"
 keywords = ["version", "rustc", "minimum", "check"]
 license = "MIT/Apache-2.0"
-exclude = ["static"]
+repository = "https://github.com/SergioBenitez/version_check"
 
 [dependencies]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/log/v0_4/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/log/v0_4/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,20 +1,28 @@
-[package]
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
 
+[package]
 name = "log"
-version = "0.4.14" # remember to update html_root_url
+version = "0.4.14"
 authors = ["The Rust Project Developers"]
-license = "MIT OR Apache-2.0"
-readme = "README.md"
-repository = "https://github.com/rust-lang/log"
+build = "build.rs"
+exclude = ["rfcs/**/*", "/.travis.yml", "/appveyor.yml"]
+description = "A lightweight logging facade for Rust\n"
 documentation = "https://docs.rs/log"
-description = """
-A lightweight logging facade for Rust
-"""
-categories = ["development-tools::debugging"]
+readme = "README.md"
 keywords = ["logging"]
-exclude = ["rfcs/**/*", "/.travis.yml", "/appveyor.yml"]
-build = "build.rs"
-
+categories = ["development-tools::debugging"]
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/rust-lang/log"
 [package.metadata.docs.rs]
 features = ["std", "serde", "kv_unstable_std", "kv_unstable_sval", "kv_unstable_serde"]
 
@@ -27,39 +35,53 @@
 name = "macros"
 path = "tests/macros.rs"
 harness = true
+[dependencies.cfg-if]
+version = "1.0"
+
+[dependencies.serde]
+version = "1.0"
+optional = true
+default-features = false
+
+[dependencies.sval]
+version = "1.0.0-alpha.5"
+optional = true
+default-features = false
+
+[dependencies.value-bag]
+version = "1.0.0-alpha.6"
+optional = true
+default-features = false
+[dev-dependencies.serde]
+version = "1.0"
+features = ["derive"]
+
+[dev-dependencies.serde_test]
+version = "1.0"
+
+[dev-dependencies.sval]
+version = "1.0.0-alpha.5"
+features = ["derive"]
+
+[dev-dependencies.value-bag]
+version = "1.0.0-alpha.6"
+features = ["test"]
 
 [features]
-max_level_off   = []
-max_level_error = []
-max_level_warn  = []
-max_level_info  = []
+kv_unstable = ["value-bag"]
+kv_unstable_serde = ["kv_unstable_std", "value-bag/serde", "serde"]
+kv_unstable_std = ["std", "kv_unstable", "value-bag/error"]
+kv_unstable_sval = ["kv_unstable", "value-bag/sval", "sval"]
 max_level_debug = []
+max_level_error = []
+max_level_info = []
+max_level_off = []
 max_level_trace = []
-
-release_max_level_off   = []
-release_max_level_error = []
-release_max_level_warn  = []
-release_max_level_info  = []
+max_level_warn = []
 release_max_level_debug = []
+release_max_level_error = []
+release_max_level_info = []
+release_max_level_off = []
 release_max_level_trace = []
-
+release_max_level_warn = []
 std = []
-
-# requires the latest stable
-# this will have a tighter MSRV before stabilization
-kv_unstable = ["value-bag"]
-kv_unstable_sval = ["kv_unstable", "value-bag/sval", "sval"]
-kv_unstable_std = ["std", "kv_unstable", "value-bag/error"]
-kv_unstable_serde = ["kv_unstable_std", "value-bag/serde", "serde"]
-
-[dependencies]
-cfg-if = "1.0"
-serde = { version = "1.0", optional = true, default-features = false }
-sval = { version = "1.0.0-alpha.5", optional = true, default-features = false }
-value-bag = { version = "1.0.0-alpha.6", optional = true, default-features = false }
-
-[dev-dependencies]
-serde = { version = "1.0", features = ["derive"] }
-serde_test = "1.0"
-sval = { version = "1.0.0-alpha.5", features = ["derive"] }
-value-bag = { version = "1.0.0-alpha.6", features = ["test"] }
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/rustc_demangle/v0_1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/rustc_demangle/v0_1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,25 +1,35 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
 name = "rustc-demangle"
 version = "0.1.21"
 authors = ["Alex Crichton <alex@alexcrichton.com>"]
-license = "MIT/Apache-2.0"
-readme = "README.md"
-repository = "https://github.com/alexcrichton/rustc-demangle"
+description = "Rust compiler symbol demangling.\n"
 homepage = "https://github.com/alexcrichton/rustc-demangle"
 documentation = "https://docs.rs/rustc-demangle"
-description = """
-Rust compiler symbol demangling.
-"""
-
-[workspace]
-members = ["crates/capi", "fuzz"]
+readme = "README.md"
+license = "MIT/Apache-2.0"
+repository = "https://github.com/alexcrichton/rustc-demangle"
+[profile.release]
+lto = true
+[dependencies.compiler_builtins]
+version = "0.1.2"
+optional = true
 
-[dependencies]
-core = { version = '1.0.0', optional = true, package = 'rustc-std-workspace-core' }
-compiler_builtins = { version = '0.1.2', optional = true }
+[dependencies.core]
+version = "1.0.0"
+optional = true
+package = "rustc-std-workspace-core"
 
 [features]
-rustc-dep-of-std = ['core', 'compiler_builtins']
-
-[profile.release]
-lto = true
+rustc-dep-of-std = ["core", "compiler_builtins"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/serde_derive/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/serde_derive/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,31 +1,43 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
 name = "serde_derive"
-version = "1.0.130" # remember to update html_root_url
+version = "1.0.130"
 authors = ["Erick Tryzelaar <erick.tryzelaar@gmail.com>", "David Tolnay <dtolnay@gmail.com>"]
-license = "MIT OR Apache-2.0"
+include = ["build.rs", "src/**/*.rs", "crates-io.md", "README.md", "LICENSE-APACHE", "LICENSE-MIT"]
 description = "Macros 1.1 implementation of #[derive(Serialize, Deserialize)]"
 homepage = "https://serde.rs"
-repository = "https://github.com/serde-rs/serde"
 documentation = "https://serde.rs/derive.html"
-keywords = ["serde", "serialization", "no_std"]
 readme = "crates-io.md"
-include = ["build.rs", "src/**/*.rs", "crates-io.md", "README.md", "LICENSE-APACHE", "LICENSE-MIT"]
-
-[features]
-default = []
-deserialize_in_place = []
+keywords = ["serde", "serialization", "no_std"]
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/serde-rs/serde"
+[package.metadata.docs.rs]
+targets = ["x86_64-unknown-linux-gnu"]
 
 [lib]
 name = "serde_derive"
 proc-macro = true
+[dependencies.proc-macro2]
+version = "1.0"
 
-[dependencies]
-proc-macro2 = "1.0"
-quote = "1.0"
-syn = "1.0.60"
+[dependencies.quote]
+version = "1.0"
 
-[dev-dependencies]
-serde = { version = "1.0", path = "../serde" }
+[dependencies.syn]
+version = "1.0.60"
+[dev-dependencies.serde]
+version = "1.0"
 
-[package.metadata.docs.rs]
-targets = ["x86_64-unknown-linux-gnu"]
+[features]
+default = []
+deserialize_in_place = []
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/thiserror/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/thiserror/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,27 +1,39 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
+rust-version = "1.31"
 name = "thiserror"
 version = "1.0.30"
 authors = ["David Tolnay <dtolnay@gmail.com>"]
-edition = "2018"
-rust-version = "1.31"
-license = "MIT OR Apache-2.0"
 description = "derive(Error)"
-repository = "https://github.com/dtolnay/thiserror"
 documentation = "https://docs.rs/thiserror"
-categories = ["rust-patterns"]
 readme = "README.md"
+categories = ["rust-patterns"]
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/dtolnay/thiserror"
+[package.metadata.docs.rs]
+targets = ["x86_64-unknown-linux-gnu"]
+[dependencies.thiserror-impl]
+version = "=1.0.30"
+[dev-dependencies.anyhow]
+version = "1.0"
 
-[dependencies]
-thiserror-impl = { version = "=1.0.30", path = "impl" }
-
-[dev-dependencies]
-anyhow = "1.0"
-ref-cast = "1.0"
-rustversion = "1.0"
-trybuild = { version = "1.0.49", features = ["diff"] }
+[dev-dependencies.ref-cast]
+version = "1.0"
 
-[workspace]
-members = ["impl"]
+[dev-dependencies.rustversion]
+version = "1.0"
 
-[package.metadata.docs.rs]
-targets = ["x86_64-unknown-linux-gnu"]
+[dev-dependencies.trybuild]
+version = "1.0.49"
+features = ["diff"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/semver/v1/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/semver/v1/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,21 +1,32 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
 name = "semver"
 version = "1.0.4"
 authors = ["David Tolnay <dtolnay@gmail.com>"]
-edition = "2018"
-license = "MIT OR Apache-2.0"
 description = "Parser and evaluator for Cargo's flavor of Semantic Versioning"
-repository = "https://github.com/dtolnay/semver"
 documentation = "https://docs.rs/semver"
 readme = "README.md"
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/dtolnay/semver"
+[package.metadata.docs.rs]
+rustdoc-args = ["--cfg", "doc_cfg"]
+targets = ["x86_64-unknown-linux-gnu"]
+[dependencies.serde]
+version = "1.0"
+optional = true
+default-features = false
 
 [features]
 default = ["std"]
 std = []
-
-[dependencies]
-serde = { version = "1.0", optional = true, default-features = false }
-
-[package.metadata.docs.rs]
-targets = ["x86_64-unknown-linux-gnu"]
-rustdoc-args = ["--cfg", "doc_cfg"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/autocxx/v0_22/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/autocxx/v0_22/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,41 +1,45 @@
-# Copyright 2020 Google LLC
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
 #
-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
-# https://www.apache.org/licenses/LICENSE-2.0> or the MIT license
-# <LICENSE-MIT or https://opensource.org/licenses/MIT>, at your
-# option. This file may not be copied, modified, or distributed
-# except according to those terms.
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
 
 [package]
+edition = "2021"
 name = "autocxx"
 version = "0.22.4"
 authors = ["Adrian Taylor <adetaylor@chromium.org>"]
-license = "MIT OR Apache-2.0"
+exclude = [
+    ".github",
+    "book",
+    "tools",
+]
 description = "Safe autogenerated interop between Rust and C++"
-repository = "https://github.com/google/autocxx"
 homepage = "https://autocxx.rs"
-edition = "2021"
+readme = "README.md"
 keywords = ["ffi"]
-categories = ["development-tools::ffi", "api-bindings"]
-exclude = [ ".github", "book", "tools" ]
-
-# This is stricter about avoiding optional features in dependencies
-# such as 'syn'. We build this way such that CI spots any mistakes
-# where we are depending on such features.
+categories = [
+    "development-tools::ffi",
+    "api-bindings",
+]
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/google/autocxx"
 resolver = "2"
 
-[dependencies]
-autocxx-macro = { path="macro", version="0.22.4" }
-cxx = "1.0.68" # ... also needed because expansion of type_id refers to ::cxx
-aquamarine = "0.1" # docs
-moveit = { version = "0.5", features = [ "cxx" ] }
+[dependencies.aquamarine]
+version = "0.1"
+
+[dependencies.autocxx-macro]
+version = "0.22.4"
 
-[workspace]
-members = ["parser", "engine", "gen/cmd", "gen/build", "macro", "demo", "tools/reduce", "tools/mdbook-preprocessor", "integration-tests"]
-exclude = ["examples/s2", "examples/steam-mini", "examples/subclass", "examples/chromium-fake-render-frame-host", "examples/pod", "examples/non-trivial-type-on-stack", "examples/llvm", "examples/reference-wrappers", "tools/stress-test"]
+[dependencies.cxx]
+version = "1.0.68"
 
-#[patch.crates-io]
-#cxx = { path="../cxx" }
-#cxx-gen = { path="../cxx/gen/lib" }
-#autocxx-bindgen = { path="../bindgen" }
-#moveit = { path="../moveit" }
+[dependencies.moveit]
+version = "0.5"
+features = ["cxx"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/humantime/v2/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/humantime/v2/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,24 +1,37 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
+edition = "2018"
 name = "humantime"
-description = """
-    A parser and formatter for std::time::{Duration, SystemTime}
-"""
-license = "MIT/Apache-2.0"
-readme = "README.md"
-keywords = ["time", "human", "human-friendly", "parser", "duration"]
-homepage = "https://github.com/tailhook/humantime"
-repository = "https://github.com/tailhook/humantime"
-documentation = "https://docs.rs/humantime"
 version = "2.1.0"
-edition = "2018"
 authors = ["Paul Colomiets <paul@colomiets.name>"]
+description = "    A parser and formatter for std::time::{Duration, SystemTime}\n"
+homepage = "https://github.com/tailhook/humantime"
+documentation = "https://docs.rs/humantime"
+readme = "README.md"
+keywords = ["time", "human", "human-friendly", "parser", "duration"]
 categories = ["date-and-time"]
+license = "MIT/Apache-2.0"
+repository = "https://github.com/tailhook/humantime"
 
 [lib]
 name = "humantime"
 path = "src/lib.rs"
+[dev-dependencies.chrono]
+version = "0.4"
+
+[dev-dependencies.rand]
+version = "0.6"
 
-[dev-dependencies]
-time = "0.1"
-chrono = "0.4"
-rand = "0.6"
+[dev-dependencies.time]
+version = "0.1"
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/addr2line/v0_17/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/addr2line/v0_17/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,61 +1,44 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
 name = "addr2line"
 version = "0.17.0"
+exclude = ["/benches/*", "/fixtures/*", ".github"]
 description = "A cross-platform symbolication library written in Rust, using `gimli`"
 documentation = "https://docs.rs/addr2line"
-exclude = ["/benches/*", "/fixtures/*", ".github"]
+readme = "./README.md"
 keywords = ["DWARF", "debug", "elf", "symbolicate", "atos"]
 categories = ["development-tools::debugging"]
 license = "Apache-2.0 OR MIT"
-readme = "./README.md"
 repository = "https://github.com/gimli-rs/addr2line"
-
-[dependencies]
-gimli = { version = "0.26", default-features = false, features = ["read"] }
-fallible-iterator = { version = "0.2", default-features = false, optional = true }
-object = { version = "0.27.1", default-features = false, features = ["read"], optional = true }
-smallvec = { version = "1", default-features = false, optional = true }
-rustc-demangle = { version = "0.1", optional = true }
-cpp_demangle = { version = "0.3", default-features = false, optional = true }
-
-# Internal feature, only used when building as part of libstd, not part of the
-# stable interface of this crate.
-core = { version = '1.0.0', optional = true, package = 'rustc-std-workspace-core' }
-alloc = { version = '1.0.0', optional = true, package = 'rustc-std-workspace-alloc' }
-compiler_builtins = { version = '0.1.2', optional = true }
-
-[dev-dependencies]
-memmap = "0.7"
-clap = "2"
-backtrace = "0.3.13"
-findshlibs = "0.10"
-rustc-test = "0.3"
-auxiliary = { path = "tests/auxiliary" }
-typed-arena = "2"
+[profile.bench]
+codegen-units = 1
+debug = true
+split-debuginfo = "packed"
 
 [profile.dev]
-split-debuginfo = 'packed'
-
-[profile.test]
-split-debuginfo = 'packed'
+split-debuginfo = "packed"
 
 [profile.release]
 debug = true
-split-debuginfo = 'packed'
-
-[profile.bench]
-debug = true
-codegen-units = 1
-split-debuginfo = 'packed'
+split-debuginfo = "packed"
 
-[features]
-default = ["rustc-demangle", "cpp_demangle", "std-object", "fallible-iterator", "smallvec"]
-std = ["gimli/std"]
-std-object = ["std", "object", "object/std", "object/compression", "gimli/endian-reader"]
+[profile.test]
+split-debuginfo = "packed"
 
-# Internal feature, only used when building as part of libstd, not part of the
-# stable interface of this crate.
-rustc-dep-of-std = ['core', 'alloc', 'compiler_builtins', 'gimli/rustc-dep-of-std']
+[[example]]
+name = "addr2line"
+required-features = ["std-object"]
 
 [[test]]
 name = "output_equivalence"
@@ -69,7 +52,69 @@
 [[test]]
 name = "parse"
 required-features = ["std-object"]
+[dependencies.alloc]
+version = "1.0.0"
+optional = true
+package = "rustc-std-workspace-alloc"
+
+[dependencies.compiler_builtins]
+version = "0.1.2"
+optional = true
+
+[dependencies.core]
+version = "1.0.0"
+optional = true
+package = "rustc-std-workspace-core"
+
+[dependencies.cpp_demangle]
+version = "0.3"
+optional = true
+default-features = false
+
+[dependencies.fallible-iterator]
+version = "0.2"
+optional = true
+default-features = false
+
+[dependencies.gimli]
+version = "0.26"
+features = ["read"]
+default-features = false
+
+[dependencies.object]
+version = "0.27.1"
+features = ["read"]
+optional = true
+default-features = false
+
+[dependencies.rustc-demangle]
+version = "0.1"
+optional = true
+
+[dependencies.smallvec]
+version = "1"
+optional = true
+default-features = false
+[dev-dependencies.backtrace]
+version = "0.3.13"
+
+[dev-dependencies.clap]
+version = "2"
+
+[dev-dependencies.findshlibs]
+version = "0.10"
 
-[[example]]
-name = "addr2line"
-required-features = ["std-object"]
+[dev-dependencies.memmap]
+version = "0.7"
+
+[dev-dependencies.rustc-test]
+version = "0.3"
+
+[dev-dependencies.typed-arena]
+version = "2"
+
+[features]
+default = ["rustc-demangle", "cpp_demangle", "std-object", "fallible-iterator", "smallvec"]
+rustc-dep-of-std = ["core", "alloc", "compiler_builtins", "gimli/rustc-dep-of-std"]
+std = ["gimli/std"]
+std-object = ["std", "object", "object/std", "object/compression", "gimli/endian-reader"]
--- qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/which/v4/crate/Cargo.toml.orig	2023-09-07 17:02:00.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtwebengine/src/3rdparty/chromium/third_party/rust/which/v4/crate/Cargo.toml	2023-09-07 17:02:00.000000000 +0100
@@ -1,26 +1,50 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
 [package]
+edition = "2018"
 name = "which"
 version = "4.3.0"
-edition = "2018"
 authors = ["Harry Fei <tiziyuanfang@gmail.com>"]
-repository = "https://github.com/harryfei/which-rs.git"
-documentation = "https://docs.rs/which/"
-license = "MIT"
 description = "A Rust equivalent of Unix command \"which\". Locate installed executable in cross platforms."
+documentation = "https://docs.rs/which/"
 readme = "README.md"
-categories = ["os", "filesystem"]
-keywords = ["which", "which-rs", "unix", "command"]
+keywords = [
+    "which",
+    "which-rs",
+    "unix",
+    "command",
+]
+categories = [
+    "os",
+    "filesystem",
+]
+license = "MIT"
+repository = "https://github.com/harryfei/which-rs.git"
 
-[dependencies]
-either = "1.6.1"
-libc = "0.2.121"
-regex = { version = "1.5.5", optional = true }
+[package.metadata.docs.rs]
+all-features = true
 
-[target.'cfg(windows)'.dependencies]
-once_cell = "1"
+[dependencies.either]
+version = "1.6.1"
 
-[dev-dependencies]
-tempfile = "3.3.0"
+[dependencies.libc]
+version = "0.2.121"
 
-[package.metadata.docs.rs]
-all-features = true
+[dependencies.regex]
+version = "1.5.5"
+optional = true
+
+[dev-dependencies.tempfile]
+version = "3.3.0"
+
+[target."cfg(windows)".dependencies.once_cell]
+version = "1"
--- qt-everywhere-src-6.5.3/qtgrpc/src/tools/qtgrpcgen/qgrpcgenerator.cpp.orig	2023-09-24 10:45:57.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtgrpc/src/tools/qtgrpcgen/qgrpcgenerator.cpp	2023-09-30 06:19:44.313007470 +0100
@@ -13,6 +13,7 @@
 #include <set>
 #include <google/protobuf/compiler/code_generator.h>
 #include <google/protobuf/descriptor.h>
+#include <google/protobuf/descriptor_legacy.h>
 #include <google/protobuf/io/printer.h>
 #include <google/protobuf/io/zero_copy_stream.h>
 #include <google/protobuf/stubs/common.h>
@@ -34,7 +35,7 @@
                               std::string *error) const
 {
     assert(file != nullptr && generatorContext != nullptr);
-    if (file->syntax() != FileDescriptor::SYNTAX_PROTO3) {
+    if (FileDescriptorLegacy(file).syntax() != FileDescriptorLegacy::SYNTAX_PROTO3) {
         *error = "Invalid proto used. qtgrpcgen only supports 'proto3' syntax";
         return false;
     }
--- qt-everywhere-src-6.5.3/qtgrpc/src/tools/qtgrpcgen/qgrpcgenerator.h.orig	2023-09-24 10:45:57.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtgrpc/src/tools/qtgrpcgen/qgrpcgenerator.h	2023-09-30 06:20:44.804008088 +0100
@@ -5,6 +5,7 @@
 #define QGRPCGENERATOR_H
 
 #include <memory>
+#include <set>
 #include "generatorbase.h"
 
 namespace google::protobuf {
--- qt-everywhere-src-6.5.3/qtgrpc/src/tools/qtprotobufgen/qprotobufgenerator.cpp.orig	2023-09-24 10:45:57.000000000 +0100
+++ qt-everywhere-src-6.5.3/qtgrpc/src/tools/qtprotobufgen/qprotobufgenerator.cpp	2023-09-30 06:22:17.104009033 +0100
@@ -21,6 +21,7 @@
 #include <google/protobuf/io/printer.h>
 #include <google/protobuf/io/zero_copy_stream.h>
 #include <google/protobuf/descriptor.h>
+#include <google/protobuf/descriptor_legacy.h>
 
 using namespace ::QtProtobuf;
 using namespace ::qtprotoccommon;
@@ -40,7 +41,7 @@
 {
     assert(file != nullptr && generatorContext != nullptr);
 
-    if (file->syntax() != FileDescriptor::SYNTAX_PROTO3) {
+    if (FileDescriptorLegacy(file).syntax() != FileDescriptorLegacy::SYNTAX_PROTO3) {
         *error = "Invalid proto used. qtprotobufgen only supports 'proto3' syntax";
         return false;
     }
