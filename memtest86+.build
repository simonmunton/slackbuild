#!/bin/bash
#
. build_funcs

TARNAME=memtest86+
TARNAMEEXTRA=
TARSEP="-"
TARDIR=${SOURCE}/m
#TAR_EXT=.tar.gz
VERSION=5.01
VERSIONEXTRA=
BUILD=1

WEBPAGE="http://memtest.org/"

#TAR_PROG=
#TAR_OPTS=
#PKGNAME=
#PKGVERSION=
#BUILD_SUFFIX=
#ARCH=noarch


FULL_TARNAME=${TARDIR}/${TARNAME}${TARNAMEEXTRA}${TARSEP}${VERSION}${VERSIONEXTRA}${TAR_EXT}

pre_unpack

PKG=/tmp/package-${PKGNAME}

if [ ! -f ${FULL_TARNAME} ]
then
  echo Can\'t find ${FULL_TARNAME}
  exit
fi

if [ ! -d ${TARNAME}-${VERSION} ]
then 
${TAR_PROG} ${TAR_OPTS} ${FULL_TARNAME}
#mv ${TARNAME}-${VERSION} ${TARNAME}-${VERSION}

if [ ! -d ${TARNAME}-${VERSION} ]
then 
  echo "${TARNAME}-${VERSION} directory not found"
  exit
fi

(cd ${TARNAME}-${VERSION}
 patch -p1 < ${CWD}/memtest86+-doc-serialconsole
 patch -p1 < ${CWD}/memtest86+-multiboot
 patch -p1 < ${CWD}/memtest86+-5.01-O0.patch
 patch -p1 < ${CWD}/memtest86+-5.01-array-size.patch
 patch -p1 < ${CWD}/memtest86+-gcc-5
)
fi

pre_configure

cd ${TARNAME}-${VERSION}

fix_perms

PKGCFLAGS="-O2 -march=i686 ${CPUOPT}=i686"

if [ ${DO_CONFIGURE} == "yes" ]
then
if [ -f ./configure ]
then
CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
./configure --prefix=/usr \
            --sysconfdir=/etc \
            --libdir=/usr/lib${LIBDIRSUFFIX} \
            --localstatedir=/var/lib \
	    --mandir=/usr/man
elif [ -f ./CMakeLists.txt ]
then
cmake -DCMAKE_C_FLAGS:STRING="${SLKCFLAGS}" \
      -DCMAKE_CXX_FLAGS:STRING="${SLKCFLAGS}" \
      -DCMAKE_BUILD_TYPE=Release \
      -DCMAKE_INSTALL_PREFIX=/usr \
      -DMAN_INSTALL_DIR=/usr/man \
      -DLIB_SUFFIX=${LIBDIRSUFFIX} \
      -DSYSCONF_INSTALL_DIR=/etc \
      .
elif [ -f ./meson.build ]
then
  meson --prefix=/usr _BuilD_
fi

fi

if [ ${DO_MAKE} == "yes" ]
then
if [ -f ./meson.build ]
then
  ninja -C _BuilD_ || exit
else
  make ${NUM_JOBS} memtest.bin memtest || exit
  ./makeiso.sh
fi
fi

if [ ${DO_INSTALL} != "yes" ]
then
  exit
fi

if [ -f ./meson.build ]
then
  DESTDIR=${PKG} ninja -C _BuilD_ install
else
  :
  #make install DESTDIR=${PKG}
fi

install -D -m 644 memtest.bin ${PKG}/boot/${TARNAME}.bin
install -D -m 644 memtest ${PKG}/boot/${TARNAME}.elf
install -d ${PKG}/usr/lib/${TARNAME}
ln -sf /boot/${TARNAME}.elf ${PKG}/usr/lib/${TARNAME}/${TARNAME}.elf
install -D -m644 mt*.iso ${PKG}/usr/lib/${TARNAME}/${TARNAME}.iso
install -D -m644 -s memtest_shared ${PKG}/boot/${TARNAME}_multiboot.bin
install -D -m755 ${CWD}/memtest86+-grub ${PKG}/etc/grub.d/20_${TARNAME}

cat << EOF >> ${PKG}/install/doinst.sh
#
if [ -e /boot/grub/grub.cfg ]
then
/usr/sbin/grub-mkconfig -o /boot/grub/grub.cfg
fi

EOF

strip_binaries

fix_links

compress_manpages

compress_info

cp -a \
  AUTHORS COPYING* INSTALL NEWS PLANS README* TODO \
  ${CWD}/memtest86+-lilo.conf \
  ${PKG}/usr/doc/${TARNAME}-${VERSION}

fix_docs

#-----handy-ruler-for-slack-desc-width-------------------------------|
make_slack_desc << EOF "thorough real-mode memory tester"
Memtest86+ scans your RAM for errors.

This tester runs independently of any OS - it is run at computer
boot-up, so that it can test *all* of your memory.  You may want to
look at 'memtester', which allows to test your memory within Linux,
but this one won't be able to test your whole RAM.

It can output a list of bad RAM regions usable by the BadRAM kernel
patch, so that you can still use your old RAM with one or two bad bits.

EOF

post_install

cd ${PKG}
su -c "chown -R root:root ${PKG}; \
find . -type d -exec chmod 755 {} \; ; \
makepkg -l y -c n ${PKGDIR}${PKGNAME}-${PKGVERSION}-${ARCH}-${BUILD}${BUILD_SUFFIX}.tgz; \
chown -R ${USERNAME}:${GROUP} ${PKG}"
