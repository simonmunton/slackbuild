--- gnusound-0.7.4/configure.orig	2005-07-06 10:57:07.000000000 +0100
+++ gnusound-0.7.4/configure	2008-02-04 09:52:11.000000000 +0000
@@ -7935,9 +7935,9 @@
 
 fi
 if test $ac_cv_header_FLAC_format_h = yes; then
-  echo "$as_me:$LINENO: checking for FLAC__file_decoder_new in -lFLAC" >&5
-echo $ECHO_N "checking for FLAC__file_decoder_new in -lFLAC... $ECHO_C" >&6
-if test "${ac_cv_lib_FLAC_FLAC__file_decoder_new+set}" = set; then
+  echo "$as_me:$LINENO: checking for FLAC__stream_decoder_new in -lFLAC" >&5
+echo $ECHO_N "checking for FLAC__stream_decoder_new in -lFLAC... $ECHO_C" >&6
+if test "${ac_cv_lib_FLAC_FLAC__stream_decoder_new+set}" = set; then
   echo $ECHO_N "(cached) $ECHO_C" >&6
 else
   ac_check_lib_save_LIBS=$LIBS
@@ -7955,11 +7955,11 @@
 #endif
 /* We use char because int might match the return type of a gcc2
    builtin and then its argument prototype would still apply.  */
-char FLAC__file_decoder_new ();
+char FLAC__stream_decoder_new ();
 int
 main ()
 {
-FLAC__file_decoder_new ();
+FLAC__stream_decoder_new ();
   ;
   return 0;
 }
@@ -7986,20 +7986,20 @@
   ac_status=$?
   echo "$as_me:$LINENO: \$? = $ac_status" >&5
   (exit $ac_status); }; }; then
-  ac_cv_lib_FLAC_FLAC__file_decoder_new=yes
+  ac_cv_lib_FLAC_FLAC__stream_decoder_new=yes
 else
   echo "$as_me: failed program was:" >&5
 sed 's/^/| /' conftest.$ac_ext >&5
 
-ac_cv_lib_FLAC_FLAC__file_decoder_new=no
+ac_cv_lib_FLAC_FLAC__stream_decoder_new=no
 fi
 rm -f conftest.err conftest.$ac_objext \
       conftest$ac_exeext conftest.$ac_ext
 LIBS=$ac_check_lib_save_LIBS
 fi
-echo "$as_me:$LINENO: result: $ac_cv_lib_FLAC_FLAC__file_decoder_new" >&5
-echo "${ECHO_T}$ac_cv_lib_FLAC_FLAC__file_decoder_new" >&6
-if test $ac_cv_lib_FLAC_FLAC__file_decoder_new = yes; then
+echo "$as_me:$LINENO: result: $ac_cv_lib_FLAC_FLAC__stream_decoder_new" >&5
+echo "${ECHO_T}$ac_cv_lib_FLAC_FLAC__stream_decoder_new" >&6
+if test $ac_cv_lib_FLAC_FLAC__stream_decoder_new = yes; then
   cat >>confdefs.h <<\_ACEOF
 #define HAVE_FLAC 1
 _ACEOF
--- gnusound-0.7.4/modules/file_ffmpeg.c.orig	2005-06-19 16:44:25.000000000 +0100
+++ gnusound-0.7.4/modules/file_ffmpeg.c	2008-02-04 09:52:11.000000000 +0000
@@ -77,7 +77,7 @@
     if(stream_index < 0 || stream_index >= fc->nb_streams)
         return -1;
 
-    enc = &fc->streams[stream_index]->codec;
+    enc = fc->streams[stream_index]->codec;
     codec = avcodec_find_decoder(enc->codec_id);
     if(!codec)
         return -1;
@@ -99,7 +99,7 @@
     int err, i, audio_index = -1;
 
     memset(&format_params, 0, sizeof(format_params));
-    format_params.image_format = NULL;
+//    format_params.image_format = NULL;
     format_params.initial_pause = 1; /* we force a pause when starting an RTSP
                                         stream */
 
@@ -117,7 +117,7 @@
     }
     
     for(i = 0; i < fc->nb_streams; i++) {
-        AVCodecContext *enc = &fc->streams[i]->codec;
+        AVCodecContext *enc = fc->streams[i]->codec;
         switch(enc->codec_type) {
         case CODEC_TYPE_AUDIO:
             DEBUG("found audio stream %d\n", i);
@@ -146,7 +146,7 @@
         return cmd_new_error_val("Could not open audio stream");
     }        
 
-    codec = avcodec_find_decoder(fc->streams[audio_index]->codec.codec_id);
+    codec = avcodec_find_decoder(fc->streams[audio_index]->codec->codec_id);
     snprintf(ffmpeg_data->format_name, sizeof(ffmpeg_data->format_name),
              "%s/%s", fc->iformat->name, codec->name);
 
@@ -155,8 +155,8 @@
     ffmpeg_data->audio_stream = fc->streams[audio_index];
 
     params->sample_type = SAMPLE_TYPE_INT_16;
-    params->sample_rate = ffmpeg_data->audio_stream->codec.sample_rate;
-    params->channels = ffmpeg_data->audio_stream->codec.channels;
+    params->sample_rate = ffmpeg_data->audio_stream->codec->sample_rate;
+    params->channels = ffmpeg_data->audio_stream->codec->channels;
     params->frame_count = -1;
 
     av_read_play(fc);
@@ -227,7 +227,7 @@
          * the decode buffer.
          */
 
-        len = avcodec_decode_audio(&ffmpeg_data->audio_stream->codec,
+        len = avcodec_decode_audio(ffmpeg_data->audio_stream->codec,
                                    (int16_t *)ffmpeg_data->decode_buf,
                                    &frame_size,
                                    (ffmpeg_data->packet.data + 
@@ -274,14 +274,14 @@
      * could save a memcpy() here, but this is cleaner.
      */
 
-    copied = MIN(count * ffmpeg_data->audio_stream->codec.channels * 2, 
+    copied = MIN(count * ffmpeg_data->audio_stream->codec->channels * 2, 
                  ffmpeg_data->decode_buf_avail);
     memcpy(buf, ffmpeg_data->decode_buf + ffmpeg_data->decode_buf_offset,
            copied);
     ffmpeg_data->decode_buf_offset += copied;
     ffmpeg_data->decode_buf_avail -= copied;
 
-    return copied / (ffmpeg_data->audio_stream->codec.channels * 2);
+    return copied / (ffmpeg_data->audio_stream->codec->channels * 2);
 }
 
 static long
@@ -299,7 +299,7 @@
     if(ffmpeg_data->packet.data) 
         av_free_packet(&ffmpeg_data->packet);
         
-    enc = &ffmpeg_data->audio_stream->codec;
+    enc = ffmpeg_data->audio_stream->codec;
     avcodec_close(enc);
     av_close_input_file(ffmpeg_data->format_context);
 
--- gnusound-0.7.4/modules/file_flac.c.orig	2005-06-19 16:44:26.000000000 +0100
+++ gnusound-0.7.4/modules/file_flac.c	2008-02-04 10:09:26.000000000 +0000
@@ -36,7 +36,7 @@
 
     /* Decoder support. */
 
-    FLAC__FileDecoder *decoder;
+    FLAC__StreamDecoder *decoder;
     
     int dec_inited;
     int dec_error;
@@ -51,7 +51,7 @@
 
     /* Encoder support */
 
-    FLAC__FileEncoder *encoder;
+    FLAC__StreamEncoder *encoder;
 
     int enc_inited;
     int enc_error;
@@ -96,7 +96,7 @@
     }
 
 static FLAC__StreamDecoderWriteStatus 
-flac_dec_write_callback(const FLAC__FileDecoder *decoder,
+flac_dec_write_callback(const FLAC__StreamDecoder *decoder,
                         const FLAC__Frame *frame,
                         const FLAC__int32 * const buffer[],
                         void *client_data) {
@@ -132,7 +132,7 @@
 }
 
 static void 
-flac_dec_metadata_callback(const FLAC__FileDecoder *decoder,
+flac_dec_metadata_callback(const FLAC__StreamDecoder *decoder,
                            const FLAC__StreamMetadata *metadata,
                            void *client_data) {    
     struct flac_data *flac_data = ((struct file *)client_data)->driver_data;
@@ -174,7 +174,7 @@
 }
 
 static void
-flac_dec_error_callback(const FLAC__FileDecoder *decoder,
+flac_dec_error_callback(const FLAC__StreamDecoder *decoder,
                         FLAC__StreamDecoderErrorStatus status,
                         void *client_data) {
     struct flac_data *flac_data = ((struct file *)client_data)->driver_data;
@@ -186,30 +186,31 @@
 flac_open_for_reading(struct file *file,
                       struct file_params *params) {
     struct flac_data *flac_data = file->driver_data;
-    FLAC__FileDecoder *decoder;
+    FLAC__StreamDecoder *decoder;
 
-    decoder = FLAC__file_decoder_new();
+    decoder = FLAC__stream_decoder_new();
     
-    FLAC__file_decoder_set_md5_checking(decoder, false);
-    FLAC__file_decoder_set_filename(decoder, file->name);
-    FLAC__file_decoder_set_metadata_ignore_all(decoder);
-    FLAC__file_decoder_set_metadata_respond(decoder, FLAC__METADATA_TYPE_STREAMINFO);
-    FLAC__file_decoder_set_metadata_respond(decoder, FLAC__METADATA_TYPE_VORBIS_COMMENT);
-    FLAC__file_decoder_set_write_callback(decoder, flac_dec_write_callback);
-    FLAC__file_decoder_set_metadata_callback(decoder, flac_dec_metadata_callback);
-    FLAC__file_decoder_set_error_callback(decoder, flac_dec_error_callback);
-    FLAC__file_decoder_set_client_data(decoder, file);
-    if(FLAC__file_decoder_init(decoder) != FLAC__FILE_DECODER_OK)
-        return cmd_new_error_val("Could not initialize FLAC decoder: %s", FLAC__FileDecoderStateString[FLAC__file_decoder_get_state(decoder)]);
+    FLAC__stream_decoder_set_md5_checking(decoder, false);
+//    FLAC__file_decoder_set_filename(decoder, file->name);
+    FLAC__stream_decoder_set_metadata_ignore_all(decoder);
+    FLAC__strea_decoder_set_metadata_respond(decoder, FLAC__METADATA_TYPE_STREAMINFO);
+    FLAC__stream_decoder_set_metadata_respond(decoder, FLAC__METADATA_TYPE_VORBIS_COMMENT);
+    if(FLAC__stream_decoder_init_file(decoder,
+				file->name,
+				flac_dec_write_callback,
+				flac_dec_metadata_callback,
+				flac_dec_error_callback,
+				file) != FLAC__STREAM_DECODER_INIT_STATUS_OK)
+        return cmd_new_error_val("Could not initialize FLAC decoder: %s", FLAC__StreamDecoderStateString[FLAC__stream_decoder_get_state(decoder)]);
     
-    if(!FLAC__file_decoder_process_until_end_of_metadata(decoder))
-        return cmd_new_error_val("Could not process FLAC metadata: %s", FLAC__FileDecoderStateString[FLAC__file_decoder_get_state(decoder)]);
+    if(!FLAC__stream_decoder_process_until_end_of_metadata(decoder))
+        return cmd_new_error_val("Could not process FLAC metadata: %s", FLAC__StreamDecoderStateString[FLAC__stream_decoder_get_state(decoder)]);
     
     flac_data->decoder = decoder;
     
     if(!flac_data->dec_inited || flac_data->dec_error) {
-        FLAC__file_decoder_finish(decoder);
-        FLAC__file_decoder_delete(decoder);
+        FLAC__stream_decoder_finish(decoder);
+        FLAC__stream_decoder_delete(decoder);
         return cmd_new_error_val("Could not find STREAM info or "
                                  "STREAM info was invalid");
     }
@@ -217,8 +218,8 @@
     /* This is highly unlikely. */
 
     if(flac_data->dec_max_blocksize > SAVE_BUF_SIZE) {
-        FLAC__file_decoder_finish(decoder);
-        FLAC__file_decoder_delete(decoder);
+        FLAC__stream_decoder_finish(decoder);
+        FLAC__stream_decoder_delete(decoder);
         return cmd_new_error_val("The maximum blocksize (%d) for this file "
                                  "is larger than SAVE_BUF_SIZE (%d), increase "
                                  "SAVE_BUF_SIZE and recompile", 
@@ -239,7 +240,7 @@
     struct flac_data *flac_data = file->driver_data;
     struct cmd_value *r;
     int err, bits_per_sample;
-    FLAC__FileEncoder *encoder;
+    FLAC__StreamEncoder *encoder;
     const char *status;
     int max_lpc_order = 0,
         blocksize = 1152,
@@ -258,13 +259,13 @@
     if(!flac_data->enc_buffer) 
         return cmd_new_error_val("Could not allocate encoder buffer");
 
-    encoder = FLAC__file_encoder_new();
+    encoder = FLAC__stream_encoder_new();
 
     /* Standard properties. */
 
-    FLAC__file_encoder_set_filename(encoder, file->name);
-    FLAC__file_encoder_set_channels(encoder, params->channels);
-    FLAC__file_encoder_set_sample_rate(encoder, params->sample_rate);
+//    FLAC__file_encoder_set_filename(encoder, file->name);
+    FLAC__stream_encoder_set_channels(encoder, params->channels);
+    FLAC__stream_encoder_set_sample_rate(encoder, params->sample_rate);
     switch(params->sample_type) {
     case SAMPLE_TYPE_INT_8:
         bits_per_sample = 8;
@@ -281,7 +282,7 @@
         bits_per_sample = 24;
         break;
     }
-    FLAC__file_encoder_set_bits_per_sample(encoder, bits_per_sample);
+    FLAC__stream_encoder_set_bits_per_sample(encoder, bits_per_sample);
 
     /* FLAC encoding parameters. */
 
@@ -348,38 +349,32 @@
         break;
     }
     
-    FLAC__file_encoder_set_do_exhaustive_model_search(encoder, exhaustive_model_search);
-    FLAC__file_encoder_set_blocksize(encoder, blocksize);
-    FLAC__file_encoder_set_max_lpc_order(encoder, max_lpc_order);
-    FLAC__file_encoder_set_min_residual_partition_order(encoder, residual_partition_order_min);
-    FLAC__file_encoder_set_max_residual_partition_order(encoder, residual_partition_order_max);
+    FLAC__stream_encoder_set_do_exhaustive_model_search(encoder, exhaustive_model_search);
+    FLAC__stream_encoder_set_blocksize(encoder, blocksize);
+    FLAC__stream_encoder_set_max_lpc_order(encoder, max_lpc_order);
+    FLAC__stream_encoder_set_min_residual_partition_order(encoder, residual_partition_order_min);
+    FLAC__stream_encoder_set_max_residual_partition_order(encoder, residual_partition_order_max);
     if(params->channels == 2) {
-        FLAC__file_encoder_set_do_mid_side_stereo(encoder, mid_side);
-        FLAC__file_encoder_set_loose_mid_side_stereo(encoder, adaptive_mid_side);
+        FLAC__stream_encoder_set_do_mid_side_stereo(encoder, mid_side);
+        FLAC__stream_encoder_set_loose_mid_side_stereo(encoder, adaptive_mid_side);
     }
     
-    if((err = FLAC__file_encoder_init(encoder)) != FLAC__FILE_ENCODER_OK) {
+    if((err = FLAC__stream_encoder_init_file(encoder,
+					    file->name,
+					    NULL,
+					    file)) != FLAC__STREAM_ENCODER_INIT_STATUS_OK) {
 
         /* Initialization failed, get error condition. */
 
         if(flac_data->enc_buffer)
             mem_free(flac_data->enc_buffer);
         
-        if(FLAC__file_encoder_get_state(encoder) == 
-           FLAC__FILE_ENCODER_SEEKABLE_STREAM_ENCODER_ERROR) {
-            if(FLAC__file_encoder_get_seekable_stream_encoder_state(encoder) ==
-               FLAC__SEEKABLE_STREAM_ENCODER_STREAM_ENCODER_ERROR)
-                status = FLAC__StreamEncoderStateString[FLAC__file_encoder_get_stream_encoder_state(encoder)];
-            else
-                status = FLAC__SeekableStreamEncoderStateString[FLAC__file_encoder_get_seekable_stream_encoder_state(encoder)];
-        } else {
-            status = FLAC__FileEncoderStateString[FLAC__file_encoder_get_state(encoder)];
-        }
+        status = FLAC__StreamEncoderStateString[FLAC__stream_encoder_get_state(encoder)];
         
         FAIL("encoder initialization failure: %s\n", status);
         r = cmd_new_error_val("Could not initialize encoder: %s", status);
 
-        FLAC__file_encoder_delete(encoder);
+        FLAC__stream_encoder_delete(encoder);
 
         return r;
         
@@ -419,7 +414,7 @@
      * buffer. 
      */
 
-    if(!FLAC__file_decoder_process_single(flac_data->decoder))
+    if(!FLAC__stream_decoder_process_single(flac_data->decoder))
         return -1;
 
     if(flac_data->dec_error)
@@ -463,11 +458,11 @@
         break;
     }
 
-    err = FLAC__file_encoder_process_interleaved(flac_data->encoder,
+    err = FLAC__stream_encoder_process_interleaved(flac_data->encoder,
                                                  flac_data->enc_buffer,
                                                  count);
     if(!err) {
-        FAIL("encoder failure: %s\n", FLAC__FileEncoderStateString[FLAC__file_encoder_get_state(flac_data->encoder)]);
+        FAIL("encoder failure: %s\n", FLAC__StreamEncoderStateString[FLAC__stream_encoder_get_state(flac_data->encoder)]);
         return -1;
     }
     
@@ -479,16 +474,16 @@
     struct flac_data *flac_data = file->driver_data;
 
     if(flac_data->dec_inited) {
-        FLAC__file_decoder_finish(flac_data->decoder);
-        FLAC__file_decoder_delete(flac_data->decoder);
+        FLAC__stream_decoder_finish(flac_data->decoder);
+        FLAC__stream_decoder_delete(flac_data->decoder);
         //        if(flac_data->dec_buffer)
         //            mem_free(flac_data->dec_buffer);
         flac_data->dec_inited = 0;
     }
 
     if(flac_data->enc_inited) {
-        FLAC__file_encoder_finish(flac_data->encoder);
-        FLAC__file_encoder_delete(flac_data->encoder);
+        FLAC__stream_encoder_finish(flac_data->encoder);
+        FLAC__stream_encoder_delete(flac_data->encoder);
         if(flac_data->enc_buffer)
             mem_free(flac_data->enc_buffer);
         flac_data->enc_inited = 0;
